<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARHMTED023">
<Description>
ED Local Doc Report</Description>
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>61221,1747.427917</TimeCreated>

<Method name="LocalDocListReportClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="LocalDocListReportExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,DateFrom:%Date,DateTo:%Date,Hospital:%Integer,RefDoctor:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 k ^zbernard	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 n PAADMAdmDate,PAADMDischgDate,PAADMAdmTime,PAADMDischgTime,PAADMSeenDate,PAADMSeenTime,PAADMADMNo,PAPMINo,PAPMIName,PAPMIName2,MRCIDDesc,CTZIPCode,HOSPRowId,HOSPDesc,CTPCPDesc,DSCLDesc,REFDRowId,REFDDesc,MRADMDischClassifDR,TRANSRowId,PAADMMainMRADMDR,REFDCode
 s (HOSPRowId,REFDRowId,MRADMDischClassifDR)=0
 s (PAADMAdmDate,PAADMDischgDate,PAADMAdmTime,PAADMDischgTime,PAADMSeenDate,PAADMSeenTime,PAADMADMNo,PAPMINo,PAPMIName,PAPMIName2,MRCIDDesc,CTZIPCode,HOSPDesc,CTPCPDesc,DSCLDesc,REFDDesc,TRANSRowId,PAADMMainMRADMDR,REFDCode)=""

 s ind=1

 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)

 //s ^bernard("2")=(2)

 &sql(declare LocalDocListReport cursor for
 SELECT 
 PAADM_AdmDate,
 PAADM_DischgDate,
 PAADM_AdmTime,
 PAADM_DischgTime,
 PAADM_SeenDate,
 PAADM_SeenTime,
 PAADM_ADMNo,   
 PAADM_PAPMI_DR->PAPMI_No,
 PAADM_PAPMI_DR->PAPMI_Name,
 PAADM_PAPMI_DR->PAPMI_Name2,
 MRDIA_ICDCode_DR->MRCID_Desc,
 PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_ZIP_DR->CTZIP_Code,
 PAADM_CurrentWard_DR->WARD_LocationDR->CTLOC_HOspital_DR->HOSP_RowId,
 PAADM_CurrentWard_DR->WARD_LocationDR->CTLOC_HOspital_DR->HOSP_Desc,
 TRANS_CTCP_DR->CTPCP_Desc,
 PAADM_MainMRADM_DR->MRADM_DischClassif_DR->DSCL_Desc,
 PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_FamilyDoctor_DR,
 PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_FamilyDoctor_DR->REFD_Desc,
 PAADM_MainMRADM_DR->MRADM_DischClassif_DR,
 TRANS_RowId,
 PAADM_MainMRADM_DR,
 PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_FamilyDoctor_DR->REFD_Code
 FROM SQLUser.PA_Adm, SQLUser.MR_Diagnos, SQLUser.PA_AdmTransaction
 WHERE PAADM_MainMRADM_DR=*MRDIA_MRADM_ParRef and PAADM_RowId=TRANS_ParRef and 
 PAADM_DischgDate between :DateFrom and :DateTo and 
 PAADM_Type='E' and TRANS_TransType_DR=3 and 
 PAADM_VisitStatus<>'C'
 and
 (((PAADM_MainMRADM_DR->MRADM_DischClassif_DR<>25 or
 PAADM_MainMRADM_DR->MRADM_DischClassif_DR<>32) and TRANS_CTCP_DR is not null)
 or PAADM_MainMRADM_DR->MRADM_DischClassif_DR in (25,32)))
 &sql(open LocalDocListReport)


 //fetch first row
 &sql(fetch LocalDocListReport into :PAADMAdmDate,:PAADMDischgDate,:PAADMAdmTime,:PAADMDischgTime,:PAADMSeenDate,:PAADMSeenTime,:PAADMADMNo,:PAPMINo,:PAPMIName,:PAPMIName2,:MRCIDDesc,:CTZIPCode,:HOSPRowId,:HOSPDesc,:CTPCPDesc,:DSCLDesc,:REFDRowId,:REFDDesc,:MRADMDischClassifDR,:TRANSRowId,:PAADMMainMRADMDR,:REFDCode)

 while 'SQLCODE{
 d FormatDates
 d FormatTimes

 // build the row
 Set ^CacheTemp(repid,ind)=$LB(PAADMAdmDate,PAADMDischgDate,PAADMAdmTime,PAADMDischgTime,PAADMSeenDate,PAADMSeenTime,PAADMADMNo,PAPMINo,PAPMIName,PAPMIName2,MRCIDDesc,CTZIPCode,HOSPRowId,HOSPDesc,CTPCPDesc,DSCLDesc,REFDRowId,REFDDesc,MRADMDischClassifDR,TRANSRowId,PAADMMainMRADMDR,REFDCode)
 s ind=ind+1
 //fetch rows
 &sql(fetch LocalDocListReport into :PAADMAdmDate,:PAADMDischgDate,:PAADMAdmTime,:PAADMDischgTime,:PAADMSeenDate,:PAADMSeenTime,:PAADMADMNo,:PAPMINo,:PAPMIName,:PAPMIName2,:MRCIDDesc,:CTZIPCode,:HOSPRowId,:HOSPDesc,:CTPCPDesc,:DSCLDesc,:REFDRowId,:REFDDesc,:MRADMDischClassifDR,:TRANSRowId,:PAADMMainMRADMDR,:REFDCode)
 }

 //s ^zBernard("3")=(3)
 &sql(close LocalDocListReport)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 //s ^zBernard("4")=(4)
 Quit $$$OK


FormatDates
 // Convert the dates to ODBC date format
 If PAADMAdmDate Set PAADMAdmDate=$ZD(PAADMAdmDate,3)
 If PAADMDischgDate Set PAADMDischgDate=$ZD(PAADMDischgDate,3)
 If PAADMSeenDate Set PAADMSeenDate=$ZD(PAADMSeenDate,3)

 //s ^zBernard("5")=(5)
 Quit

FormatTimes
 // Convert the times to ODBC time format
 If PAADMAdmTime Set PAADMAdmTime=$ZT(PAADMAdmTime,2)
 If PAADMDischgTime Set PAADMDischgTime=$ZT(PAADMDischgTime,2)
 If PAADMSeenTime Set PAADMSeenTime=$ZT(PAADMSeenTime,2)
 Quit
]]></Implementation>
</Method>

<Method name="LocalDocListReportFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="LookUpBrokerHospital">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>itmjs:%Library.String="",itmjsex:%Library.String="",HOSPDesc:%Library.String=""</FormalSpec>
<Implementation><![CDATA[
 n id,code,desc
 s (id,code,desc)=""

 ; Try and find a matching code
 &sql(SELECT  distinct
HOSP_Desc,
HOSP_RowId,
HOSP_Code
INTO :desc, :id, :code
FROM SQLUSER.CT_Hospital
WHERE ((%UPPER HOSP_Desc = %UPPER :HOSPDesc))
)

 i SQLCODE s desc=HOSPDesc q 0
 s retval=itmjs_"('"_$ZCVT(desc,"O","JS")_"');"
 i itmjsex'="""" s retval=retval_itmjsex_"('"_$ZCVT(desc,"O","JS")_"^"_id_"^"_$ZCVT(code,"O","JS")_"');"
 &javascript<#(retval)#>
 q 1
]]></Implementation>
</Method>

<Method name="LookUpBrokerRefDoctor">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>itmjs:%Library.String="",itmjsex:%Library.String="",REFDDesc:%Library.String="",RefDID:%String</FormalSpec>
<Implementation><![CDATA[
 n id,code,desc,activedate
 s (id,code,desc)=""

 ; Try and find a matching code
 &sql(SELECT  distinct
REFD_Desc,
REFD_RowId,
REFD_Code
INTO :desc, :id, :code
FROM SQLUSER.PAC_RefDoctor
WHERE (REFD_DateActiveTo is null or REFD_DateActiveTo<CURRENT_DATE) AND
(({fn CONCAT( ',', {fn CONCAT((:RefDoc),',')})} [ {fn CONCAT( ',', {fn CONCAT(REFD_RowId,',')})}) OR (:RefDoc  IS NULL))
AND
((%UPPER REFD_Desc = %UPPER :REFDDesc))
)

 i SQLCODE s desc=REFDDesc q 0
 s retval=itmjs_"('"_$ZCVT(desc,"O","JS")_"');"
 i itmjsex'="""" s retval=retval_itmjsex_"('"_$ZCVT(desc,"O","JS")_"^"_id_"^"_$ZCVT(code,"O","JS")_"');"
 &javascript<#(retval)#>
 q 1
]]></Implementation>
</Method>

<Query name="LocalDocListReport">
<Description>
SWARH Local Doc List Stored Proc
It expects 2 parameter of type ADMIT date and will return a list of records:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time</Description>
<Type>%Library.Query</Type>
<FormalSpec>DateFrom:%Date,DateTo:%Date,Hospital:%Integer,RefDoctor:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAADMAdmDate:%Date,PAADMDischgDate:%Date,PAADMAdmTime:%String(MAXLEN=255),PAADMDischgTime:%String(MAXLEN=255),PAADMSeenDate:%Date,PAADMSeenTime:%String(MAXLEN=255),PAADMAdmNo:%String(MAXLEN=255),PAPMINo:%String(MAXLEN=255),PAPMIName:%String(MAXLEN=255),PAPMIName2:%String(MAXLEN=255),MRCIDDesc:%String(MAXLEN=255),CTZIPCode:%String(MAXLEN=255),HOSPRowId:%Integer,HOSPDesc:%String(MAXLEN=255),CTPCPDesc:%String(MAXLEN=255),DSCLDesc:%String(MAXLEN=255),REFDRowId:%String(MAXLEN=255),REFDDesc:%String(MAXLEN=255),MRADMDischClassifDR:%Integer,TRANSRowId:%String(MAXLEN=255),PAADMMainMRADMDR:%Integer,REFDCode:%String(MAXLEN=255)"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>

<Query name="LookUpHospital">
<Description>
Lookup returning all Hospitals</Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>HOSPDesc:%String</FormalSpec>
<SqlQuery>SELECT  distinct
HOSP_Desc,
HOSP_RowId,
HOSP_Code
INTO :desc, :id, :code
FROM SQLUSER.CT_Hospital
WHERE ((HOSP_Desc %STARTSWITH :HOSPDesc))
ORDER BY HOSP_Desc ASC</SqlQuery>
<Parameter name="CONTAINID" value="2"/>
<Parameter name="ROWSPEC" value="HOSPDesc:%String,HIDDEN:%String,HOSPCode:%String"/>
</Query>

<Query name="LookUpRefDoctor">
<Description>
Lookup returning all current Refdoctors</Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>REFDDesc:%String,RefDID:%String</FormalSpec>
<SqlQuery><![CDATA[SELECT  distinct
REFD_Desc,
REFD_RowId,
REFD_Code
INTO :desc, :id, :code
FROM SQLUSER.PAC_RefDoctor
WHERE (REFD_DateActiveTo is null or REFD_DateActiveTo<CURRENT_DATE) AND 
(({fn CONCAT( ',', {fn CONCAT((:RefDID),',')})} [ {fn CONCAT( ',', {fn CONCAT(REFD_RowId,',')})}) OR (:RefDId IS NULL))
AND
((REFD_Desc %STARTSWITH :REFDDesc))
ORDER BY REFD_Desc ASC]]></SqlQuery>
<Parameter name="CONTAINID" value="2"/>
<Parameter name="ROWSPEC" value="REFDDesc:%String,HIDDEN:%String,REFDCode:%String"/>
</Query>
</Class>
</Export>
