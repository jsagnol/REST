<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.Reader">
<IncludeCode>XML.Element</IncludeCode>
<Super>%XML.Reader</Super>
<TimeCreated>62734,69952.552</TimeCreated>

<Parameter name="SrcVer">
<Description>
This Parameter is updated by Perforce</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/Reader.xml#1 $</Default>
</Parameter>

<Property name="Filename">
<Description>
The filename used as an XML source. </Description>
<Type>%String</Type>
</Property>

<Method name="ResolveElement">
<Description>
ResolveElement() returns the class name corresponding to an element name
within the current XMLReader context.</Description>
<Internal>1</Internal>
<FormalSpec>element:%String,defaultNamespace:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If element="" Quit ""
	If '$Data(i%CorrelationTable) {
		#; XML.Information is used to include details relating to the element.
		If element="Information" Quit "XML.Information"
		If ##class(%Dictionary.CompiledClass).%ExistsId(element) {
			#; Check the class is both XMLENABLED and GUIDENABLED.
			#; These are turned on by XML.Adaptor.
			If $$$comMemberKeyGet(element,$$$cCLASSparameter,"XMLENABLED",$$$cPARAMdefault),$$$comMemberKeyGet(element,$$$cCLASSparameter,"GUIDENABLED",$$$cPARAMdefault) Quit element
		}
	} Else {
		Quit ##super(element, defaultNamespace)
	}
	Quit ""
]]></Implementation>
</Method>

<Method name="Next">
<Description><![CDATA[
Get and return the next object.<p>
<method>Next</method> returns 1 (true), if the next object matching one of the Correlate criteria 
is found and successfully imported.<br>
<method>Next</method> returns 0 (false) and a %Status of $$$OK in sc
after all objects have been imported.<br>
<method>Next</method> returns 0 (false) and an error %Status in sc, 
if an error has occurred importing this object.<p>
The <var>namespace</var> argument indicates the default namespace 
for this XML file.]]></Description>
<FormalSpec><![CDATA[&oref:%ObjectHandle,&sc:%Status,namespace:%String="",&qstruct:%String]]></FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	#; Errors will be returned via the status.  Do not count errors that are not returned.
	#; During the oref.XMLImport call the error count would be incremented without returning any errors.
	#Define IsGUID(%val) %val?8(1N,1"A",1"B",1"C",1"D",1"E",1"F")1"-"4(1N,1"A",1"B",1"C",1"D",1"E",1"F")1"-"4(1N,1"A",1"B",1"C",1"D",1"E",1"F")1"-"4(1N,1"A",1"B",1"C",1"D",1"E",1"F")1"-"12(1N,1"A",1"B",1"C",1"D",1"E",1"F")
	New %ISCCountErrors
	
	Set sc=$$$OK
	If ..Document="" Quit 0
	Set tree = ..Document.DocumentId
	Set oref = ""
	If +i%Node = 0 {
		Set node = 0
	} Else {
		Set node = $$$xmlParentNode(tree,i%Node)
	}
	#; 'found' indicates a matching object has been correlated.
	Set found = 0
	Set loadguids=$$$qualifierGetValue(qstruct,"loadguids")
	Set update=$$$qualifierGetValue(qstruct,"update")
	While node '= "" {
		Set i%Node = $$$xmlGetNextChild(tree,node,i%Node)
		While i%Node '= "" {
			If $$$xmlGetNodeType(tree,i%Node)=$$$xmlELEMENTNODE {
				Set element = $$$xmlGetLocalName(tree,i%Node)
				Set type = $get(i%CorrelationTable($c(0)))
				If type = "" Set type = ..ResolveElement(element,namespace)
				If type '= "" {
					Set oref=$get(i%Idlist(i%Node))
					If oref="" {
						If loadguids {
							If $zobjclassmethod(type,"%GetParameter","GUIDENABLED") {
								Set oref=$zobjclassmethod(type,"XMLLoadGUID",..Document,i%Node)
								If oref'="" {
									Set i%Idlist(i%Node)=oref
								}
							}
						} Else {
							$$$XMLTimerNewMark
							Set oref=$zobjclassmethod(type,"XMLNew",..Document,i%Node)
							$$$XMLTimerRecord("XMLNew")
							If oref'="" {
								#; GUID reference checks.
								#; Ideally this check would be done during XMLImport for properties that are exported as GUIDs.
								#; To avoid overriding the entire method we parse for GUIDs prior to the call to XMLImport.
								Set ref = ""
								For  {
									Set ref = $order(@tree@(ref))
									If ref = "" Quit
									
									#; References to another object using a GUID are in character data.
									Set data=$order(@tree@(ref,"c",""))
									If data'="",$order(@tree@(ref,"c",data))="",$listget($get(@tree@(data,0)),1)'="e" {
										Set data=@tree@(data)
										#; Check whether or not this field uses a GUID.
										#; If it's a GUID that has not already been processed, check if it exists for this system.
										If $$$IsGUID(data), '$d(handled(data)) {
											#; Does the GUID match an existing object.
											Set oid = ##class(%Library.GUID).%GUIDFind(data)
											#; GUIDs are not removed when an object is deleted.
											#; When there is an oid confirm the object still exists.
											If oid '= "" {
												Set exists = $ClassMethod($$$oidClassName(oid),"%Exists",oid)
											} Else {
												Set exists = 0
											}
											Set handled(data) = exists
											If 'exists {
												;w !,..Filename_":"_data
												$$$xmlSubMemberSet("file",..Filename,"unknown",data)
											}
										}
									}
								}
								Merge idlist=i%Idlist
								$$$XMLTimerNewMark
								Set sc=$$$ADDSC(sc, oref.XMLImport(element,i%OpenFormat,namespace,..Document,i%Node,.idlist))
								$$$XMLTimerRecord("XMLImport")
								Merge i%Idlist=idlist
							}
						}
					}
					Set found = 1
					Quit
				}
			}
			If $$$xmlHasChildNodes(tree,i%Node) {
				Set node = i%Node
				Set i%Node = ""
			}
			Set i%Node = $$$xmlGetNextChild(tree,node,i%Node)
		}
		If found Quit
		Set i%Node = node
		Set node = $$$xmlParentNode(tree,i%Node)
	}
	If $$$ISOK(sc) && found Quit 1
	Set i%Node = ""
	Quit 0
]]></Implementation>
</Method>

<Method name="OpenFile">
<Description>
Import XML source from a file using %XML.Document.</Description>
<FormalSpec>xmlsource:%String,format:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..Filename = xmlsource
	Quit ..Open(xmlsource,"ParseFile",.format)
]]></Implementation>
</Method>
</Class>
</Export>
