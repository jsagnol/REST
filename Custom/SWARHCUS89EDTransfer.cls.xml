<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARHCUS89EDTransfer">
<Description>
ED Transfers to other hospitals</Description>
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>61685,51536.892313</TimeCreated>

<Method name="EDTransferClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="EDTransferExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,DateFrom:%Date,DateTo:%Date,Hospital:%String(MAXLEN=255),TransferDest:%String(MAXLEN=255)]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 k ^zbernard	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 n HOSPRowId,HOSPDesc,WARDCode,WARDDesc,UR,PAADMADMNo,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTimeREADELDesc,RETRADesc,TRDCode,TRDDesc,TRDRowId,DSCLDesc,TRANSPDesc,CTPCPDesc
 s (HOSPRowId,TRDRowId)=0
 s (HOSPDesc,WARDCode,WARDDesc)=""
 s (UR,PAADMADMNo,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,READELDesc,RETRADesc,TRDCode,TRDDesc,DSCLDesc,TRANSPDesc,CTPCPDesc)=""
 
  
 s ind=1

 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)

 //s ^bernard("2")=(2)
 
 &sql(declare EDTransfer cursor for
 
 SELECT
 	CT_Hospital.HOSP_RowId,
 	CT_Hospital.HOSP_Desc,
 	PAC_Ward.WARD_Code,
 	PAC_Ward.WARD_Desc,
 	PA_Adm.PAADM_PAPMI_DR->PAPMI_No,
 	PA_Adm.PAADM_ADMNo,
 	PA_Adm.PAADM_AdmDate,
 	PA_Adm.PAADM_AdmTime,
 	PA_Adm.PAADM_DischgDate,
 	PA_Adm.PAADM_DischgTime,	
	PAADM_ReasonDelDisch_DR->READEL_Desc,
	PAADM_MainMRADM_DR->MRADM_ReasonTransfer_DR->RETRA_Desc,
	PAADM_MainMRADM_DR->MRADM_TransfDest_DR->TRD_Code,
	PAADM_MainMRADM_DR->MRADM_TransfDest_DR->TRD_Desc,
	PAADM_MainMRADM_DR->MRADM_TransfDest_DR->TRD_RowId,
	PAADM_MainMRADM_DR->MRADM_DischClassif_DR->DSCL_Desc,
	PAADM_MainMRADM_DR->MRADM_DischTransport_DR->TRANSP_Desc,
	CTPCP_Desc
 	
 FROM
 	SQLUser.PA_Adm,
 	SQLUser.CT_Hospital,
 	SQLUser.PAC_Ward,
 	SQLUser.MR_Adm, 
 	SQLUser.CT_CareProv,
 	SQLUser.PAC_TransferDestination
 WHERE

 	(PA_Adm.PAADM_Hospital_DR=CT_Hospital.HOSP_RowId)
 	AND (PA_Adm.PAADM_CurrentWard_DR=PAC_Ward.WARD_RowID)
 	AND PAADM_DischgDate between :DateFrom AND :DateTo
 	AND CT_Hospital.HOSP_Code=:Hospital
 	AND PAC_Ward.WARD_Code='ED'
 	AND PAADM_MainMRADM_DR=MRADM_RowId and MRADM_TransfDest_DR is not null
	and (MRADM_DischClassif_DR=40 or MRADM_DischClassif_DR=41 or MRADM_DischClassif_DR=42) 
	and PAADM_AdmDocCodeDR=*CTPCP_RowId
 	and MRADM_TransfDest_DR=PAC_TransferDestination.TRD_RowId
    and PAC_TransferDestination.TRD_Code=:TransferDest
)
 &sql(open EDTransfer)

  //fetch first row 
 &sql(fetch EDTransfer into :HOSPRowId,:HOSPDesc,:WARDCode,:WARDDesc,:UR,:PAADMADMNo,:PAADMAdmDate,:PAADMAdmTime,:PAADMDischgDate,:PAADMDischgTime,:READELDesc,:RETRADesc,:TRDCode,:TRDDesc,:TRDRowId,:DSCLDesc,:TRANSPDesc,:CTPCPDesc
 )

 while 'SQLCODE{
 
 d FormatDates
 d FormatTimes

 // build the row
 Set ^CacheTemp(repid,ind)=$LB(HOSPRowId,HOSPDesc,WARDCode,WARDDesc,UR,PAADMADMNo,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,READELDesc,RETRADesc,TRDCode,TRDDesc,TRDRowId,DSCLDesc,TRANSPDesc,CTPCPDesc)
 s ind=ind+1
 //fetch rows
 &sql(fetch EDTransfer into :HOSPRowId,:HOSPDesc,:WARDCode,:WARDDesc,:UR,:PAADMADMNo,:PAADMAdmDate,:PAADMAdmTime,:PAADMDischgDate,:PAADMDischgTime,:READELDesc,:RETRADesc,:TRDCode,:TRDDesc,:TRDRowId,:DSCLDesc,:TRANSPDesc,:CTPCPDesc)
 }

 //s ^zBernard("3")=(3)
 &sql(close EDTransfer)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 //s ^zBernard("4")=(4)

 Quit $$$OK


FormatDates
 // Convert the dates to ODBC date format
 If PAADMDischgDate Set PAADMDischgDate=$ZD(PAADMDischgDate,4)
 If PAADMAdmDate Set PAADMAdmDate=$ZD(PAADMAdmDate,4)
 Quit
 
FormatTimes
 // Convert the times to ODBC time format
 If PAADMAdmTime Set PAADMAdmTime=$ZTIME(PAADMAdmTime,3)
 If PAADMDischgTime Set PAADMDischgTime=$ZTIME(PAADMDischgTime,3)
 Quit
]]></Implementation>
</Method>

<Method name="EDTransferFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)

 Quit $$$OK
]]></Implementation>
</Method>

<Query name="EDTransfer">
<Description>
GHA List reports Stored Procedure
It expects 2 parameter of type date and will return a list of records:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time</Description>
<Type>%Library.Query</Type>
<FormalSpec>DateFrom:%Date,DateTo:%Date,Hospital:%String(MAXLEN=255),TransferDest:%String(MAXLEN=255)</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="HOSPRowId:%Integer,HOSPDesc:%String(MAXLEN=255),WARDCode:%String(MAXLEN=255),WARDDesc:%String(MAXLEN=255),UR:%String(MAXLEN=255),PAADMADMNo:%String(MAXLEN=255),PAADMAdmDate:%String(MAXLEN=255),PAADMAdmTime:%String(MACLEN=255),PAADMDischgDate:%String(MAXLEN=255),PAADMDischgTime:%String(MACLEN=255),READELDesc:%String(MAXLEN=255),RETRADesc:%String(MAXLEN=255),TRDCode:%String(MAXLEN=255),TRDDesc:%String(MAXLEN=255),TRDRowId:%Integer,DSCLDesc:%String(MAXLEN=255),TRANSPDesc:%String(MAXLEN=255),CTPCPDesc:%String(MAXLEN=255)"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>

<Query name="LookUpHospital">
<Description>
Lookup on Hospital returning all active services</Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>Hospital:%String</FormalSpec>
<SqlQuery><![CDATA[SELECT HOSP_Desc, HOSP_RowId, HOSP_Code
FROM SQLUser.CT_Hospital
WHERE ((%ALPHAUP HOSP_Desc %STARTSWITH %ALPHAUP :Hospital) OR (%ALPHAUP HOSP_Code %STARTSWITH %ALPHAUP :Hospital))
AND (HOSP_DateFrom <= CURRENT_DATE)
AND ((HOSP_DateTo IS NULL) OR (HOSP_DateTo >= CURRENT_DATE))
ORDER BY HOSP_Desc]]></SqlQuery>
<Parameter name="CONTAINID" value="2"/>
<Parameter name="ROWSPEC" value="Description:%String,HIDDEN:%String,Code:%String"/>
</Query>

<Method name="LookUpBrokerHospital">
<ClassMethod>1</ClassMethod>
<FormalSpec>itmjs:%Library.String="",itmjsex:%Library.String="",Hospital:%Library.String=""</FormalSpec>
<Implementation><![CDATA[
 n id,code,desc,activedate

 s (id,code,desc)=""

 ; Try and find a matching code
 &sql(SELECT	HOSP_Desc, HOSP_RowId, HOSP_Code
 INTO	:desc, :id, :code
 FROM	SQLUser.CT_Hospital
 WHERE	((%ALPHAUP HOSP_Desc = %ALPHAUP :Hospital) OR (%ALPHAUP HOSP_Code = %ALPHAUP :Hospital))
 AND (HOSP_DateFrom <= CURRENT_DATE)
 AND ((HOSP_DateTo IS NULL) OR (HOSP_DateTo >= CURRENT_DATE))
 )
 ;
 i SQLCODE s desc=Hospital q 0
 s retval=itmjs_"('"_$ZCVT(desc,"O","JS")_"');"
 i itmjsex'="""" s retval=retval_itmjsex_"('"_$ZCVT(desc,"O","JS")_"^"_id_"^"_$ZCVT(code,"O","JS")_"');"
 &javascript<#(retval)#>
 q 1
]]></Implementation>
</Method>

<Query name="LookUpTransDest">
<Description>
Lookup on Transfer Destinations</Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>TransDest:%String</FormalSpec>
<SqlQuery>SELECT TRD_Desc, TRD_RowId, TRD_Code 
FROM SQLUser.PAC_TransferDestination
WHERE ((%ALPHAUP TRD_Desc %STARTSWITH %ALPHAUP :TransDest) OR (%ALPHAUP TRD_Code %STARTSWITH %ALPHAUP :TransDest))
ORDER BY TRD_Desc</SqlQuery>
<Parameter name="CONTAINID" value="2"/>
<Parameter name="ROWSPEC" value="Description:%String,HIDDEN:%String,Code:%String"/>
</Query>

<Method name="LookUpBrokerTransDest">
<ClassMethod>1</ClassMethod>
<FormalSpec>itmjs:%Library.String="",itmjsex:%Library.String="",TransDest:%Library.String=""</FormalSpec>
<Implementation><![CDATA[
 n id,code,desc

 s (id,code,desc)=""

 ; Try and find a matching code
 &sql(SELECT	 TRD_Desc, TRD_Code, TRD_RowId
 INTO	:desc, :code, :id
 FROM	SQLUser.PAC_TransferDestination
 WHERE	((%ALPHAUP TRD_Desc = %ALPHAUP :TransDest) OR (%ALPHAUP TRD_Code = %ALPHAUP :TransDest))
 )
 ;
 i SQLCODE s desc=TransDest q 0
 s retval=itmjs_"('"_$ZCVT(desc,"O","JS")_"');"
 i itmjsex'="""" s retval=retval_itmjsex_"('"_$ZCVT(desc,"O","JS")_"^"_id_"^"_$ZCVT(code,"O","JS")_"');"
 &javascript<#(retval)#>
 q 1
]]></Implementation>
</Method>
</Class>
</Export>
