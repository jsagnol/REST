<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRTHR1010">
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRTHR1010.xml#1 $</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
/*
 * Report Name: <SWARHReportName> <br>
 * Report Code: SWARH.R.<SWARHReportCode> <br>
 * SWARH Developer: your name <br>
 */
]]></Content>
</UDLText>

<Method name="SWARHRTHR1010Close">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRTHR1010Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Library.String,DateFrom:%Date,DateTo:%Date]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 /* TEMPLATE MODIFY: Define and initialise appropriate column variables to describe output rowset columns */
 New ANAOPSurgeonDR,CTPCPDesc,ANAOPStatePPPDR,SPPPDesc,ProcCount,EmergProcCount,ElectProcCount,PrivateProcCount
 New PublicProcCount,YProcCount,YEmergProcCount,YElectProcCount,YPrivateProcCount,YPublicProcCount
 Set (ANAOPSurgeonDR,CTPCPDesc,ANAOPStatePPPDR,SPPPDesc,ProcCount,EmergProcCount,ElectProcCount,PrivateProcCount)=""
 Set (PublicProcCount,YProcCount,YEmergProcCount,YElectProcCount,YPrivateProcCount,YPublicProcCount)=""

 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 //Convert ODBC dates to cache format
 s DateFrom=..ConvertDateToCache(DateFrom)
 s DateTo=..ConvertDateToCache(DateTo)
 
 s YearDate = ..ConvertDateToCache($PIECE($ZDATE($HOROLOG,3),"-")_"-01-01")
 
 
 
 &SQL(DECLARE SWARHRTHR1010Cursor CURSOR FOR 
		Select 
			AN.ANAOP_Surgeon_DR,
			%SQLSTRING(AN.ANAOP_Surgeon_DR->CTPCP_Desc) AS CTPCP_Desc,
	   		AN.ANAOP_StatePPP_DR,
		   		%SQLSTRING(PPP.SPPP_Desc) AS SPPP_Desc,
				   COUNT(*) AS ProcCount,
		SUM(CASE WHEN rb.RBOP_BookingType = 'EM' THEN 1 ELSE 0 END) AS EmergProcCount,
			SUM(CASE WHEN rb.RBOP_BookingType = 'EL' THEN 1 ELSE 0 END) AS ElectProcCount,
			SUM(CASE WHEN C.INS_InsType_DR->INST_code not in('PUB','ACC') THEN 1 ELSE 0 END) AS PrivateProcCount,
			SUM(CASE WHEN C.INS_InsType_DR->INST_code = 'PUB' THEN 1 ELSE 0 END) AS PublicProcCount,
			YProcCount,
			YEmergProcCount,
			YElectProcCount,
			YPrivateProcCount,
			YPublicProcCount
	
	FROM SQLUser.OR_Anaest_Operation AN
	INNER JOIN SQLUser.OR_Anaesthesia A on AN.ANAOP_Par_Ref = A.ANA_RowId
	INNER join SQLUser.RB_OperatingRoom RB on (A.ANA_RBOperatingRoom_DR = RB.RBOP_RowId)
	LEFT JOIN SQLUser.PA_AdmInsurance C ON RB.RBOP_PAADM_DR = C.INS_ParRef
	LEFT JOIN SQLUser.PAC_StatePPP PPP on PPP.SPPP_RowId = AN.ANAOP_StatePPP_DR
	
	LEFT JOIN (
		SELECT 
			YAN.ANAOP_Surgeon_DR,
	   		YAN.ANAOP_StatePPP_DR,
			COUNT(*) AS YProcCount,
			SUM(CASE WHEN YRB.RBOP_BookingType = 'EM' THEN 1 ELSE 0 END) AS YEmergProcCount,
			SUM(CASE WHEN YRB.RBOP_BookingType = 'EL' THEN 1 ELSE 0 END) AS YElectProcCount,
			SUM(CASE WHEN YC.INS_InsType_DR->INST_code not in('PUB','ACC') THEN 1 ELSE 0 END) AS YPrivateProcCount,
			SUM(CASE WHEN YC.INS_InsType_DR->INST_code = 'PUB' THEN 1 ELSE 0 END) AS YPublicProcCount
		FROM SQLUser.OR_Anaest_Operation YAN
			INNER JOIN SQLUser.OR_Anaesthesia YA on YAN.ANAOP_Par_Ref = YA.ANA_RowId
			INNER join SQLUser.RB_OperatingRoom YRB on (YA.ANA_RBOperatingRoom_DR = YRB.RBOP_RowId)
			LEFT JOIN SQLUser.PA_AdmInsurance YC ON YRB.RBOP_PAADM_DR = YC.INS_ParRef
			LEFT JOIN SQLUser.PAC_StatePPP YPPP on YPPP.SPPP_RowId = YAN.ANAOP_StatePPP_DR
		WHERE YA.ANA_Date > :YearDate
		GROUP BY YAN.ANAOP_Surgeon_DR, YAN.ANAOP_StatePPP_DR
	) YAN ON (AN.ANAOP_Surgeon_DR=YAN.ANAOP_Surgeon_DR AND AN.ANAOP_StatePPP_DR=YAN.ANAOP_StatePPP_DR)
	
WHERE AN.ANAOP_Surgeon_DR is not Null
  AND A.ANA_Date between :DateFrom and :DateTo
  AND RB.RBOP_PAADM_DR->PAADM_Hospital_DR = :Hospital
GROUP BY  AN.ANAOP_Surgeon_DR,AN.ANAOP_StatePPP_DR,PPP.SPPP_Desc,AN.ANAOP_Surgeon_DR->CTPCP_Desc
ORDER BY  AN.ANAOP_Surgeon_DR,AN.ANAOP_StatePPP_DR
)
 &SQL(OPEN SWARHRTHR1010Cursor)
 
 //FETCH FIRST ROW
 d FetchRow
  
 while END=0 {
  
	 //d FormatDates
  	 //d FormatTimes
  	 
	 s sort = ind		// don't sort - uncomment this line if you've sorted in the query
	 //s sort = $ZCVT(HOSPDesc,"U")_" "_$ZCVT(WARDDesc,"U")_" "_$ZCVT(ROOMCode,"U")_" "_$ZCVT(BEDCode,"U")_" "_$ZCVT(CTRLGDesc,"U")_" "_$ZCVT(PAPERName,"U")_" "_$ZCVT(PAPERName2,"U")_" "_$ZCVT(PAPERName3,"U")_ind
 
	 s ^CacheTemp("TRAK",repid,sort)=$LB(ANAOPSurgeonDR,CTPCPDesc,ANAOPStatePPPDR,SPPPDesc,ProcCount,EmergProcCount,ElectProcCount,PrivateProcCount,PublicProcCount,YProcCount,YEmergProcCount,YElectProcCount,YPrivateProcCount,YPublicProcCount)
	 s ind=ind+1
 
	 //fetch rows
 	 d FetchRow
 }

 &SQL(CLOSE SWARHRTHR1010Cursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK
FetchRow
 &sql(fetch SWARHRTHR1010Cursor INTO :ANAOPSurgeonDR,:CTPCPDesc,:ANAOPStatePPPDR,:SPPPDesc,:ProcCount,:EmergProcCount,:ElectProcCount,:PrivateProcCount,:PublicProcCount,:YProcCount,:YEmergProcCount,:YElectProcCount,:YPrivateProcCount,:YPublicProcCount)
 if SQLCODE '= 0 set END = 1
 q
FormatDates
 //s PAADMAdmDate=..ConvertDateToODBC(PAADMAdmDate)
 q
FormatTimes
 //s PAADMAdmTime=..ConvertTimeToODBC(PAADMAdmTime)
 q
]]></Implementation>
</Method>

<Method name="SWARHRTHR1010Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRTHR1010">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Library.String,DateFrom:%Date,DateTo:%Date</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="ANAOPSurgeonDR:%Library.Integer,CTPCPDesc:%Library.String,ANAOPStatePPPDR:%Library.Integer,SPPPDesc:%Library.String,ProcCount:%Library.Integer,EmergProcCount:%Library.Integer,ElectProcCount:%Library.Integer,PrivateProcCount:%Library.Integer,PublicProcCount:%Library.Integer,YProcCount:%Library.Integer,YEmergProcCount:%Library.Integer,YElectProcCount:%Library.Integer,YPrivateProcCount:%Library.Integer,YPublicProcCount:%Library.Integer"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
