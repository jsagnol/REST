<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRTHR1004">
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRTHR1004.xml#1 $</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
/*
 * Report Name: <SWARHReportName> <br>
 * Report Code: SWARH.R.<SWARHReportCode> <br>
 * SWARH Developer: your name <br>
 */
]]></Content>
</UDLText>

<Method name="SWARHRTHR1004QueryClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRTHR1004QueryExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Library.String,Date:%Date]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind,END

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 /* TEMPLATE MODIFY: Define and initialise appropriate column variables to describe output rowset columns */
 New PAADMADMNo,RBOPTimeOper,AMPM,WARDCode,CTSEXGender,PAPERAgeYr,SPPPDesc,Alert,RBOPDateOper,RBOPDateBook
 New RBOPResourceDR,RESDesc,CTPCPDesc,Anaesthetist,WLProcedureFreeText,RBOPSequenceNo,RBOPEstimatedTime,PAADMAdmTime
 Set (PAADMADMNo,RBOPTimeOper,AMPM,WARDCode,CTSEXGender,PAPERAgeYr,SPPPDesc,Alert,RBOPDateOper,RBOPDateBook)=""
 Set (RBOPResourceDR,RESDesc,CTPCPDesc,CTPCPDesc1,WLProcedureFreeText,RBOPSequenceNo,RBOPEstimatedTime,PAADMAdmTime)=""

 New CurrResourceRESDR, CurrTimeOper, CalcTimeOper, CalcTimeOperFormat, CurrResourceDR
 Set (CurrResourceRESDR, CurrTimeOper, CalcTimeOper, CalcTimeOperFormat, CurrResourceDR) = 0
 
 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()

 s Hospital=$zstrip(Hospital,"*CW")
 //Convert ODBC dates to cache format
 s Date=..ConvertDateToCache(Date)

 &SQL(DECLARE SWARHRTHR1004Cursor CURSOR FOR 
		 SELECT 
				RBOP_PAADM_DR->PAADM_ADMNo, 
				RBOP_TimeOper,
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_Name, 
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_Name2,
				RBOP_PAADM_DR->PAADM_CurrentWard_DR->WARD_Code,
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_Sex_DR->CTSEX_Gender,
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_AgeYr,
				RBOP_StatePPP_DR->SPPP_Desc,
				CASE WHEN COUNT(*) = 0 THEN 'No' ELSE 'Yes' END AS Alert,
				RBOP_DateOper, 
				RBOP_DateBook,
				RBOP_Resource_DR, 
				RBOP_Resource_DR->RES_Desc, 
				(RBOP_Surgeon_DR->CTPCP_FirstName||' '||RBOP_Surgeon_DR->CTPCP_Surname)As CTPCP_Desc,
				(RBOP_Anaesthetist_DR->CTPCP_FirstName||' '||RBOP_Anaesthetist_DR->CTPCP_Surname)As Anaesthetist,
				WL.WL_ProcedureFreeText,
				RBOP_SequenceNo,
				RBOP_EstimatedTime,
				PA.PAADM_AdmTime
		FROM SQLUSER.RB_OperatingRoom
			INNER JOIN SQLUser.PA_Adm PA ON (RBOP_PAADM_DR=PAADM_RowID) 
			LEFT JOIN SQLUser.PA_AlertMsg AM ON (PAADM_PAPMI_DR=ALM_PAPMI_ParRef)
			LEFT JOIN SQLUser.PA_WaitingList WL ON (RB_OperatingRoom.RBOP_Waitlist_DR = WL.WL_RowId)
			
		WHERE RBOP_DateOper = :Date
			AND RBOP_PAADM_DR->PAADM_Hospital_DR = :Hospital
		GROUP BY RBOP_PAADM_DR->PAADM_ADMNo, 
				RBOP_TimeOper, 
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_Name, 
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_Name2, 
				RBOP_PAADM_DR->PAADM_CurrentWard_DR->WARD_Code,
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_Sex_DR->CTSEX_Gender,
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_AgeYr,
				RBOP_DateOper, 
				RBOP_DateBook, 
				RBOP_Resource_DR,
				RBOP_Resource_DR->RES_Desc, 
				RBOP_Surgeon_DR->CTPCP_FirstName,
				RBOP_Surgeon_DR->CTPCP_Surname,
				RBOP_Anaesthetist_DR->CTPCP_FirstName,
				RBOP_Anaesthetist_DR->CTPCP_Surname,
				WL.WL_ProcedureFreeText,
				RBOP_SequenceNo,
				RBOP_EstimatedTime,
				PA.PAADM_AdmTime
		ORDER BY RBOP_Resource_DR, RBOP_TimeOper, RBOP_SequenceNo
		)
		
 &SQL(OPEN SWARHRTHR1004Cursor)
 
 /* TEMPLATE MODIFY: Rename cursor to something moreChange fetch INTO parameter list to match column variable names */
 //FETCH FIRST ROW
 d FetchRow
  
 while END=0 {
  
   	 If (CurrResourceDR '= RBOPResourceDR) {
	 	 Set CurrTimeOper = ""
	 	 Set CurrResourceDR = RBOPResourceDR
 	 }
 	 If (CurrTimeOper '= RBOPTimeOper) {
	 	 Set CalcTimeOper = RBOPTimeOper
	 	 Set CurrTimeOper = RBOPTimeOper
 	 }

	 d FormatDates
  	 d FormatTimes
  	 
	 s sort = ind		// don't sort - uncomment this line if you've sorted in the query
	 //s sort = $ZCVT(HOSPDesc,"U")_" "_$ZCVT(WARDDesc,"U")_" "_$ZCVT(ROOMCode,"U")_" "_$ZCVT(BEDCode,"U")_" "_$ZCVT(CTRLGDesc,"U")_" "_$ZCVT(PAPERName,"U")_" "_$ZCVT(PAPERName2,"U")_" "_$ZCVT(PAPERName3,"U")_ind
 	 Set CalcTimeOperFormat = ..ConvertTimeToODBC(CalcTimeOper)
	 s ^CacheTemp("TRAK",repid,sort)=$LB(PAADMADMNo,RBOPTimeOper,PAPMIName,PAPMIName2,AMPM,WARDCode,CTSEXGender,PAPERAgeYr,SPPPDesc,Alert,RBOPDateOper,RBOPDateBook,RBOPResourceDR,RESDesc,CTPCPDesc,Anaesthetist,WLProcedureFreeText,RBOPSequenceNo,RBOPEstimatedTime,PAADMAdmTime,CalcTimeOperFormat)
	 s ind=ind+1
 
 	 Set CalcTimeOper = CalcTimeOper + (RBOPEstimatedTime * 60)
 	
	 //fetch rows
 	 d FetchRow
 }

 &SQL(CLOSE SWARHRTHR1004Cursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(FETCH SWARHRTHR1004Cursor INTO :PAADMADMNo,:RBOPTimeOper,:PAPMIName,:PAPMIName2,:WARDCode,:CTSEXGender,:PAPERAgeYr,:SPPPDesc,:Alert,:RBOPDateOper,:RBOPDateBook,:RBOPResourceDR,:RESDesc,:CTPCPDesc,:Anaesthetist,:WLProcedureFreeText,:RBOPSequenceNo,:RBOPEstimatedTime,:PAADMAdmTime)
 if SQLCODE '= 0 set END = 1
 q

FormatDates
 /* TEMPLATE MODIFY: Add an entry to perform a date format for all date/time fields here */
 s RBOPDateOper=..ConvertDateToODBC(RBOPDateOper)
 s RBOPDateBook=..ConvertDateToODBC(RBOPDateBook)
 s WLProcedureFreeText = $LISTTOSTRING(WLProcedureFreeText, $CHAR(13)_$CHAR(10))
 q
FormatTimes
 s AMPM = $SELECT(RBOPTimeOper < (12*60*60):"AM",1:"PM")
 s RBOPTimeOper=..ConvertTimeToODBC(RBOPTimeOper)
 s PAADMAdmTime=..ConvertTimeToODBC(PAADMAdmTime)
 q
]]></Implementation>
</Method>

<Method name="SWARHRTHR1004QueryFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/* TEMPLATE MODIFY: Rename Stored Proc query to <MyStoredProcName> 
 * TEMPLATE MODIFY: Change parameters to match desired stored procedure parameters
 * TEMPLATE MODIFY: Change ROWSPEC list to match desired output column names and column data types */
]]></Content>
</UDLText>

<Query name="SWARHRTHR1004Query">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Library.String,Date:%Date</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAADMADMNo:%Library.String,RBOPTimeOper:%Library.String,PAPMIName:%Library.String,PAPMIName2:%Library.String,AMPM:%Library.String,WARDCode:%Library.String,CTSEXGender:%Library.String,PAPERAgeYr:%Library.Integer,SPPPDesc:%Library.String,Alert:%Library.String,RBOPDateOper:%Library.Date,RBOPDateBook:%Library.Date,RBOPResourceDR:%Library.Integer,RESDesc:%Library.String,CTPCPDesc:%Library.String,Anaesthetist:%Library.String,WLProcedureFreeText:%Library.String,RBOPSequenceNo:%Library.Integer,RBOPEstimatedTime:%Library.Integer,PAADMAdmTime:%Library.String,CalcTimeOperFormat:%Library.String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
