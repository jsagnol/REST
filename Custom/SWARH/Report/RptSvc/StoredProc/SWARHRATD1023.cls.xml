<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRATD1023">
<Description>
Class for SWARHRATD1023 Report</Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>62349,58048.563923</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRATD1023.xml#1 $</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
/*
 * Report Name: Current InPatients by GP <br>
 * Report Code: SWARH.R.1023 <br>
 * Modified 27/10/2015 PH: correction to get GP clinic from patient's local doctor history
 */
]]></Content>
</UDLText>

<Method name="SWARHRATD1023Close">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp(..#CACHETEMPSUBSCRIPT,repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRATD1023Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Library.Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp(..#CACHETEMPSUBSCRIPT))
 
 //New Number,String,Date,Time,c,n
 New c,n

 New PatientId,PatientName,PatientName2,PatientName3,UR,WardCode,CurrentBed,Spec,AdmDate,AdmDoctorSurname,LocalGPSurname,LocalGPFirstname,REFDRowId,CLNCode,CLNRowId,CLNCode,CLNDesc,CLNCode1,HospDesc,Group,GroupPFMC
 Set (PatientId,PatientName,PatientName2,PatientName3,UR,WardCode,CurrentBed,Spec,AdmDate,AdmDoctorSurname,LocalGPSurname,LocalGPFirstname,REFDRowId,CLNRowId,CLNCode,CLNDesc,CLNCode1,HospDesc,Group)=""

 s GroupPFMC=10000
 s ind=1

 //Convert ODBC dates to cache format
 

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 &SQL(DECLARE SWARHRATD1023Cursor CURSOR FOR 
 SELECT
 		PAADM_PAPMI_DR,
        PAADM_PAPMI_DR->PAPMI_Name,
        PAADM_PAPMI_DR->PAPMI_Name2,
        PAADM_PAPMI_DR->PAPMI_Name3, 
        PAADM_PAPMI_DR->PAPMI_No,
        PAADM_CurrentWard_DR->WARD_Code,
        PAADM_CurrentBed_DR->BED_Code,
        PAADM_AdmDocCodeDR->CTPCP_Spec_DR->CTSPC_Desc,
        PAADM_AdmDate,
        PAADM_AdmDocCodeDR->CTPCP_Desc,
        FAMD_FamDoc_DR->REFD_Desc,
        FAMD_FamDoc_DR->REFD_Forename,
        FAMD_FamDoc_DR,
        FAMD_RefDocClinc_DR->CLN_Clinic_DR,
        FAMD_RefDocClinc_DR->CLN_Clinic_DR->CLN_Code,
        FAMD_RefDocClinc_DR->CLN_Clinic_DR->CLN_Desc
FROM    SQLUser.PA_Adm
LEFT JOIN SQLUser.PA_FamilyDoctor ON (FAMD_ParRef=PAADM_PAPMI_DR AND FAMD_DateTo is null)
WHERE   PAADM_Hospital_DR = :Hospital
  AND   PAADM_Type='I'
  AND   PAADM_Current = 'Y'
  AND   (PAADM_AdmDate <= CURRENT_DATE)
  AND   (PAADM_VisitStatus = 'A')
  AND   (PAADM_DischgDate IS NULL)
  --AND	(PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_FamilyDoctor_DR IS NOT NULL)
  AND   (FAMD_DateTo is null)
ORDER BY FAMD_FamDoc_DR->REFD_Desc

)
 &SQL(OPEN SWARHRATD1023Cursor)
 
 //FETCH FIRST ROW
 &sql(fetch SWARHRATD1023Cursor INTO :PatientId,:PatientName,:PatientName2,:PatientName3,:UR,:WardCode,:CurrentBed,:Spec,
 :AdmDate,:AdmDoctorSurname,:LocalGPSurname,:LocalGPFirstname,:REFDRowId,:CLNRowId,:CLNCode,:CLNDesc)
  
 while 'SQLCODE{
  
	 d FormatDates
	 d FormatTimes
	 //d GetClinic
  	 s Group=CLNRowId
	 //s sort = ind		// don't sort - uncomment this line if you've sorted in the query
	 s sort = $ZCVT(CLNDesc,"U")_" "_$ZCVT(LocalGPSurname,"U")_ind
 	 If CLNCode="PFMC" {
	 	 s Group=GroupPFMC+REFDRowId
 	 }
 	 
	 s ^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,sort)=$LB(PatientId,PatientName,PatientName2,PatientName3,UR,WardCode,CurrentBed,Spec,AdmDate,AdmDoctorSurname,LocalGPSurname,LocalGPFirstname,REFDRowId,CLNRowId,CLNCode,CLNDesc,Group)
	 s ind=ind+1
 
	 //fetch rows
	 &sql(fetch SWARHRATD1023Cursor INTO :PatientId,:PatientName,:PatientName2,:PatientName3,:UR,:WardCode,:CurrentBed,:Spec,:AdmDate,:AdmDoctorSurname,:LocalGPSurname,:LocalGPFirstname,:REFDRowId,:CLNRowId,:CLNCode,:CLNDesc)
 }

 &SQL(CLOSE SWARHRATD1023Cursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FormatDates
 // Convert the dates to ODBC time format
 If AdmDate Set AdmDate=..ConvertDateToODBC(AdmDate)
 
FormatTimes
 // Convert the times to ODBC time format
 
 /*GetClinic
  &sql(DECLARE CLNCursor CURSOR FOR 
  SELECT clin.CLN_RowId, rdclin.CLN_Code,clin.CLN_Code, clin.CLN_Desc FROM SQLUser.PAC_RefDoctorClinic rdclin left join SQLUser.PAC_Clinic clin on rdclin.CLN_Clinic_DR=clin.CLN_RowId
  where rdclin.CLN_ParRef = :REFDRowId and 
  (rdclin.CLN_DateTo IS NULL OR rdclin.CLN_DateTo > GETDATE()) and 
  (rdclin.CLN_DateFrom IS NULL OR rdclin.CLN_DateFrom <= GETDATE())
 )
 &SQL(OPEN CLNCursor)
 &sql(FETCH CLNCursor INTO :CLNRowId,:CLNCode1,:CLNCode,:CLNDesc)
 &SQL(CLOSE CLNCursor)
 s Group=CLNRowId*/
]]></Implementation>
</Method>

<Method name="SWARHRATD1023Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRATD1023">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Library.Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PatientId:%Integer,PatientName:%String,PatientName2:%String,PatientName3:%String,UR:%String,WardCode:%String,CurrentBed:%String,Spec:%String,AdmDate:%Date,AdmDoctorSurname:%String,LocalGPSurname:%String,LocalGPFirstname:%String,REFDRowId:%Integer,CLNRowId:%String,CLNCode:%String,CLNDesc:%String,Group:%Integer"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
