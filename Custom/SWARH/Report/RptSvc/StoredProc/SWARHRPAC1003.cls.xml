<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRPAC1003">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARHRPAC1003
* Report Description: Service Activity Report
* Menu Caption: Service Activity Report
* Initial release: 
* Developer: Jayson Sagnol
* 
**************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRPAC1003.xml#1 $</Default>
</Parameter>

<Method name="SWARHRPAC1003Close">
<Description>
Location and Revision of this file in Perforce (Auto-updating)
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRPAC1003Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer,DateFrom:%Date,DateTo:%Date]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
		   
 New repid,ind

 Set repid=$I(^CacheTemp("TRAK"))
 
 New CPWDesc,NGODesc,RATECost,OEORIDate
 Set (CPWDesc,NGODesc,RATECost,OEORIDate) = ""
 
 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)
 
 //s CustomKPIFrom ="AdmDate"
 //s CustomKPITo = "DiscghDate"

 &SQL(DECLARE SWARHRPAC1003 CURSOR FOR
 
		SELECT
		        CPW_Pathway_DR->CPW_Desc,
		        OEORI_BrokerageVendor_DR->VEND_NGO_DR->NGO_Desc,
		        OEORI_BrokerageVendorRate_DR->RATE_Cost,
		        OEORI_Date
		FROM SQLUSER.OE_Order, SQLUSER.MR_ClinicalPathways, SQLUSER.OE_OrdItem
		WHERE OEORD_Adm_DR->PAADM_Hospital_DR = :Hospital
				AND OEORI_Date BETWEEN :DateFrom AND :DateTo
		        AND OEORI_ClinPathways_DR = CPW_RowID
		        AND OEORD_RowID = OEORI_OEORD_ParRef
		        AND OEORI_ItemStat_DR->OSTAT_Code IN ('I','V','E')
		        AND OEORI_IsBrokerage='Y'     
		        
    )
                
 &SQL(OPEN SWARHRPAC1003)
 
 d FetchRow //Fetch first row
  
 while END=0 {
	 d FormatDates
  	 s sort = ind
	 s ^CacheTemp("TRAK",repid,sort)=$LB(CPWDesc,NGODesc,RATECost,OEORIDate)
	 s ind=ind+1
 	 d FetchRow //Fetch next row
 }

 &SQL(CLOSE SWARHRPAC1003)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(FETCH SWARHRPAC1003 INTO :CPWDesc,:NGODesc,:RATECost,:OEORIDate)
 if SQLCODE '= 0 set END = 1
 q
 
FormatDates
 s OEORIDate = ..ConvertDateToODBC(OEORIDate) 
 q
]]></Implementation>
</Method>

<Method name="SWARHRPAC1003Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row 
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle 
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRPAC1003">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer,DateFrom:%Date,DateTo:%Date</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="CPWDesc:%String,NGODesc:%String,RATECost:%Double,OEORIDate:%Date"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
