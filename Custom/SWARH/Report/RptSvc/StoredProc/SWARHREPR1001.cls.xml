<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHREPR1001">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARHREPR1001
* Report Description: ED Alcohol Project
* Menu Caption: ED Alcohol Project
* Initial release: 1
* Developer: Tim
* Modified: 23rd October 2013
* 
**************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.RptSvc.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHREPR1001.xml#1 $</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Parameter SrcVer = "$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHREPR1001.xml#1 $";

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/*

 */
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/*
 * Report Name: <SWARHReportName> <br>
 * Report Code: SWARH.R.<SWARHReportCode> <br>
 * SWARH Developer: your name <br>
 */
]]></Content>
</UDLText>

<Method name="SWARHREPR1001Close">
<Description>
Location and Revision of this file in Perforce (Auto-updating)
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHREPR1001Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Library.Integer,DateFrom:%Date,DateTo:%Date]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 New PAPMIDOB, AgeYr, CTSEXDesc, PAADMAdmDate, PAADMAdmTime, PAADMDischgDate, PAADMDischgTime, MRADMInjuryDesc, INJUDesc, HUMINTDesc
 New PLINJDesc, CTACUDesc, QAlc12Hrs, QQtyStdDrinks, QWherePurch, QOthDet, QWhereCons, PAADMDifDate, PAADMDifTime, LOS, ICD10CodeList, MRADMRowId
 Set (AgeYr) = 0
 Set (PAPMIDOB, CTSEXDesc, PAADMAdmDate, PAADMAdmTime, PAADMDischgDate, PAADMDischgTime, MRADMInjuryDesc, INJUDesc, HUMINTDesc)=""
 Set (PLINJDesc, CTACUDesc, QAlc12Hrs, QQtyStdDrinks, QWherePurch, QOthDet, QWhereCons, PAADMDifDate, PAADMDifTime, LOS, ICD10CodeList, MRADMRowId)=""


 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 // * NOTE: DO NOT DO "*W" ZSTRIP FROM DATES AS IT REMOVES THE WHITESPACE BETWEEN THE DATE AND TIME AND THIS BREAKS THE QUERY! */
 //Convert ODBC dates to cache format
 s DateFrom=..ConvertDateToCache(DateFrom)
 s DateTo=..ConvertDateToCache(DateTo)
 

 &SQL(DECLARE SWARHREPR1001Cursor CURSOR FOR 
	SELECT
	      QUESPAAdmDR->PAADM_PAPMI_DR->PAPMI_DOB
	    , QUESPAAdmDR->PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_Sex_DR->CTSEX_Desc
	    , QUESPAAdmDR->PAADM_AdmDate
	    , QUESPAAdmDR->PAADM_AdmTime
	    , QUESPAAdmDR->PAADM_DischgDate
    	, QUESPAAdmDR->PAADM_DischgTime
    	, QUESPAAdmDR->PAADM_MainMRADM_DR->MRADM_RowId
	    , QUESPAAdmDR->PAADM_MainMRADM_DR->MRADM_InjuryDesc
	    , QUESPAAdmDR->PAADM_CauseInj_DR->INJU_Desc
	    , QUESPAAdmDR->PAADM_HumanIntent_DR->HUMINT_Desc
	    , QUESPAAdmDR->PAADM_PlaceOfInj_DR->PLINJ_Desc
	    , QUESPAAdmDR->PAADM_Priority_DR->CTACU_Desc
	    , QAlc12Hrs
	    , QQtyStdDrinks
	    , QWherePurch
	    , QOthDet
	    , QWhereCons
	FROM
	    Sqluser.questionnaire.QEDALCOHOL
	WHERE QUESPAAdmDR->PAADM_AdmDate BETWEEN :DateFrom AND :DateTo
)
 &SQL(OPEN SWARHREPR1001Cursor)
 
 //FETCH FIRST ROW
 d FetchRow
 
  
 while END=0 {
  
	 d FormatDates
  	 d FormatTimes
  	 
  	 s QAlc12Hrs = ##class(questionnaire.QEDALCOHOL).QAlc12HrsLogicalToDisplay(QAlc12Hrs)
  	 s QWherePurch = ##class(questionnaire.QEDALCOHOL).QWherePurchLogicalToDisplay(QWherePurch)
  	 
  	 Set ICD10CodeList = ..GetICD10DetailsList(MRADMRowId)
  	 
	 s sort = ind		// don't sort - uncomment this line if you've sorted in the query
 
	 s ^CacheTemp("TRAK",repid,sort)=$LB(AgeYr, CTSEXDesc, PAADMAdmDate, PAADMAdmTime, PAADMDischgDate, PAADMDischgTime, LOS, ICD10CodeList, MRADMInjuryDesc, INJUDesc, HUMINTDesc, PLINJDesc, CTACUDesc, QAlc12Hrs, QQtyStdDrinks, QWherePurch, QOthDet, QWhereCons)
	 s ind=ind+1
 
	 //fetch rows
	 d FetchRow
	 
	 s LOS=..CalcLOSDaysHours(PAADMAdmDate, PAADMAdmTime, PAADMDischgDate, PAADMDischgTime)

 }

 &SQL(CLOSE SWARHREPR1001Cursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK
 

FetchRow
 &sql(FETCH SWARHREPR1001Cursor INTO :PAPMIDOB, :CTSEXDesc, :PAADMAdmDate, :PAADMAdmTime, :PAADMDischgDate, :PAADMDischgTime, :MRADMRowId, :MRADMInjuryDesc, :INJUDesc, :HUMINTDesc, :PLINJDesc, :CTACUDesc, :QAlc12Hrs, :QQtyStdDrinks, :QWherePurch, :QOthDet, :QWhereCons)
 if SQLCODE '= 0 set END = 1
 q
 
FormatDates
 s AgeYr =..CalculateAgeYr(PAPMIDOB, PAADMAdmDate)
 s PAADMAdmDate=..ConvertDateToODBC(PAADMAdmDate)
 s PAADMDischgDate=..ConvertDateToODBC(PAADMDischgDate)
 q
 
FormatTimes
 s PAADMAdmTime=..ConvertTimeToODBC(PAADMAdmTime)
 s PAADMDischgTime=..ConvertTimeToODBC(PAADMDischgTime)
 
 q
]]></Implementation>
</Method>

<Method name="SWARHREPR1001Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHREPR1001">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Library.Integer,DateFrom:%Date,DateTo:%Date</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="AgeYr:%Library.Integer,CTSEXDesc:%Library.String,PAADMAdmDate:%Library.Date,PAADMAdmTime:%Library.Time,PAADMDischgDate:%Library.Date,PAADMDischgTime:%Library.Time,LOS:%Library.String,ICD10CodeList:%String,MRADMInjuryDesc:%Library.String,INJUDesc:%Library.String,HUMINTDesc:%Library.String,PLINJDesc:%Library.String,CTACUDesc:%Library.String,QAlc12Hrs:%Library.String(MAXLEN=255),QQtyStdDrinks:%Library.String,QWherePurch:%Library.String,QOthDet:%Library.String,QWhereCons:%Library.String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
