<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRATD1036">
<Description>
Class for SWARHRATD1036</Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRATD1036.xml#1 $</Default>
</Parameter>

<Method name="SWARHRATD1036Close">
<Description>
Location and Revision of this file in Perforce (Auto-updating)
Parameter SrcVer = "$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRATD1036.xml#1 $";
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRATD1036Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer,DateE:%Date]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 k ^zbernard	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 New AdmRowID,EpisodeNO,AdmType,AdmDate,DchDate,HospDR,HospDesc,LocCode,LocDesc,LOS,AdmStart,AdmDuring,DchDuring,Deceased,WaitList,PAPMIDR,
 DchCode,SameDayStay
 s (AdmRowID,HospDR,LOS,PAPMIDR,Deceased,DchDuring,AdmStart,AdmDuring,WaitList,SameDayStay)=0
 s (EpisodeNO,AdmType,AdmDate,DchDate,HospDesc,LocCode,LocDesc,DchCode)="" 
 
 s ind=1

 //Convert ODBC dates to cache format
 s StartDate=$$intdate^SSUTIL4(DateE)
 s EndDate=$$intdate^SSUTIL4(DateE)
 
 &sql(Select LAST_DAY(:EndDate) INTO :LastDayOfMth)
 &sql(Select Datepart("DD",:LastDayOfMth) INTO :DaysInMth)
 If LastDayOfMth Set LastDayOfMth=$ZD(LastDayOfMth,3)
 
 &sql(Select Datepart("YY",:StartDate) INTO :SDateYY)
 &sql(Select Datepart("MM",:StartDate) INTO :SDateMM)
 
 s FirstDayOfMth = SDateYY_"-"_SDateMM_"-"_"01"
 s StartDate=$$intdate^SSUTIL4(FirstDayOfMth)
 If FirstDayOfMth Set FirstDayOfMth=$ZD(StartDate,3)
 
 //s ^bernard("2")=(2)
 
 &sql(DECLARE SWARHRATD1036 CURSOR FOR
 	SELECT 
  		ADM.PAADM_RowID AS AdmRowID,
  		ADM.PAADM_ADMNo AS EpisodeNO,
 		ADM.PAADM_Type AS AdmType,
    	ADM.PAADM_AdmDate AS AdmDate,
    	ADM.PAADM_DischgDate AS DchDate,
    	ADM.PAADM_Hospital_DR AS HospDR,
    	ADM.PAADM_Hospital_DR->HOSP_Desc AS HospDesc,
    	ADM.PAADM_DepCode_DR->CTLoc_Code AS LocCode,
    	ADM.PAADM_DepCode_DR->CTLoc_Desc AS LocDesc,
    	CASE WHEN ADM.PAADM_DischgDate IS NULL THEN datediff("d",ADM.PAADM_AdmDate,LAST_DAY(:EndDate)) 
    		ELSE (CASE WHEN ADM.PAADM_DischgDate > LAST_DAY(:EndDate) THEN datediff("d",ADM.PAADM_AdmDate,LAST_DAY(:EndDate))
    		ELSE datediff("d",ADM.PAADM_AdmDate,ADM.PAADM_DischgDate) END) END as LOS,
    	CASE WHEN ADM.PAADM_AdmDate < :StartDate THEN 1 ELSE 0 END AS AdmStart,
		CASE WHEN ADM.PAADM_AdmDate >= :StartDate THEN 1 ELSE 0 END AS AdmDuring,
		CASE WHEN ADM.PAADM_DischgDate IS NULL THEN 0 
			ELSE (CASE WHEN ADM.PAADM_DischgDate <= LAST_DAY(:EndDate) THEN 1 ELSE 0 END) END AS DchDuring,
		CASE WHEN ADM.PAADM_PAPMI_DR->PAPMI_Deceased_Date IS NULL THEN 0
			ELSE (CASE WHEN ADM.PAADM_PAPMI_DR->PAPMI_Deceased_Date BETWEEN :StartDate AND LAST_DAY(:EndDate) THEN 1 ELSE 0 END) END AS Deceased,
		CASE WHEN PAADM_WaitList_DR IS NULL THEN 0 ELSE 1 END AS WaitList,
		ADM.PAADM_PAPMI_DR AS PAPMIDR,
		PAADM_MainMRADM_DR->MRADM_DischType_DR->CTDSP_Code AS DchCode,
		CASE WHEN ADM.PAADM_AdmDate =  ADM.PAADM_DischgDate THEN 1 ELSE 0 END SameDayStay
 		 			
    FROM SQLUser.PA_Adm ADM 
        
	WHERE ADM.PAADM_Hospital_DR = :Hospital
 		AND (ADM.PAADM_Type = 'I')
 		AND (ADM.PAADM_ADMNo NOT LIKE 'ED%')
 		AND (ADM.PAADM_ADMNo IS NOT NULL)
 		AND (ADM.PAADM_VisitStatus = 'A')
 		AND (ADM.PAADM_AdmDate <= LAST_DAY(:EndDate))
 		AND (ADM.PAADM_DischgDate IS NULL)
 		
 	UNION
 	
  	SELECT
  		ADM.PAADM_RowID AS AdmRowID,
   		ADM.PAADM_ADMNo AS EpisodeNO,
    	ADM.PAADM_Type AS AdmType,
    	ADM.PAADM_AdmDate AS AdmDate,
    	ADM.PAADM_DischgDate AS DchDate,
    	ADM.PAADM_Hospital_DR AS HospDR,
    	ADM.PAADM_Hospital_DR->HOSP_Desc AS HospDesc,
    	ADM.PAADM_DepCode_DR->CTLoc_Code AS LocCode,
    	ADM.PAADM_DepCode_DR->CTLoc_Desc As LocDesc,
    	CASE WHEN ADM.PAADM_DischgDate IS NULL THEN datediff("d",ADM.PAADM_AdmDate,LAST_DAY(:EndDate)) 
    		ELSE (CASE WHEN ADM.PAADM_DischgDate > LAST_DAY(:EndDate) THEN datediff("d",ADM.PAADM_AdmDate,LAST_DAY(:EndDate))
    		ELSE datediff("d",ADM.PAADM_AdmDate,ADM.PAADM_DischgDate) END) END as LOS,
    	CASE WHEN ADM.PAADM_AdmDate < :StartDate THEN 1 ELSE 0 END AS AdmStart,
		CASE WHEN ADM.PAADM_AdmDate >= :StartDate THEN 1 ELSE 0 END AS AdmDuring,
		CASE WHEN ADM.PAADM_DischgDate IS NULL THEN 0 
			ELSE (CASE WHEN ADM.PAADM_DischgDate <= LAST_DAY(:EndDate) THEN 1 ELSE 0 END) END AS DchDuring,
		CASE WHEN ADM.PAADM_PAPMI_DR->PAPMI_Deceased_Date IS NULL THEN 0
			ELSE (CASE WHEN ADM.PAADM_PAPMI_DR->PAPMI_Deceased_Date BETWEEN :StartDate AND LAST_DAY(:EndDate) THEN 1 ELSE 0 END) END AS Deceased,
		CASE WHEN PAADM_WaitList_DR IS NULL THEN 0 ELSE 1 END AS WaitList,
		ADM.PAADM_PAPMI_DR AS PAPMIDR,
		PAADM_MainMRADM_DR->MRADM_DischType_DR->CTDSP_Code AS DchCode,
		CASE WHEN ADM.PAADM_AdmDate =  ADM.PAADM_DischgDate THEN 1 ELSE 0 END SameDayStay
			    
    FROM SQLUser.PA_Adm ADM 
    
    WHERE ADM.PAADM_Hospital_DR = :Hospital
        AND (ADM.PAADM_Type = 'I')
        AND (ADM.PAADM_ADMNo NOT LIKE 'ED%')
        AND (ADM.PAADM_ADMNo IS NOT NULL)
        AND (ADM.PAADM_VisitStatus = 'D')
        AND (ADM.PAADM_AdmDate <= LAST_DAY(:EndDate))
        AND (ADM.PAADM_DischgDate >= :StartDate) 
 ORDER BY 17
 )
 s SDate = StartDate
 s EDate = EndDate
 
 &sql(open SWARHRATD1036)
 
  //fetch first row 
 &sql(fetch SWARHRATD1036 into :AdmRowID,:EpisodeNO,:AdmType,:AdmDate,:DchDate,:HospDR,:HospDesc,:LocCode,:LocDesc,:LOS,
 :AdmStart,:AdmDuring,:DchDuring,:Deceased,:WaitList,:PAPMIDR,:DchCode,:SameDayStay)
 
 s TotalBeds =..GetBedCount(HospDR,StartDate,EndDate)
  
 while 'SQLCODE{
  
 s (DeceasedEpisode,DchDuringLOS,OneToThreeMths,ThreeToSixMths,OverSixMths,LOS2) = 0
 
 //Removes Bed Days prior to report period startdate from LOS.
 If (AdmStart = 1) {Set LOS2 = LOS - ((+StartDate) - (+AdmDate))} Else {Set LOS2 = LOS}
  
 If ((Deceased = 1) && (DchCode = "D")) {Set DeceasedEpisode = 1} Else {Set DeceasedEpisode = 0}
 
 If ((DchDuring = 1) && (LOS > 0)) {Set DchDuringLOS = LOS} ElseIf ((DchDuring = 1) && (LOS = 0)) {Set DchDuringLOS = 1} Else {Set DchDuringLOS = 0}
  
 If ((LOS >= 30) && (LOS < 90)) {Set OneToThreeMths = 1} Else {Set OneToThreeMths = 0}
 
 If ((LOS >= 90) && (LOS < 180)) {Set ThreeToSixMths = 1} Else {Set ThreeToSixMths = 0}

 If (LOS > 180) {Set OverSixMths = 1} Else {Set OverSixMths = 0}
  
 d FormatDates
 //d FormatTimes
 
 // Calls Custom.SWARH.StoredProc.Abstract ClassMethod GetAdmWardForEpisode. Returns Admin Ward Code for Episode.
 s AdmWard =..GetAdmWardForEpisode(AdmRowID)

 // Calls Custom.SWARH.StoredProc.Abstract ClassMethod GetPrimaryInsPayorGroupForEpisode. Returns Finicial Code for Episode.
 s FinCode =..GetPrimaryInsPayorGroupForEpisode(AdmRowID)
 If (FinCode = "PUB"){Set Type = "A"} ElseIf (FinCode = "PRI"){Set Type = "B"} Else {Set Type = "C"}
 
 
 //Calls Custom.SWARH.StoredProc.Abstract ClassMethod GetAdmSpecForEpisode. Returns RowID for Episode
 s SpecialtyRowID =..GetAdmSpecForEpisode(AdmRowID)
 &sql(SELECT CTLOC_RespUnit_DR->RU_Code, CTLOC_RespUnit_DR->RU_Desc INTO :RUCode, :RUDesc FROM SQLUser.CT_Loc Where CTLOC_RowID = :SpecialtyRowID)
  
 // build the row
 Set ^CacheTemp(repid,ind)=$LB(AdmRowID,EpisodeNO,AdmType,AdmDate,DchDate,HospDR,HospDesc,LocCode,LocDesc,LOS,AdmStart,AdmDuring,
 DchDuring,Deceased,WaitList,PAPMIDR,DchCode,SameDayStay,
 DeceasedEpisode,AdmWard,FinCode,Type,SpecialtyRowID,RUCode,RUDesc,LastDayOfMth,FirstDayOfMth,DaysInMth,TotalBeds,DchDuringLOS,
 OneToThreeMths,ThreeToSixMths,OverSixMths,LOS2,
 )
 
 s ind=ind+1
 
 //fetch rows
 &sql(fetch SWARHRATD1036 into :AdmRowID,:EpisodeNO,:AdmType,:AdmDate,:DchDate,:HospDR,:HospDesc,:LocCode,:LocDesc,:LOS,
 :AdmStart,:AdmDuring,:DchDuring,:Deceased,:WaitList,:PAPMIDR,:DchCode,:SameDayStay)
 
 }

 //s ^zBernard("3")=(3)
 &sql(close SWARHRATD1036)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 //s ^zBernard("4")=(4)

 Quit $$$OK

FormatDates
 // Convert the dates to ODBC date format
 If AdmDate Set AdmDate=$ZD(AdmDate,3)
 If DchDate Set DchDate=$ZD(DchDate,3)
 //If DeceasedDate Set DeceasedDate=$ZD(DeceasedDate,3)
 Quit

FormatTimes
 // Convert the times to ODBC time format
 If PAADMAdmTime Set PAADMAdmTime=$ZT(PAADMAdmTime,1)
 If PAADMDischgTime Set PAADMDischgTime=$ZT(PAADMDischgTime,1)
 Quit
]]></Implementation>
</Method>

<Method name="SWARHRATD1036Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)

 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRATD1036">
<Description>
GHA List reports Stored Procedure
It expects 2 parameter of type date and will return a list of records:
Field1 - :%Integer
Field2 - :%String(MAXLEN=255)
Field3 - :%Date
Field4 - :%Time 																										</Description>
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer,DateE:%Date</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="AdmRowID:%Integer,EpisodeNO:%String(MAXLEN=255),AdmType:%String(MAXLEN=255),AdmDate:%Date,DchDate:%Date,HospDR:%Integer,HospDesc:%String(MAXLEN=255),LocCode:%String(MAXLEN=255),LocDesc:%String(MAXLEN=255),LOS:%Integer,AdmStart:%Integer,AdmDuring:%Integer,DchDuring:%Integer,Deceased:%Integer,WaitList:%Integer,PAPMIDR:%Integer,DchCode:%String,SameDayStay:%Integer,DeceasedEpisode:%Integer,AdmWard:%String(MAXLEN=255),FinCode:%String(MAXLEN=255),Type:%String(MAXLEN=255),SpecialtyRowID:%String(MAXLEN=255),RUCode:%String(MAXLEN=255),RUDesc:%String(MAXLEN=255),LastDayOfMth:%Date,FirstDayOfMth:%Date,DaysInMth:%Integer,TotalBeds:%Integer,DchDuringLOS:%Integer,OneToThreeMths:%Integer,ThreeToSixMths:%Integer,OverSixMths:%Integer,LOS2:%Integer"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
