<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRATD1027">
<Description>
Class for SWARHRATD1027  ICD List</Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRATD1027.xml#1 $</Default>
</Parameter>

<Method name="SWARHRATD1027Close">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRATD1027Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer,DateFrom:%Date,DateTo:%Date,RecType:%String,DSCode:%String,DECode:%String,PSCode:%String,PECode:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
  
 k ^zbernard  
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 New PAADMRowID,AdmDoc,LocDoc,Deceased,DisCode,MRADMRowID,PAPMINo,PAADMADMNo,PAPMIName,PAPMIName2,PAPMIName3,Sex,DOB,AgeDay,AgeMth,AgeYr,
 PAADMType,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,PAADMHospitalDR,HOSPDesc
 s (PAADMRowID,MRADMRowID,PAADMHospitalDR)=0
 s (AdmDoc,LocDoc,Deceased,DisCode,PAPMINo,PAADMADMNo,PAPMIName,PAPMIName2,PAPMIName3,Sex,DOB,AgeDay,AgeMth,AgeYr,
 PAADMType,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,HOSPDesc)="" 
  
 s ind=1

 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)
 
 //s ^bernard("2")=(2)
 
 If (RecType = "D") //Diagnosis
 {
  &sql(declare SWARHRATD1027D cursor for
  SELECT DISTINCT
    PAADM_RowID,
    {fn UCASE(PAADM_AdmDocCodeDR->CTPCP_Desc)} As AdmDoc,
    {fn UCASE(PAPMI_PAPER_DR->PAPER_FamilyDoctor_DR->REFD_Desc)} As LocDoc,
    PAPMI_PAPER_DR->PAPER_Deceased AS Deceased,
    PAADM_MainMRADM_DR->MRADM_DischType_DR->CTDSP_Code as DisCode,
    MRADM.MRADM_RowId AS MRADMRowID,
      PAPMI_No,
    PAADM_ADMNo,
    {fn UCASE(%EXACT(PAPMI_Name))},
    UCASE(PAPMI_Name2),
    UCASE(PAPMI_Name3),
    PAPMI_Sex_DR->CTSEX_Code As Sex,
    PAPMI_DOB As DOB,
    --PAPMI_PAPER_DR->PAPER_AgeDay As AgeDay,
      --PAPMI_PAPER_DR->PAPER_AgeMth As AgeMth,
      --PAPMI_PAPER_DR->PAPER_AgeYr As AgeYr,
      PAADm_Type,
      PAADM_AdmDate,
      PAADM_AdmTime,
      PAADM_DischgDate,
      PAADM_DischgTime,
      PAADM_Hospital_DR,
      PAADM_Hospital_DR->HOSP_Desc
      
  FROM SQLUser.PA_Adm A
    INNER JOIN SQLUser.MR_Adm MRADM ON A.PAADM_MainMRADM_DR = MRADM.MRADM_RowId
        LEFT OUTER JOIN SQLUser.PA_PatMas B ON A.PAADM_PAPMI_DR = B.PAPMI_RowId
    LEFT OUTER JOIN SQLUser.MR_Diagnos C ON A.PAADM_MainMRADM_DR = C.MRDIA_MRADM_ParRef
  
  WHERE
    PAADM_Hospital_DR = :Hospital
    AND PAADM_Type='I' -- Inpatient Episodes ONLY
    AND PAADM_DischgDate  BETWEEN :DateFrom AND :DateTo
    AND MRDIA_ICDCode_DR->MRCID_Code <> ''
    AND (MRDIA_ICDCode_DR->MRCID_Code BETWEEN :DSCode AND :DECode OR (:DSCode IS NULL))
  )
 }
  
  If (RecType = "P") //Procedure
 {
  &sql(declare SWARHRATD1027P cursor for
  SELECT DISTINCT
    PAADM_RowID,
    {fn UCASE(PAADM_AdmDocCodeDR->CTPCP_Desc)} As AdmDoc,
    {fn UCASE(PAPMI_PAPER_DR->PAPER_FamilyDoctor_DR->REFD_Desc)} As LocDoc,
    PAPMI_PAPER_DR->PAPER_Deceased AS Deceased,
    PAADM_MainMRADM_DR->MRADM_DischType_DR->CTDSP_Code as DisCode,
    MRADM.MRADM_RowId AS MRADMRowID,
      PAPMI_No,
    PAADM_ADMNo,
    {fn UCASE(%EXACT(PAPMI_Name))},
    UCASE(PAPMI_Name2),
    UCASE(PAPMI_Name3),
    PAPMI_Sex_DR->CTSEX_Code As Sex,
    PAPMI_DOB As DOB,
    --PAPMI_PAPER_DR->PAPER_AgeDay As AgeDay,
      --PAPMI_PAPER_DR->PAPER_AgeMth As AgeMth,
      --PAPMI_PAPER_DR->PAPER_AgeYr As AgeYr,
      PAADm_Type,
      PAADM_AdmDate,
      PAADM_AdmTime,
      PAADM_DischgDate,
      PAADM_DischgTime,
      PAADM_Hospital_DR,
      PAADM_Hospital_DR->HOSP_Desc
      
  FROM SQLUser.PA_Adm A
    INNER JOIN SQLUser.MR_Adm MRADM ON A.PAADM_MainMRADM_DR = MRADM.MRADM_RowId
        LEFT OUTER JOIN SQLUser.PA_PatMas B ON A.PAADM_PAPMI_DR = B.PAPMI_RowId
    LEFT OUTER JOIN SQLUser.MR_Diagnos C ON A.PAADM_MainMRADM_DR = C.MRDIA_MRADM_ParRef
    LEFT OUTER JOIN SQLUser.MR_Procedures P ON  P.PROC_ParRef = MRADM.MRADM_RowId
  
  WHERE
    PAADM_Hospital_DR = :Hospital
    AND PAADM_Type='I' -- Inpatient Episodes ONLY
    AND PAADM_DischgDate  BETWEEN :DateFrom AND :DateTo
    AND PROC_Operation_DR->OPER_Code <> ''
    AND (PROC_Operation_DR->OPER_Code BETWEEN :PSCode AND :PECode OR (:PSCode IS NULL))
  )
 }
 
 If (RecType = "D") //Diagnosis
 {
  &sql(open SWARHRATD1027D)
 
    //fetch first row
  &sql(fetch SWARHRATD1027D into :PAADMRowID,:AdmDoc,:LocDoc,:Deceased,:DisCode,:MRADMRowID,:PAPMINo,:PAADMADMNo,
  :PAPMIName,:PAPMIName2,:PAPMIName3,:Sex,:DOB, --:AgeDay,:AgeMth,:AgeYr,
  :PAADMType,:PAADMAdmDate,:PAADMAdmTime,:PAADMDischgDate,:PAADMDischgTime,:PAADMHospitalDR,:HOSPDesc)
 

  while 'SQLCODE{
 
  d FormatDates
  d FormatTimes
  
  new calcAge
  set calcAge = $$CalAge^at182($ZDATEH(DOB, 3), $ZDATEH(PAADMAdmDate, 3))
  set AgeDay=$P(calcAge,"|",14)
  set AgeMth=$P(calcAge,"|",13)
  set AgeYr=$P(calcAge,"|",12)
 
  //Calls Custom.SWARH.StoredProc.Abstract ClassMethod GetICD10DetailsList. Returns Diagnosis details for Episode.
  s ICDDetailsList =..GetICD10DetailsList(MRADMRowID) 
 
  //Calls Custom.SWARH.StoredProc.Abstract ClassMethod GetProcDetailsList. Returns Procedure details for Episode.
  s ProcDetailsList =..GetProcDetailsList(MRADMRowID)
 
  //Calls Custom.SWARH.StoredProc.Abstract ClassMethod GetLOSForEpisode. Returns calculated length of stay for Episode.
  s LOS = ..GetLOSForEpisode(PAADMRowID)

  // build the row
  Set ^CacheTemp(repid,ind)=$LB(PAADMRowID,AdmDoc,LocDoc,Deceased,DisCode,MRADMRowID,PAPMINo,PAADMADMNo,PAPMIName,PAPMIName2,PAPMIName3,Sex,DOB,AgeDay,AgeMth,AgeYr,PAADMType,PAADMAdmDate,PAADMAdmTime,
  PAADMDischgDate,PAADMDischgTime,PAADMHospitalDR,HOSPDesc,ICDDetailsList,ProcDetailsList,LOS)
  s ind=ind+1
  //fetch rows
  &sql(fetch SWARHRATD1027D into :PAADMRowID,:AdmDoc,:LocDoc,:Deceased,:DisCode,:MRADMRowID,:PAPMINo,:PAADMADMNo,:PAPMIName,:PAPMIName2,:PAPMIName3,:Sex,:DOB,
  --:AgeDay,:AgeMth,:AgeYr,
  :PAADMType,:PAADMAdmDate,
  :PAADMAdmTime,:PAADMDischgDate,:PAADMDischgTime,:PAADMHospitalDR,:HOSPDesc)
  }
  &sql(close SWARHRATD1027D)
 }
 
 If (RecType = "P") //Procedure
 {
  &sql(open SWARHRATD1027P)
 
    //fetch first row
  &sql(fetch SWARHRATD1027P into :PAADMRowID,:AdmDoc,:LocDoc,:Deceased,:DisCode,:MRADMRowID,:PAPMINo,:PAADMADMNo,:PAPMIName,:PAPMIName2,:PAPMIName3,:Sex,:DOB,
  --:AgeDay,:AgeMth,:AgeYr,
  :PAADMType,:PAADMAdmDate,
  :PAADMAdmTime,:PAADMDischgDate,:PAADMDischgTime,:PAADMHospitalDR,:HOSPDesc)
 

  while 'SQLCODE{
 
  d FormatDates
  d FormatTimes
  
  new calcAge
  set calcAge = $$CalAge^at182($ZDATEH(DOB, 3), $ZDATEH(PAADMAdmDate, 3))
  set AgeDay=$P(calcAge,"|",14)
  set AgeMth=$P(calcAge,"|",13)
  set AgeYr=$P(calcAge,"|",12)
 
  //Calls Custom.SWARH.StoredProc.Abstract ClassMethod GetICD10DetailsList. Returns Diagnosis details for Episode.
  s ICDDetailsList =..GetICD10DetailsList(MRADMRowID) 
 
  //Calls Custom.SWARH.StoredProc.Abstract ClassMethod GetProcDetailsList. Returns Procedure details for Episode.
  s ProcDetailsList =..GetProcDetailsList(MRADMRowID)
 
  //Calls Custom.SWARH.StoredProc.Abstract ClassMethod GetLOSForEpisode. Returns calculated length of stay for Episode.
  s LOS = ..GetLOSForEpisode(PAADMRowID)

  // build the row
  Set ^CacheTemp(repid,ind)=$LB(PAADMRowID,AdmDoc,LocDoc,Deceased,DisCode,MRADMRowID,PAPMINo,PAADMADMNo,PAPMIName,PAPMIName2,PAPMIName3,Sex,DOB,AgeDay,AgeMth,AgeYr,PAADMType,PAADMAdmDate,PAADMAdmTime,
  PAADMDischgDate,PAADMDischgTime,PAADMHospitalDR,HOSPDesc,ICDDetailsList,ProcDetailsList,LOS)
  s ind=ind+1
  //fetch rows
  &sql(fetch SWARHRATD1027P into :PAADMRowID,:AdmDoc,:LocDoc,:Deceased,:DisCode,:MRADMRowID,:PAPMINo,:PAADMADMNo,:PAPMIName,:PAPMIName2,:PAPMIName3,:Sex,:DOB,
  --:AgeDay,:AgeMth,:AgeYr,
  :PAADMType,:PAADMAdmDate,
  :PAADMAdmTime,:PAADMDischgDate,:PAADMDischgTime,:PAADMHospitalDR,:HOSPDesc)
  }
  &sql(close SWARHRATD1027P)
 }

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 //s ^zBernard("4")=(4)

 Quit $$$OK


FormatDates
 // Convert the dates to ODBC date format
 If DOB Set DOB=$ZD(DOB,3)
 If PAADMAdmDate Set PAADMAdmDate=$ZD(PAADMAdmDate,3)
 If PAADMDischgDate Set PAADMDischgDate=$ZD(PAADMDischgDate,3)
 Quit

FormatTimes
 // Convert the times to ODBC time format
 If PAADMAdmTime Set PAADMAdmTime=$ZT(PAADMAdmTime,1)
 If PAADMDischgTime Set PAADMDischgTime=$ZT(PAADMDischgTime,1)
 Quit
]]></Implementation>
</Method>

<Method name="SWARHRATD1027Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {  // if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {  // fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)

 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRATD1027">
<Description>
GHA List reports Stored Procedure
It expects 2 parameter of type date and will return a list of records:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time                                                     </Description>
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer,DateFrom:%Date,DateTo:%Date,RecType:%String,DSCode:%String,DECode:%String,PSCode:%String,PECode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAADMRowID:%Integer,AdmDoc:%String(MAXLEN=255),LocDoc:%String(MAXLEN=255),Deceased:%String(MAXLEN=255),DisCode:%String(MAXLEN=255),MRADMRowID:%Integer,PAPMINo:%String(MAXLEN=255),PAADMADMNo:%String(MAXLEN=255),PAPMIName:%String(MAXLEN=255),PAPMIName2:%String(MAXLEN=255),PAPMIName3:%String(MAXLEN=255),Sex:%String(MAXLEN=1),DOB:%Date,AgeDay:%String(MAXLEN=255),AgeMth:%String(MAXLEN=255),AgeYr:%String(MAXLEN=255),PAADMType:%String(MAXLEN=255),PAADMAdmDate:%Date,PAADMAdmTime:%Time,PAADMDischgDate:%Date,PAADMDischgTime:%Time,PAADMHospitalDR:%Integer,HOSPDesc:%String(MAXLEN=255),ICDDetailsList:%String(MAXLEN=255),ProcDetailsList:%String(MAXLEN=255),LOS:%Integer"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
