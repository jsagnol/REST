<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRPATHEADER">
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.RptSvc.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRPATHEADER.xml#1 $</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
/*
 * Report Name: Clinical Notes <br>
 * Report Code: SWARH.R.EPR1003 <br>
 * SWARH Developer: Tim Beilby <br>
 */
]]></Content>
</UDLText>

<Method name="SWARHRPATHEADERClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRPATHEADERExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,PatientID:%Library.String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 New RHPAPMINo, RHPAPMIName, RHPAPMIName2, RHPAPMIDOB

 Set (RHPAPMINo, RHPAPMIName, RHPAPMIName2, RHPAPMIDOB) = ""

 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 s PatientID=$zstrip(PatientID,"*CW")
 
 &SQL(DECLARE MyReportCursor CURSOR FOR 
 SELECT
  	PAPMI_No,
   	PAPMI_Name,
   	PAPMI_Name2,
   	PAPMI_DOB
 FROM
 		SQLUser.PA_PatMas
 WHERE
 		PAPMI_No = :PatientID

	)
 &SQL(OPEN MyReportCursor)
 
 //FETCH FIRST ROW
 d FetchRow
  
 while END=0 {
  
  	 d FormatDates
  	  	 
	 s sort = ind		// don't sort - uncomment this line if you've sorted in the query
 
	 s ^CacheTemp("TRAK",repid,sort)=$LB(RHPAPMINo, RHPAPMIName, RHPAPMIName2, RHPAPMIDOB)
	 s ind=ind+1
 
	 //fetch rows
	 d FetchRow
 }

 &SQL(CLOSE MyReportCursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(FETCH MyReportCursor INTO :RHPAPMINo, :RHPAPMIName, :RHPAPMIName2, :RHPAPMIDOB)
 if SQLCODE '= 0 set END = 1
 q
 
FormatDates
 s RHPAPMIDOB=..ConvertDateToODBC(RHPAPMIDOB)
 q
]]></Implementation>
</Method>

<Method name="SWARHRPATHEADERFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRPATHEADER">
<Type>%Library.Query</Type>
<FormalSpec>PatientID:%Library.String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="RHPAPMINo:%Library.String, RHPAPMIName:%Library.String, RHPAPMIName2:%Library.String, RHPAPMIDOB:%Library.Date"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
