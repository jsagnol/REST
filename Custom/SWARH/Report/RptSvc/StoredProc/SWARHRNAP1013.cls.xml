<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRNAP1013">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARHRNAP1013
* Report Description: Careplan Expiring/Last Appointment
* Menu Caption: 
* Initial release: 
* Developer: Jayson Sagnol
* 
**************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>62349,58048.563923</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRNAP1013.xml#1 $</Default>
</Parameter>

<Method name="SWARHRNAP1013Close">
<Description>
Location and Revision of this file in Perforce (Auto-updating)
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRNAP1013Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer,DateFrom:%Date,DateTo:%Date,Specialty:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
		   
 New repid,ind

 Set repid=$I(^CacheTemp("TRAK"))
 
 New PAADMRowID,PAADMAdmNo,PAADMPAPERDR,PAADMPAADM2DR,PAADMDepCodeDR,PAADM2NFMICategDepartDR,PAADMAdmDocCodeDR,CTLOCDesc,DEPDesc,CTPCPDesc,PAPMIName,PAPMIName2,PAPMIName3,PAPERStName,CTCITDesc,PAPERTelH,PAADMRefDate,PAPMINo,PAADMAdmDate,PAADMDischgDate
 Set (PAADMRowID,PAADMAdmNo,PAADMPAPERDR,PAADMPAADM2DR,PAADMDepCodeDR,PAADM2NFMICategDepartDR,PAADMAdmDocCodeDR,CTLOCDesc,DEPDesc,CTPCPDesc,PAPMIName,PAPMIName2,PAPMIName3,PAPERStName,CTCITDesc,PAPERTelH,PAADMRefDate,PAPMINo,PAADMAdmDate,PAADMDischgDate) = ""
 
 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)
 
 s PAADMRowID=0
	f {
	    s (HospID,DEPCodeDR,NFMICategDepartDR,PAADMAdmDocCodeDR,LastApptDate)=""
    	
    	;loop through all outpatient/NA episodes
	 	s PAADMRowID=$o(^PAADMi("PAADM_Type","O",PAADMRowID)) q:PAADMRowID="" 
 	
	 	;Filter Hospital
	 	s HospID=$P($G(^PAADM(PAADMRowID,2)),"^",85) 
	 	i HospID'=Hospital {continue}
 	
	 	;Filter Specialty
	 	s DEPCodeDR=$P($G(^PAADM(PAADMRowID)),"^",4) 
	 	i DEPCodeDR'=Specialty {
		 	i Specialty'="" {continue}	
	 	}
 	
	 	;Filter Program
	 	s NFMICategDepartDR=$P($G(^PAADM(PAADMRowID,"ADM2")),"^",104)
		;i NFMICategDepartDR'=Program {
		;	i Program'="" {continue}
		;}
		
		;Filter Cancelled or Pending Episodes
		s PAADMVisitStatus = $P($G(^PAADM(PAADMRowID)),"^",20)
		i ((PAADMVisitStatus="C") || (PAADMVisitStatus="P")) {continue}
		
		;Filter outside date parameters
		s OPAdmDate = ..GetOPAdmDate(PAADMRowID)
		i 'OPAdmDate {continue}
		s PAADMDischgDate=$P($G(^PAADM(PAADMRowID)),"^",17)
		i (((PAADMDischgDate>=DateFrom) || (PAADMDischgDate="")))
		{
			
			;Set LastApptDate=..GetLastContactForEpisode(PAADMRowID)
			Set LastApptDate=..GetLastAppointmentForEpisode(PAADMRowID)
			;Set LastApptDate=$P($G(^PAENQ(LastContact)),"^",1)
				i 'LastApptDate {continue}
 				i ((LastApptDate >=DateFrom) && (LastApptDate <=DateTo))
 				{
					d FillData
					d PhonePicker
					d BuildRow
 				}
		}		
	}
	
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FillData

 s PAADMPAPERDR = $P($G(^PAADM(PAADMRowID)),"^",1) ;Get PAPER_DR
 s HOSPID = Hospital
 s PAPMINo  = $S($G(XFUNC("CLASS"))="OP":$p($g(^PAPER(PAADMPAPERDR,"PAT",1)),"^",2),1:$p($g(^PAPER(PAADMPAPERDR,"PAT",1)),"^",1))
 s CPEndDate = "NOTHING YET"
 s EpisodeNo = $P($G(^PAADM(PAADMRowID)),"^",81) 
 s PAPMIName = $P($G(^PAPER(PAADMPAPERDR,"ALL")),"^",1)
 s PAPMIName2 = $P($G(^PAPER(PAADMPAPERDR,"ALL")),"^",2)
 s PAPMIName3 = $P($G(^PAPER(PAADMPAPERDR,"ALL")),"^",19)
 s PAPERAddress = $zstrip($p($g(^PAPER(PAADMPAPERDR,"PER","ADD",1)),"^",1),"*C")
 s PAPERAddress2 = $zstrip($p($g(^PAPER(PAADMPAPERDR,"PER",1)),"^",1),"*C")
 s CityCode =  $p($g(^PAPER(PAADMPAPERDR,"PER",1)),"^",5)
 s PAPERAddress3 = $p($g(^CT("CIT",CityCode)),"^",5)
 s PAPERPhoneHome = $P($G(^PAPER(PAADMPAPERDR,"PER",1)),"^",11)
 s PAPERPhoneBus = $P($G(^PAPER(PAADMPAPERDR,"PER",1)),"^",15)
 s PAPERPhoneMobile = $P($G(^PAPER(PAADMPAPERDR,"PER",4)),"^",21)
 s PAPERPFM = $P($G(^PAPER(PAADMPAPERDR,"PER",6)),"^",2)
 s PAADMProgram = $P(^CT("NFMI",$P(NFMICategDepartDR,"||",1)),"^",2)
 s PAADMSpecialty = $P(^CTLOC(DEPCodeDR),"^",2)
 
 s CPEndDate = LastApptDate 
 
 q
 
BuildRow
 d FormatDates, FormatTimes
 s sort = ind
 s ^CacheTemp("TRAK",repid,sort)=$LB(HOSPID,PAPMINo,CPEndDate, EpisodeNo, PAPMIName, PAPMIName2, PAPMIName3, PAPERAddress, PAPERAddress2, PAPERAddress3, PAPERPhoneHome, PAPERPhoneBus, PAPERPhoneMobile, PAPERPFM, PAADMProgram, PAADMSpecialty, ContactNumber)
 s ind=ind+1
 q
  
FormatDates
 s PAADMRefDate=..ConvertDateToODBC(PAADMRefDate)
 s PAADMAdmDate=..ConvertDateToODBC(PAADMAdmDate)
 s PAADMDischgDate=..ConvertDateToODBC(PAADMDischgDate)
 i CPEndDate '= "" {s CPEndDate =..ConvertDateToODBC(CPEndDate)}
 q
 
FormatTimes
 // s ENQTime=$ZT(ENQTime,2)
 q

PhonePicker
 set ContactNumber = ""
 If ((PAPERPFM '= "") && (PAPERPhoneMobile = "") && (PAPERPhoneHome = "") &&(PAPERPhoneBus = "")){
 	set ContactNumber = "Non Telephonic PCM"
 	q
 }
 if (PAPERPFM '= "") {
	 set ContactNumber = $CASE(PAPERPFM,
	 "C":PAPERPhoneMobile,
	 "M":PAPERPhoneHome,
	 "B":PAPERPhoneBus,
	 :"")
 }
 else {
	 d PhoneOrder
	 q
 }
	 
 if (ContactNumber = "") {
	 d PhoneOrder
	 q
 }
 q
 
PhoneOrder
	set ContactNumber = "Not Available"

	If (PAPERPhoneMobile '= "") {
		set ContactNumber = PAPERPhoneMobile
		q
	}
	If (PAPERPhoneHome '= "") {
		set ContactNumber = PAPERPhoneHome
		q
	}
	If (PAPERPhoneBus '= "") {
		set ContactNumber = PAPERPhoneBus
		q
	}
	q
]]></Implementation>
</Method>

<Method name="SWARHRNAP1013Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row 
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle 
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRNAP1013">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Library.String,DateFrom:%Library.Date,DateTo:%Library.Date,Specialty:%Library.String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="HOSPID:%Library.Integer,PAPMINo:%Library.String,CPEndDate:%Library.Date, EpisodeNo:%Library.String, PAPMIName:%Library.String, PAPMIName2:%Library.String, PAPMIName3:%Library.String, PAPERAddress:%Library.String, PAPERAddress2:%Library.String, PAPERAddress3:%Library.String, PAPERPhoneHome:%Library.String, PAPERPhoneBus:%Library.String, PAPERPhoneMobile:%Library.String, PAPERPFM:%Library.String, PAADMProgram:%Library.String, PAADMSpecialty:%Library.String, ContactNumber:%Library.String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
