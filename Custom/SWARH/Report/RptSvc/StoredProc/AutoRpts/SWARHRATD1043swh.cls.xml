<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.AutoRpts.SWARHRATD1043swh">
<Description>
Class for SWARHRATD1043swh Report</Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>62335,45574.688786</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/AutoRpts/SWARHRATD1043swh.xml#1 $</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
/*
 * Report Name: AutoPrint Current Inpatients List for Repat Patients <br>
 * Report Code: SWARHRATD1043swh <br>
 * SWARH Developer: Phuong-Dung HOANG <br>
 */
]]></Content>
</UDLText>

<Method name="SWARHRATD1043swhClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRATD1043swhExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 New Number,String,Date,Time,c,n

 /* TEMPLATE MODIFY: Define and initialise appropriate column variables to describe output rowset columns */
 New PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,WARDCode,BEDCode,PAADMRowId,PAADMAdmDate,AdmDocCodeDesc,INSTCode,InsPayorGroupDesc,Type
 Set (PAADMRowId) = 0
 Set (PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,WARDCode,BEDCode,PAADMAdmDate,AdmDocCodeDesc,INSTCode,InsPayorGroupDesc,Type)=""

 s ind=1

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 /* TEMPLATE MODIFY: Clean up parameter variables - $zstrip(<variable>,"*CW") strips all control characters and whitespace, "<>W" just strips leading/trailing whitespace */

 /*
  * TEMPLATE MODIFY:
  *		1. Change name of cursor to something more descriptive than MyReportCursor (need to change in 4 places; here, 2x "fetch" expressions and close expression below)
  *		2. Change SQL query to query desired data, passing valid parameters as defined in Query and Execute method arguments.
  *		3. Pass appropriate parameters using :<ParameterVariableName> - eg. :Hospital
  */
 &SQL(DECLARE SWARHRATD1043swhCursor CURSOR FOR 
  SELECT
        PAADM_PAPMI_DR->PAPMI_No,
        PAADM_PAPMI_DR->PAPMI_Name,
        PAADM_PAPMI_DR->PAPMI_Name2,
        PAADM_PAPMI_DR->PAPMI_Name3,
        PAADM_CurrentWard_DR->WARD_Code,
		PAADM_CurrentBed_DR->BED_Code,
		PAADM_RowId,
		PAADM_AdmDate,
		PAADM_AdmDocCodeDR->CTPCP_Desc,
		(CASE WHEN ins.INS_InsType_DR->INST_code not in('PUB','ACC') THEN 'Private' ELSE 'Public' END) As Type
 FROM   SQLUser.PA_Adm adm
 left join SQLUser.PA_AdmInsurance ins on adm.PAADM_RowID = ins.INS_ParRef
 WHERE  PAADM_Hospital_DR = 696
 AND (PAADM_VisitStatus = 'A')
 AND (PAADM_Type = 'I')
 AND (PAADM_DischgDate IS NULL)
 order by PAADM_AdmDocCodeDR->CTPCP_Desc asc
 
 
 )
 &SQL(OPEN SWARHRATD1043swhCursor)
 

 /* TEMPLATE MODIFY: Rename cursor to something moreChange fetch INTO parameter list to match column variable names */
 //FETCH FIRST ROW
 d FetchRow
  
 while 'SQLCODE{
  
 d FormatDates
  
 s INSTCode=..GetPrimaryInsCodeForEpisode(PAADMRowId) 
 s InsPayorGroupDesc=..GetPrimaryInsPayorGroupForEpisode(PAADMRowId)
 /* TEMPLATE MODIFY: Build the sort string here from column variables. Convert strings to uppercase ($ZCVT(<field>,"U") and separate with spaces */
 s sort = ind		// don't sort - uncomment this line if you've sorted in the query
 //s sort = $ZCVT(AdmDocCodeDesc,"U")_ind
 
 /* TEMPLATE MODIFY: Build the list of fields by placing correct column variable names in the $LB() here. */
 s ^CacheTemp("TRAK",repid,sort)=$LB(PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,WARDCode,BEDCode,PAADMRowId,PAADMAdmDate,AdmDocCodeDesc,INSTCode,InsPayorGroupDesc,Type)
 s ind=ind+1
 
 
 /* TEMPLATE MODIFY: Change field variables to match row columns - copy FETCH FIRST ROW from above */
 //fetch rows
 d FetchRow}

 &SQL(CLOSE SWARHRATD1043swhCursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRow
 /* TEMPLATE MODIFY: Rename cursor to something moreChange fetch INTO parameter list to match column variable names */
 &sql(FETCH SWARHRATD1043swhCursor INTO :PAPMINo,:PAPMIName,:PAPMIName2,:PAPMIName3,
 :WARDCode,:BEDCode,:PAADMRowId,:PAADMAdmDate,:AdmDocCodeDesc,:Type)
 
 if SQLCODE '= 0 set END = 1
 q

FormatDates
 /* TEMPLATE MODIFY: Add an entry to perform a date format for all date/time fields here */
 if PAADMAdmDate s PAADMAdmDate=..ConvertDateToODBC(PAADMAdmDate)
]]></Implementation>
</Method>

<Method name="SWARHRATD1043swhFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/* TEMPLATE MODIFY: Rename Stored Proc query to <MyStoredProcName> 
 * TEMPLATE MODIFY: Change parameters to match desired stored procedure parameters
 * TEMPLATE MODIFY: Change ROWSPEC list to match desired output column names and column data types */
]]></Content>
</UDLText>

<Query name="SWARHRATD1043swh">
<Type>%Library.Query</Type>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAPMINo:%String(MAXLEN=255),PAPMIName:%String(MAXLEN=255),PAPMIName2:%String(MAXLEN=255),PAPMIName3:%String(MAXLEN=255),WARDCode:%String(MAXLEN=255),BEDCode:%String(MAXLEN=255),PAADMRowId:%Integer,PAADMAdmDate:%Date,AdmDocCodeDesc:%String(MAXLEN=255),INSTCode:%String(MAXLEN=255),InsPayorGroupDesc:%String(MAXLEN=255),Type:%String(MAXLEN=255)"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
