<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRTHR1014">
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.RptSvc.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRTHR1014.xml#1 $</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
/*
 * Report Name: Theatre Executive Report
 * Report Code: SWARH.R.THR1014
 * SWARH Developer: Zac Newman
 */
]]></Content>
</UDLText>

<Method name="SWARHRTHR1014QueryClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRTHR1014QueryExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Library.String,DateFrom:%Date]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 /* TEMPLATE MODIFY: Define and initialise appropriate column variables to describe output rowset columns */
 New ID,Fullwaitlist,WaitListNoEndo,Cat1NoEndo,Cat2NoEndo,Cat3NoEndo,FullReadyForCare
 New FullNotReadyForCare,FullEndoList,Cat1Endo,Cat2Endo,Cat3Endo,KPICat1,KPICat2,KPICat3,PatientsAdded,PatientsRemovedOrCompleted,PatientsRemovedOnly,Cat1Percent,Cat2Percent,Cat3Percent

 Set (ID,Fullwaitlist,WaitListNoEndo,Cat1NoEndo,Cat2NoEndo,Cat3NoEndo,FullReadyForCare)=""
 Set (FullNotReadyForCare,FullEndoList,Cat1Endo,Cat2Endo,Cat3Endo,KPICat1,KPICat2,KPICat3,PatientsAdded,PatientsRemovedOrCompleted,PatientsRemovedOnly,Cat1Percent,Cat2Percent,Cat3Percent)=""


 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()

 s Hospital=$zstrip(Hospital,"*CW")
 s DateFrom=..ConvertDateToCache(DateFrom)


 &SQL(DECLARE SWARHRTHR1014Cursor CURSOR FOR 
	select *,
		KPI_Cat_1 * 100 / Cat_1_No_Endo AS Cat_1_Percent,
		KPI_Cat_2 * 100 / Cat_2_No_Endo AS Cat_2_Percent,
		KPI_Cat_3 * 100 / Cat_3_No_Endo AS Cat_3_Percent
	from (select 1 AS ID) a INNER JOIN (
			select
			(select COUNT (*) from SQLUser.PA_WaitingList WL where WL.WL_Hospital_DR = :Hospital and WL.WL_WaitListStatus_DR->WLS_Code not in ('R') AND WL.WL_WaitListType_DR = 1) as Full_wait_list,
			(select COUNT (*) from SQLUser.PA_WaitingList WL where WL.WL_Hospital_DR = :Hospital and WL.WL_StateProc_DR->SPPP_NPPP_DR->NPPP_Code not in (200,502,503,504,505) AND WL.WL_WaitListStatus_DR->WLS_Code <> 'R' AND WL.WL_WaitListType_DR = 1) as Wait_List_No_Endo,
			(select COUNT (*) from SQLUser.PA_WaitingList WL left join SQLUser.PA_WaitingListNotAvailable NRFC on (WL.WL_RowId = nrfc.NA_ParRef and nrfc.NA_DateFrom <= CURRENT_DATE and (NRFC.NA_DateTo IS null OR NRFC.NA_DateTo >= CURRENT_DATE)) where WL.WL_Hospital_DR = :Hospital and (WL.WL_StateProc_DR->SPPP_NPPP_DR->NPPP_Code not in (200,502,503,504,505)) and NRFC.NA_RowID IS null and WL.WL_WaitListPrior_DR = 2 AND WL.WL_WaitListStatus_DR->WLS_Code not in ('R') AND WL.WL_WaitListType_DR = 1) as Cat_1_No_Endo,
			(select COUNT (*) from SQLUser.PA_WaitingList WL left join SQLUser.PA_WaitingListNotAvailable NRFC on (WL.WL_RowId = nrfc.NA_ParRef and nrfc.NA_DateFrom <= CURRENT_DATE and (NRFC.NA_DateTo IS null OR NRFC.NA_DateTo >= CURRENT_DATE)) where WL.WL_Hospital_DR = :Hospital and (WL.WL_StateProc_DR->SPPP_NPPP_DR->NPPP_Code not in (200,502,503,504,505)) and NRFC.NA_RowID IS null and WL.WL_WaitListPrior_DR = 4 AND WL.WL_WaitListStatus_DR->WLS_Code not in ('R') AND WL.WL_WaitListType_DR = 1) as Cat_2_No_Endo,
			(select COUNT (*) from SQLUser.PA_WaitingList WL left join SQLUser.PA_WaitingListNotAvailable NRFC on (WL.WL_RowId = nrfc.NA_ParRef and nrfc.NA_DateFrom <= CURRENT_DATE and (NRFC.NA_DateTo IS null OR NRFC.NA_DateTo >= CURRENT_DATE)) where WL.WL_Hospital_DR = :Hospital and (WL.WL_StateProc_DR->SPPP_NPPP_DR->NPPP_Code not in (200,502,503,504,505)) and NRFC.NA_RowID IS null and WL.WL_WaitListPrior_DR = 5 AND WL.WL_WaitListStatus_DR->WLS_Code not in ('R') AND WL.WL_WaitListType_DR = 1) as Cat_3_No_Endo,
			(select COUNT (*) from SQLUser.PA_WaitingList WL left join SQLUser.PA_WaitingListNotAvailable NRFC on (WL.WL_RowId = nrfc.NA_ParRef and nrfc.NA_DateFrom <= CURRENT_DATE and (NRFC.NA_DateTo IS null OR NRFC.NA_DateTo >= CURRENT_DATE)) where WL.WL_Hospital_DR = :Hospital and (WL.WL_StateProc_DR->SPPP_NPPP_DR->NPPP_Code not in (200,502,503,504,505)) and NRFC.NA_RowID IS null AND WL.WL_WaitListStatus_DR->WLS_Code not in ('R') AND WL.WL_WaitListType_DR = 1) as Full_Ready_For_Care,
			(select COUNT (*) from SQLUser.PA_WaitingList WL left join SQLUser.PA_WaitingListNotAvailable NRFC on (WL.WL_RowId = nrfc.NA_ParRef and nrfc.NA_DateFrom <= CURRENT_DATE and (NRFC.NA_DateTo IS null OR NRFC.NA_DateTo >= CURRENT_DATE)) where WL.WL_Hospital_DR = :Hospital and (WL.WL_StateProc_DR->SPPP_NPPP_DR->NPPP_Code not in (200,502,503,504,505)) and NRFC.NA_RowID IS NOT null AND WL.WL_WaitListStatus_DR->WLS_Code not in ('R') AND WL.WL_WaitListType_DR = 1) as Full_Not_Ready_For_Care,
			(select COUNT (*) from SQLUser.PA_WaitingList WL where WL.WL_Hospital_DR = :Hospital and (WL.WL_StateProc_DR->SPPP_NPPP_DR->NPPP_Code in (200,502,503,504,505)) AND WL.WL_WaitListStatus_DR->WLS_Code not in ('R') AND WL.WL_WaitListType_DR = 1) as Full_Endo_List,
			(select COUNT (*) from SQLUser.PA_WaitingList WL left join SQLUser.PA_WaitingListNotAvailable NRFC on (WL.WL_RowId = nrfc.NA_ParRef and nrfc.NA_DateFrom <= CURRENT_DATE and (NRFC.NA_DateTo IS null OR NRFC.NA_DateTo >= CURRENT_DATE)) where WL.WL_Hospital_DR = :Hospital and (WL.WL_StateProc_DR->SPPP_NPPP_DR->NPPP_Code in (200,502,503,504,505)) and NRFC.NA_RowID IS null and WL.WL_WaitListPrior_DR = 2 AND WL.WL_WaitListStatus_DR->WLS_Code not in ('R') AND WL.WL_WaitListType_DR = 1) as Cat_1_Endo,
			(select COUNT (*) from SQLUser.PA_WaitingList WL left join SQLUser.PA_WaitingListNotAvailable NRFC on (WL.WL_RowId = nrfc.NA_ParRef and nrfc.NA_DateFrom <= CURRENT_DATE and (NRFC.NA_DateTo IS null OR NRFC.NA_DateTo >= CURRENT_DATE)) where WL.WL_Hospital_DR = :Hospital and (WL.WL_StateProc_DR->SPPP_NPPP_DR->NPPP_Code in (200,502,503,504,505)) and NRFC.NA_RowID IS null and WL.WL_WaitListPrior_DR = 4 AND WL.WL_WaitListStatus_DR->WLS_Code not in ('R') AND WL.WL_WaitListType_DR = 1) as Cat_2_Endo,
			(select COUNT (*) from SQLUser.PA_WaitingList WL left join SQLUser.PA_WaitingListNotAvailable NRFC on (WL.WL_RowId = nrfc.NA_ParRef and nrfc.NA_DateFrom <= CURRENT_DATE and (NRFC.NA_DateTo IS null OR NRFC.NA_DateTo >= CURRENT_DATE)) where WL.WL_Hospital_DR = :Hospital and (WL.WL_StateProc_DR->SPPP_NPPP_DR->NPPP_Code in (200,502,503,504,505)) and NRFC.NA_RowID IS null and WL.WL_WaitListPrior_DR = 5 AND WL.WL_WaitListStatus_DR->WLS_Code not in ('R') AND WL.WL_WaitListType_DR = 1) as Cat_3_Endo,
			(select COUNT (*) from SQLUser.PA_WaitingList WL left join SQLUser.PA_WaitingListNotAvailable NRFC on (WL.WL_RowId = nrfc.NA_ParRef and nrfc.NA_DateFrom <= CURRENT_DATE and (NRFC.NA_DateTo IS null OR NRFC.NA_DateTo >= CURRENT_DATE)) where WL.WL_Hospital_DR = :Hospital and WL.WL_StateProc_DR->SPPP_NPPP_DR->NPPP_Code not in (200,502,503,504,505) and NRFC.NA_RowID IS null and WL.WL_WaitListPrior_DR = 2 AND WL.WL_WaitListStatus_DR->WLS_Code <> 'R' AND WL.WL_WaitListType_DR = 1 AND WL.WL_DaysOnList < 30) as KPI_Cat_1,
			(select COUNT (*) from SQLUser.PA_WaitingList WL left join SQLUser.PA_WaitingListNotAvailable NRFC on (WL.WL_RowId = nrfc.NA_ParRef and nrfc.NA_DateFrom <= CURRENT_DATE and (NRFC.NA_DateTo IS null OR NRFC.NA_DateTo >= CURRENT_DATE)) where WL.WL_Hospital_DR = :Hospital and WL.WL_StateProc_DR->SPPP_NPPP_DR->NPPP_Code not in (200,502,503,504,505) and NRFC.NA_RowID IS null and WL.WL_WaitListPrior_DR = 4 AND WL.WL_WaitListStatus_DR->WLS_Code <> 'R' AND WL.WL_WaitListType_DR = 1 AND WL.WL_DaysOnList < 90) as KPI_Cat_2,
			(select COUNT (*) from SQLUser.PA_WaitingList WL left join SQLUser.PA_WaitingListNotAvailable NRFC on (WL.WL_RowId = nrfc.NA_ParRef and nrfc.NA_DateFrom <= CURRENT_DATE and (NRFC.NA_DateTo IS null OR NRFC.NA_DateTo >= CURRENT_DATE)) where WL.WL_Hospital_DR = :Hospital and WL.WL_StateProc_DR->SPPP_NPPP_DR->NPPP_Code not in (200,502,503,504,505) and NRFC.NA_RowID IS null and WL.WL_WaitListPrior_DR = 5 AND WL.WL_WaitListStatus_DR->WLS_Code <> 'R' AND WL.WL_WaitListType_DR = 1 AND WL.WL_DaysOnList < 365) as KPI_Cat_3,
			(select COUNT (*) from SQLUser.PA_WaitingList where WL_Hospital_DR = :Hospital and WL_Date > :DateFrom AND WL_WaitListStatus_DR->WLS_Code not in ('R') AND WL_WaitListType_DR = 1) as Patients_Added,
			(select COUNT (*) from SQLUser.PA_WaitingList where WL_Hospital_DR = :Hospital and WL_Date > :DateFrom AND WL_WaitListStatus_DR->WLS_Code in ('R') AND WL_WaitListType_DR = 1) as Patients_Removed_Or_Completed,
			(select COUNT (*) from SQLUser.PA_WaitingList where WL_Hospital_DR = :Hospital and WL_Date > :DateFrom AND WL_WaitListStatus_DR->WLS_Code in ('R') AND WL_WaitListType_DR = 1) as Patients_Removed_Only
			) b ON (1=1))
 &SQL(OPEN SWARHRTHR1014Cursor)
 
 //FETCH FIRST ROW
 d FetchRow
  
 while END=0 {
  
	 //d FormatDates
  	 //d FormatTimes
  	 
	 /* TEMPLATE MODIFY: Build the sort string here from column variables. Convert strings to uppercase ($ZCVT(<field>,"U") and separate with spaces */
	 s sort = ind		// don't sort - uncomment this line if you've sorted in the query
	 //s sort = $ZCVT(HOSPDesc,"U")_" "_$ZCVT(WARDDesc,"U")_" "_$ZCVT(ROOMCode,"U")_" "_$ZCVT(BEDCode,"U")_" "_$ZCVT(CTRLGDesc,"U")_" "_$ZCVT(PAPERName,"U")_" "_$ZCVT(PAPERName2,"U")_" "_$ZCVT(PAPERName3,"U")_ind
 
	 /* TEMPLATE MODIFY: Build the list of fields by placing correct column variable names in the $LB() here. */
	 s ^CacheTemp("TRAK",repid,sort)=$LB(ID,Fullwaitlist,WaitListNoEndo,Cat1NoEndo,Cat2NoEndo,Cat3NoEndo,FullReadyForCare,FullNotReadyForCare,FullEndoList,Cat1Endo,Cat2Endo,Cat3Endo,KPICat1,KPICat2,KPICat3,PatientsAdded,PatientsRemovedOrCompleted,PatientsRemovedOnly,Cat1Percent,Cat2Percent,Cat3Percent)
	 s ind=ind+1
 
	 //fetch rows
	 d FetchRow
 }

 &SQL(CLOSE SWARHRTHR1014Cursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRow
 /* TEMPLATE MODIFY: Rename cursor to something moreChange fetch INTO parameter list to match column variable names */
 &sql(FETCH SWARHRTHR1014Cursor INTO :ID,:Fullwaitlist,:WaitListNoEndo,:Cat1NoEndo,:Cat2NoEndo,:Cat3NoEndo,:FullReadyForCare,:FullNotReadyForCare,:FullEndoList,:Cat1Endo,:Cat2Endo,:Cat3Endo,:KPICat1,:KPICat2,:KPICat3,:PatientsAdded,:PatientsRemovedOrCompleted,:PatientsRemovedOnly,:Cat1Percent,:Cat2Percent,:Cat3Percent)
 if SQLCODE '= 0 set END = 1
 q
]]></Implementation>
</Method>

<Method name="SWARHRTHR1014QueryFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/* TEMPLATE MODIFY: Rename Stored Proc query to <MyStoredProcName> 
 * TEMPLATE MODIFY: Change parameters to match desired stored procedure parameters
 * TEMPLATE MODIFY: Change ROWSPEC list to match desired output column names and column data types */
]]></Content>
</UDLText>

<Query name="SWARHRTHR1014Query">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Library.String,DateFrom:%Date</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="ID:%Library.Integer,Fullwaitlist:%Library.Integer,WaitListNoEndo:%Library.Integer,Cat1NoEndo:%Library.Integer,Cat2NoEndo:%Library.Integer,Cat3NoEndo:%Library.Integer,FullReadyForCare:%Library.Integer,FullNotReadyForCare:%Library.Integer,FullEndoList:%Library.Integer,Cat1Endo:%Library.Integer,Cat2Endo:%Library.Integer,Cat3Endo:%Library.Integer,KPICat1:%Library.Integer,KPICat2:%Library.Integer,KPICat3:%Library.Integer,PatientsAdded:%Library.Integer,PatientsRemovedOrCompleted:%Library.Integer,PatientsRemovedOnly:%Library.Integer,Cat1Percent:%Library.Integer,Cat2Percent:%Library.Integer,Cat3Percent:%Library.Integer"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
