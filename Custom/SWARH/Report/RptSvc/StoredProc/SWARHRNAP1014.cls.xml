<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRNAP1014">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARHRNAP1002
* Report Description: Service Activity Report
* Menu Caption: Service Activity Report
* Initial release: 
* Developer: Jayson Sagnol
* Modified: 2015/09/17 - Ross Gladman - Added support for multiple specialties & programs
* 
**************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRNAP1014.xml#1 $</Default>
</Parameter>

<Method name="SWARHRNAP1014Close">
<Description>
Location and Revision of this file in Perforce (Auto-updating)
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRNAP1014Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer,DateFrom:%Date,DateTo:%Date,PeriodFrom:%Date,Specialty:%String,Program:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
		   
 New repid,ind

 Set repid=$I(^CacheTemp("TRAK"))
 
 New STHospID,STCTLocID,STDepDescID,STContactTarget,STClientTarget,STDurationTarget,ENQRowID,ENQHospitalDR,ENQDate,CTLOCDesc,DEPDesc,ENQDuration,PAPERName,PAPERName2,PAPERName3,PAPMINo,PAPERStName,CTCITDesc,CTZIPCode,PAPERTelH,ENQIndirectTime,ENQInterpretingTime,ENQTravelTime,Weekend,ENQRBEventDR,EVName,EVAttendeeFemaleNo,EVAttendeeMaleNo,CTLOCCode,DEPCode,STContactTargetLow,STClientTargetLow,STDurationTargetLow,STContactTargetHigh,STClientTargetHigh,STDurationTargetHigh,STContactDynamicTarget,STContactDynamicTargetLow,STContactDynamicTargetHigh,STClientDynamicTarget,STClientDynamicTargetLow,STClientDynamicTargetHigh,STDurationDynamicTarget,STDurationDynamicTargetLow,STDurationDynamicTargetHigh,CONTDELMODECode,CONTDELMODEDesc,ENQRequestStatusDR
 Set (STHospID,STCTLocID,STDepDescID,STContactTarget,STClientTarget,STDurationTarget,ENQRowID,ENQHospitalDR,ENQDate,CTLOCDesc,DEPDesc,ENQDuration,PAPERName,PAPERName2,PAPERName3,PAPMINo,PAPERStName,CTCITDesc,CTZIPCode,PAPERTelH,ENQIndirectTime,ENQInterpretingTime,ENQTravelTime,Weekend,ENQRBEventDR,EVName,EVAttendeeFemaleNo,EVAttendeeMaleNo,CTLOCCode,DEPCode,STContactTargetLow,STClientTargetLow,STDurationTargetLow,STContactTargetHigh,STClientTargetHigh,STDurationTargetHigh,STContactDynamicTarget,STContactDynamicTargetLow,STContactDynamicTargetHigh,STClientDynamicTarget,STClientDynamicTargetLow,STClientDynamicTargetHigh,STDurationDynamicTarget,STDurationDynamicTargetLow,STDurationDynamicTargetHigh,CONTDELMODECode,CONTDELMODEDesc,ENQRequestStatusDR) = ""
 // PeriodFrom is not used here, it is required for the YTD version though which is why it is an input parameter.
 
 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)
 s DateDiff=DateTo-DateFrom+1
 //s CustomKPIFrom ="AdmDate"
 //s CustomKPITo = "DiscghDate"

 &SQL(DECLARE SWARHRNAP1014 CURSOR FOR
     SELECT
                ST.HospID
                ,ST.CTLocID
                ,ST.DepDescID
                ,ST.ContactTarget
                ,ST.ClientTarget
                ,ST.DurationTarget
                ,ENQ_RowID
                ,ENQ_Hospital_DR
                ,ENQ_Date
                ,ENQ_Location_DR->CTLOC_Desc
                ,ENQ_GovernDepart_DR->DEP_Desc
                ,ENQ_Duration
                ,ENQ_PAPER_DR->PAPER_Name
                ,ENQ_PAPER_DR->PAPER_Name2
                ,ENQ_PAPER_DR->PAPER_Name3
                ,ENQ_PAPER_DR->PAPER_PAPMI_DR->PAPMI_No
                ,ENQ_PAPER_DR->PAPER_StName
                ,ENQ_PAPER_DR->PAPER_CityCode_DR->CTCIT_Desc
                ,ENQ_PAPER_DR->PAPER_Zip_DR->CTZIP_Code
                ,ENQ_PAPER_DR->PAPER_TelH
                ,ENQ_IndirectTime
                ,ENQ_InterpretingTime
                ,ENQ_TravelTime
                ,CASE UCASE(DATENAME(DW,ENQ_Date)) WHEN 'SATURDAY' THEN 1 WHEN 'SUNDAY' THEN 1 ELSE 0 END AS WEEKEND
                ,ENQ_RBEvent_DR
                ,ENQ_RBEvent_DR->EV_Name
                ,ENQ_RBEvent_DR->EV_AttendeeFemaleNo
                ,ENQ_RBEvent_DR->EV_AttendeeMaleNo
                ,ENQ_Location_DR->CTLOC_Code
                ,ENQ_GovernDepart_DR->DEP_Code
                ,ENQ_ContDelivMode_DR->CONTDELMODE_Code
                ,ENQ_ContDelivMode_DR->CONTDELMODE_Desc
                ,ENQ_RequestStatus_DR
        FROM
                SQLUser.PA_EnquiryContact
                LEFT JOIN Custom_SWARH.SWARH_ComServiceTargets ST ON (ENQ_Hospital_DR=ST.HospID AND ENQ_Location_DR=ST.CTLocID AND ENQ_GovernDepart_DR LIKE ST.DepDescID)
        WHERE
                ENQ_Date Between :DateFrom AND :DateTo
                AND ENQ_Hospital_DR =:Hospital
                
                -- AND (ENQ_Location_DR = :Specialty OR (:Specialty IS NULL))  -- Single Specialty Only
                AND (({fn CONCAT( ',', {fn CONCAT((:Specialty),',')})} [ {fn CONCAT( ',', {fn CONCAT((ENQ_Location_DR),',')})}) OR (:Specialty IS NULL))  -- Multiple Specialties

                -- AND (ENQ_GovernDepart_DR = :Program OR (:Program IS NULL)) -- Single Program Only
		        AND (({fn CONCAT( ',', {fn CONCAT((:Program),',')})} [ {fn CONCAT( ',', {fn CONCAT((ENQ_GovernDepart_DR),',')})}) OR (:Program IS NULL)) -- Multiple Programs
                
                AND ENQ_RequestStatus_DR IN (2,8)
    )
                
 &SQL(OPEN SWARHRNAP1014)
 
 d FetchRow //Fetch first row
  
 while END=0 {
	 d FormatDates,FormatTimes,FormatAddress,SetTargetLimits
	 s admincontact=..IsContactAdminTime(ENQRowID)
	 //If 'admincontact {
  	 	s sort = ind
	 	s ^CacheTemp("TRAK",repid,sort)=$LB(STHospID,STCTLocID,STDepDescID,STContactTarget,STClientTarget,STDurationTarget,ENQRowID,ENQHospitalDR,ENQDate,CTLOCDesc,DEPDesc,ENQDuration,PAPERName,PAPERName2,PAPERName3,PAPMINo,PAPERStName,CTCITDesc,CTZIPCode,PAPERTelH,ENQIndirectTime,ENQInterpretingTime,ENQTravelTime,Weekend,ENQRBEventDR,EVName,EVAttendeeFemaleNo,EVAttendeeMaleNo,CTLOCCode,DEPCode,STContactTargetLow,STClientTargetLow,STDurationTargetLow,STContactTargetHigh,STClientTargetHigh,STDurationTargetHigh,STContactDynamicTarget,STContactDynamicTargetLow,STContactDynamicTargetHigh,STClientDynamicTarget,STClientDynamicTargetLow,STClientDynamicTargetHigh,STDurationDynamicTarget,STDurationDynamicTargetLow,STDurationDynamicTargetHigh,admincontact,CONTDELMODECode,CONTDELMODEDesc,ENQRequestStatusDR)
	 	s ind=ind+1
	 // }
 	 d FetchRow //Fetch next row
 }

 &SQL(CLOSE SWARHRNAP1014)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(FETCH SWARHRNAP1014 INTO :STHospID,:STCTLocID,:STDepDescID,:STContactTarget,:STClientTarget,:STDurationTarget,:ENQRowID,:ENQHospitalDR,:ENQDate,:CTLOCDesc,:DEPDesc,:ENQDuration,:PAPERName,:PAPERName2,:PAPERName3,:PAPMINo,:PAPERStName,:CTCITDesc,:CTZIPCode,:PAPERTelH,:ENQIndirectTime,:ENQInterpretingTime,:ENQTravelTime,:Weekend,:ENQRBEventDR,:EVName,:EVAttendeeFemaleNo,:EVAttendeeMaleNo,:CTLOCCode,:DEPCode,:CONTDELMODECode,:CONTDELMODEDesc,:ENQRequestStatusDR)
 if SQLCODE '= 0 set END = 1
 q
 
FormatDates
 s ENQDate = ..ConvertDateToODBC(ENQDate) 
 q
  
FormatTimes
 // s ENQTime=$ZT(ENQTime,2)
 q
 
FormatAddress
 s PAPERStName=$ZSTRIP(PAPERStName,"*C")
 q
 
SetTargetLimits
 s STContactTargetLow=$FN(STContactTarget-(STContactTarget*.05),"",0)
 s STContactTargetHigh=$FN(STContactTarget+(STContactTarget*.05),"",0)
 s STContactDynamicTarget=$FN(STContactTarget*12*DateDiff/365,"",0)
 s STContactDynamicTargetLow=$FN(STContactDynamicTarget-(STContactDynamicTarget*.05),"",0)
 s STContactDynamicTargetHigh=$FN(STContactDynamicTarget+(STContactDynamicTarget*.05),"",0)
 
 s STClientTargetLow=$FN(STClientTarget-(STClientTarget*.05),"",0)
 s STClientTargetHigh=$FN(STClientTarget+(STClientTarget*.05),"",0)
 s STClientDynamicTarget=$FN(STClientTarget*12*DateDiff/365,"",0)
 s STClientDynamicTargetLow=$FN(STClientDynamicTarget-(STClientDynamicTarget*.05),"",0)
 s STClientDynamicTargetHigh=$FN(STClientDynamicTarget+(STClientDynamicTarget*.05),"",0)
 
 s STDurationTargetLow=$FN(STDurationTarget-(STDurationTarget*.05),"",0)
 s STDurationTargetHigh=$FN(STDurationTarget+(STDurationTarget*.05),"",0)
 s STDurationDynamicTarget=$FN(STDurationTarget*12*DateDiff/365,"",0)
 s STDurationDynamicTargetLow=$FN(STDurationDynamicTarget-(STDurationDynamicTarget*.05),"",0)
 s STDurationDynamicTargetHigh=$FN(STDurationDynamicTarget+(STDurationDynamicTarget*.05),"",0)
 
 q
]]></Implementation>
</Method>

<Method name="SWARHRNAP1014Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching  zdh
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row 
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle 
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRNAP1014">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer,DateFrom:%Date,DateTo:%Date,PeriodFrom:%Date,Specialty:%String,Program:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="STHospID:%Integer,STCTLocID:%Integer,STDepDescID:%String,STContactTarget:%Integer,STClientTarget:%Integer,STDurationTarget:%Integer,ENQRowID:%String,ENQHospitalDR:%String,ENQDate:%String,CTLOCDesc:%String,DEPDesc:%String,ENQDuration:%String,PAPERName:%String,PAPERName2:%String,PAPERName3:%String,PAPMINo:%String,PAPERStName:%String,CTCITDesc:%String,CTZIPCode:%String,PAPERTelH:%String,ENQIndirectTime:%String,ENQInterpretingTime:%String,ENQTravelTime:%String,Weekend:%String,ENQRBEventDR:%String,EVName:%String,EVAttendeeFemaleNo:%String,EVAttendeeMaleNo:%String,CTLOCCode:%String,DEPCode:%String,STContactTargetLow:%Integer,STClientTargetLow:%Integer,STDurationTargetLow:%Integer,STContactTargetHigh:%Integer,STClientTargetHigh:%Integer,STDurationTargetHigh:%Integer,STContactDynamicTarget:%Integer,STContactDynamicTargetLow:%Integer,STContactDynamicTargetHigh:%Integer,STClientDynamicTarget:%Integer,STClientDynamicTargetLow:%Integer,STClientDynamicTargetHigh:%Integer,STDurationDynamicTarget:%Integer,STDurationDynamicTargetLow:%Integer,STDurationDynamicTargetHigh:%Integer,admincontact:%Integer,CONTDELMODECode:%String,CONTDELMODEDesc:%String,ENQRequestStatusDR:%Integer"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
