<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRNAP1006">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARHRNAP1006
* Report Description: Contacts/Clients by Postcode
* Menu Caption: 
* Initial release: 
* Developer: Michael Welsh
* Modified: 2015/10/01 - Ross Gladman - Added support for multiple specialties & programs
* 
**************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRNAP1006.xml#1 $</Default>
</Parameter>

<Method name="SWARHRNAP1006Close">
<Description>
Location and Revision of this file in Perforce (Auto-updating)
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRNAP1006Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer,DateFrom:%Date,DateTo:%Date,Specialty:%String,Program:%String,Clinician:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
		   
 New repid,ind

 Set repid=$I(^CacheTemp("TRAK"))
 
 New ENQRowID,ENQDate,CTLOCRowId,CTLOCCode,CTLOCDesc,SUBRowID,SUBCode,DEPRowID,DEPCode,DEPDesc,CTPCPRowId,CTPCPCode,CTPCPDesc,CTRGCode,CTRGDesc,CTZIPCode,CTZIPDesc,PAPMINo,ENQDuration,ENQIndirectTime,ENQTravelTime,PAPERName,PAPERName2,ENQTime
 Set (ENQDate,CTLOCCode,CTLOCDesc,SUBRowID,SUBCode,DEPRowID,DEPCode,DEPDesc,CTPCPCode,CTPCPDesc,CTRGCode,CTRGDesc,CTZIPCode,CTZIPDesc,PAPMINo,PAPERName,PAPERName2,ENQTime) = ""
 Set (ENQRowID,ENQDuration,ENQIndirectTime,ENQTravelTime,CTPCPRowId,CTLOCRowId)=0
 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)

 &SQL(DECLARE SWARHRNAP1006 CURSOR FOR
 	SELECT
 		con.ENQ_RowID
        ,con.ENQ_Date
        ,con.ENQ_Location_DR->CTLOC_RowId
        ,con.ENQ_Location_DR->CTLOC_Code
        ,con.ENQ_Location_DR->CTLOC_Desc
        ,con.ENQ_GovernDepart_DR->DEP_ParRef->NFMI_GovSubCateg_DR->SUB_RowID
        ,con.ENQ_GovernDepart_DR->DEP_ParRef->NFMI_GovSubCateg_DR->SUB_Code
        ,con.ENQ_GovernDepart_DR->DEP_RowID
        ,con.ENQ_GovernDepart_DR->DEP_Code
        ,con.ENQ_GovernDepart_DR->DEP_Desc
        ,con.ENQ_CTCP_DR->CTPCP_RowId
        ,con.ENQ_CTCP_DR->CTPCP_Code
        ,con.ENQ_CTCP_DR->CTPCP_Desc
        ,con.ENQ_PAPER_DR->PAPER_CT_Region_DR->CTRG_Code
        ,con.ENQ_PAPER_DR->PAPER_CT_Region_DR->CTRG_Desc
        ,con.ENQ_PAPER_DR->PAPER_Zip_DR->CTZIP_Code
        ,con.ENQ_PAPER_DR->PAPER_Zip_DR->CTZIP_Desc
        ,con.ENQ_PAPER_DR->PAPER_PAPMI_DR->PAPMI_No
        ,con.ENQ_Duration
        ,con.ENQ_IndirectTime
        ,con.ENQ_TravelTime
        ,con.ENQ_PAPER_DR->PAPER_Name
        ,con.ENQ_PAPER_DR->PAPER_Name2
        ,con.ENQ_Time
	FROM
        SQLUser.PA_EnquiryContact con
    WHERE
    	(con.ENQ_Hospital_DR = :Hospital)
    	AND (con.ENQ_Date BETWEEN :DateFrom AND :DateTo)

    	-- AND (con.ENQ_Location_DR->CTLOC_RowId = :Specialty OR (:Specialty IS NULL)) -- Single Specialty Only
    	AND (({fn CONCAT( ',', {fn CONCAT((:Specialty),',')})} [ {fn CONCAT( ',', {fn CONCAT((con.ENQ_Location_DR->CTLOC_RowId),',')})}) OR (:Specialty IS NULL)) -- Multiple Specialties

    	-- AND (con.ENQ_GovernDepart_DR->DEP_RowID = :Program OR (:Program IS NULL))   -- Single Program Only
		AND (({fn CONCAT( ',', {fn CONCAT((:Program  ),',')})} [ {fn CONCAT( ',', {fn CONCAT((con.ENQ_GovernDepart_DR->DEP_RowID),',')})}) OR (:Program IS NULL)) -- Multiple Programs
		
    	AND (con.ENQ_CTCP_DR->CTPCP_RowId = :Clinician OR (:Clinician IS NULL))
    )
                
 &SQL(OPEN SWARHRNAP1006)
 
 d FetchRow //Fetch first row
  
 while END=0 {
  
	 d FormatDates, FormatTimes
  	 s sort = ind
	 s ^CacheTemp("TRAK",repid,sort)=$LB(ENQRowID,ENQDate,CTLOCRowId,CTLOCCode,CTLOCDesc,SUBRowID,SUBCode,DEPRowID,DEPCode,DEPDesc,CTPCPRowId,CTPCPCode,CTPCPDesc,CTRGCode,CTRGDesc,CTZIPCode,CTZIPDesc,PAPMINo,ENQDuration,ENQIndirectTime,ENQTravelTime,PAPERName,PAPERName2,ENQTime)
	 s ind=ind+1
 	 d FetchRow //Fetch next row
 }

 &SQL(CLOSE SWARHRNAP1006)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(FETCH SWARHRNAP1006 INTO :ENQRowID,:ENQDate,:CTLOCRowId,:CTLOCCode,:CTLOCDesc,:SUBRowID,:SUBCode,:DEPRowID,:DEPCode,:DEPDesc,:CTPCPRowId,:CTPCPCode,:CTPCPDesc,:CTRGCode,:CTRGDesc,:CTZIPCode,:CTZIPDesc,:PAPMINo,:ENQDuration,:ENQIndirectTime,:ENQTravelTime,:PAPERName,:PAPERName2,:ENQTime)
 if SQLCODE '= 0 set END = 1
 q
 
FormatDates
 s ENQDate=..ConvertDateToODBC(ENQDate)
 q
 
FormatTimes
 s ENQTime=$ZT(ENQTime,2)
 q
]]></Implementation>
</Method>

<Method name="SWARHRNAP1006Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row 
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle 
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRNAP1006">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer,DateFrom:%Date,DateTo:%Date,Specialty:%String,Program:%String,Clinician:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="ENQRowID:%Integer,ENQDate:%Date,CTLOCRowId:%Integer,CTLOCCode:%String,CTLOCDesc:%String,SUBRowID:%String,SUBCode:%String,DEPRowID:%String,DEPCode:%String,DEPDesc:%String,CTPCPRowId:%Integer,CTPCPCode:%String,CTPCPDesc:%String,CTRGCode:%String,CTRGDesc:%String,CTZIPCode:%String,CTZIPDesc:%String,PAPMINo:%String,ENQDuration:%Integer,ENQIndirectTime:%Integer,ENQTravelTime:%Integer,PAPERName:%String,PAPERName2:%String,ENQTime:%String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
