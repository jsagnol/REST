<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRTHR1006">
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRTHR1006.xml#1 $</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
/*
 * Report Name: Anaesthetic Statistics
 * Report Code: SWARH.R.THR1006
 * SWARH Developer: Zac Newman
 ****** UPDATES ******
 * 2013/07/05 â€“ Anaesthetic Statistics (The issue with this report was not counting Public and Private patients, this should be resolved)
 */
]]></Content>
</UDLText>

<Method name="SWARHRTHR1006QueryClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 Set repid=$li(QHandle,2)

 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRTHR1006QueryExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Library.String,DateFrom:%Date,DateTo:%Date]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[

 New repid,ind

 Set repid=$I(^CacheTemp("TRAK"))
 
 New ANAAnaesthetistDR,CTPCPDesc,ANAMethod,ANMETDesc,AnaCount,EmergAnaCount,ElectAnaCount,PrivateAnaCount
 New PublicAnaCount,YAnaCount,YEmergAnaCount,YElectAnaCount,YPrivateAnaCount,YPublicAnaCount
 Set (ANAAnaesthetistDR,CTPCPDesc,ANAMethod,ANMETDesc,AnaCount,EmergAnaCount,ElectAnaCount,PrivateAnaCount)=""
 Set (PublicAnaCount,YAnaCount,YEmergAnaCount,YElectAnaCount,YPrivateAnaCount,YPublicAnaCount)=""

 s ind=1, END=0

 s mon=..MonitorBegin()
 
 s Hospital=$zstrip(Hospital,"*CW")
 s DateFrom=..ConvertDateToCache(DateFrom)
 s DateTo=..ConvertDateToCache(DateTo)
 
 s YearDate = ..ConvertDateToCache($PIECE($ZDATE($HOROLOG,3),"-")_"-01-01")
 
 &SQL(DECLARE SWARHRTHR1006Cursor CURSOR FOR 
	SELECT 	
			AN.ANA_Anaesthetist_DR,
			%SQLSTRING(AN.ANA_Anaesthetist_DR->CTPCP_Desc) AS CTPCP_Desc,
			AN.ANA_Method,
			%SQLSTRING(ANM.ANMET_Desc) As ANMET_Desc,
			COUNT(*) AS AnaCount,
			SUM(CASE WHEN ORA.ANAOP_EffectiveElective = 'EM' THEN 1 ELSE 0 END) AS EmergAnaCount,
			SUM(CASE WHEN ORA.ANAOP_EffectiveElective = 'EL' THEN 1 ELSE 0 END) AS ElectAnaCount,
			SUM(CASE WHEN C.INS_InsType_DR->INST_PayorGroup_DR->PGRP_Code != 'M' THEN 1 ELSE 0 END) AS PrivateAnaCount,
			SUM(CASE WHEN C.INS_InsType_DR->INST_PayorGroup_DR->PGRP_Code = 'M' THEN 1 ELSE 0 END) AS PublicAnaCount,
			YAnaCount,
			YEmergAnaCount,
			YElectAnaCount,
			YPrivateAnaCount,
			YPublicAnaCount
	FROM SQLUser.OR_Anaesthesia AN
			INNER JOIN SQLUser.OR_Anaest_Operation ORA on AN.ANA_RowId = ORA.ANAOP_Par_Ref 
			INNER JOIN SQLUser.RB_OperatingRoom RB on (AN.ANA_RBOperatingRoom_DR = RB.RBOP_RowId)
			LEFT JOIN SQLUser.PA_AdmInsurance C ON RB.RBOP_PAADM_DR = C.INS_ParRef
			lEFT JOIN SQLUser.ORC_AnaestMethod ANM on ANM.ANMET_RowId = AN.ANA_Method
			LEFT JOIN (
							SELECT 
									YAN.ANA_Anaesthetist_DR,
								    YAN.ANA_Method,
									COUNT(*) AS YAnaCount,
									SUM(CASE WHEN YORA.ANAOP_EffectiveElective = 'EM' THEN 1 ELSE 0 END) AS YEmergAnaCount,
									SUM(CASE WHEN YORA.ANAOP_EffectiveElective = 'EL' THEN 1 ELSE 0 END) AS YElectAnaCount,
									SUM(CASE WHEN YC.INS_InsType_DR->INST_PayorGroup_DR->PGRP_Code != 'M' THEN 1 ELSE 0 END) AS YPrivateAnaCount,
									SUM(CASE WHEN YC.INS_InsType_DR->INST_PayorGroup_DR->PGRP_Code = 'M' THEN 1 ELSE 0 END) AS YPublicAnaCount
							FROM SQLUser.OR_Anaesthesia YAN
									INNER JOIN SQLUser.OR_Anaest_Operation YORA on YAN.ANA_RowId = YORA.ANAOP_Par_Ref
									INNER JOIN SQLUser.RB_OperatingRoom YRB on YAN.ANA_RBOperatingRoom_DR = YRB.RBOP_RowId
									LEFT JOIN SQLUser.PA_AdmInsurance YC ON YRB.RBOP_PAADM_DR = YC.INS_ParRef
							WHERE YAN.ANA_Date > DATEADD(dd,-1,:YearDate)
									AND YAN.ANA_Status = 'D'
									AND YRB.RBOP_PAADM_DR->PAADM_Hospital_DR = :Hospital
									GROUP BY YAN.ANA_Anaesthetist_DR, YAN.ANA_Method) YAN 
							ON (AN.ANA_Anaesthetist_DR=YAN.ANA_Anaesthetist_DR AND AN.ANA_Method=YAN.ANA_Method)
	
		WHERE AN.ANA_Anaesthetist_DR is not Null
			AND AN.ANA_Date between :DateFrom and :DateTo
			AND RB.RBOP_PAADM_DR->PAADM_Hospital_DR = :Hospital
			AND AN.ANA_Status = 'D'
		GROUP BY  AN.ANA_Anaesthetist_DR, AN.ANA_Method,ANM.ANMET_Desc,AN.ANA_Anaesthetist_DR->CTPCP_Desc,YAnaCount,YEmergAnaCount,YElectAnaCount,YPrivateAnaCount,YPublicAnaCount
		ORDER BY  AN.ANA_Anaesthetist_DR, AN.ANA_Method
		)
 &SQL(OPEN SWARHRTHR1006Cursor)
 
 //FETCH FIRST ROW
 d FetchRow
  
 while END=0 {
  
	 //d FormatDates
  	 //d FormatTimes
  	 
	 s sort = ind
 	 s ^CacheTemp("TRAK",repid,sort)=$LB(ANAAnaesthetistDR,CTPCPDesc,ANAMethod,ANMETDesc,AnaCount,EmergAnaCount,ElectAnaCount,PrivateAnaCount,PublicAnaCount,YAnaCount,YEmergAnaCount,YElectAnaCount,YPrivateAnaCount,YPublicAnaCount)
	 s ind=ind+1
 
	 //fetch rows
	 d FetchRow
 }

 &SQL(CLOSE SWARHRTHR1006Cursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(fetch SWARHRTHR1006Cursor INTO :ANAAnaesthetistDR,:CTPCPDesc,:ANAMethod,:ANMETDesc,:AnaCount,:EmergAnaCount,:ElectAnaCount,:PrivateAnaCount,:PublicAnaCount,:YAnaCount,:YEmergAnaCount,:YElectAnaCount,:YPrivateAnaCount,:YPublicAnaCount)
 if SQLCODE '= 0 set END = 1
 q
 
FormatDates
 //s PAADMAdmDate=..ConvertDateToODBC(PAADMAdmDate)
 //s PAADMEstimDischargeDate=..ConvertDateToODBC(PAADMEstimDischargeDate)
 q
FormatTimes
 //s PAADMAdmTime=..ConvertTimeToODBC(PAADMAdmTime)
 q
]]></Implementation>
</Method>

<Method name="SWARHRTHR1006QueryFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[

 New repid,ind

 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRTHR1006Query">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Library.String,DateFrom:%Date,DateTo:%Date</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="ANAAnaesthetistDR:%Library.Integer,CTPCPDesc:%Library.String,ANAMethod:%Library.Integer,ANMETDesc:%Library.String,AnaCount:%Library.Integer,EmergAnaCount:%Library.Integer,ElectAnaCount:%Library.Integer,PrivateAnaCount:%Library.Integer,PublicAnaCount:%Library.Integer,YAnaCount:%Library.Integer,YEmergAnaCount:%Library.Integer,YElectAnaCount:%Library.Integer,YPrivateAnaCount:%Library.Integer,YPublicAnaCount:%Library.Integer"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
