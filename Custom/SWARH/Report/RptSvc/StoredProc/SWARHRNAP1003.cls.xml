<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRNAP1003">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARHRNAP1003
* Report Description: Admissions and Referrals
* Menu Caption: 
* Initial release: 
* Developer: Michael Welsh
* Modified: 2015/09/17 - Ross Gladman - Added support for multiple specialties & programs
* Modified: 2016/09/01 - PD Hoang - Excluded cancelled episodes
**************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRNAP1003.xml#1 $</Default>
</Parameter>

<Method name="SWARHRNAP1003Close">
<Description>
Location and Revision of this file in Perforce (Auto-updating)
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRNAP1003Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer,DateFrom:%Date,DateTo:%Date,Specialty:%String,Program:%String,Clinician:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
		   
 New repid,ind

 Set repid=$I(^CacheTemp("TRAK"))
 
 New PAADMRowID,EpisodeNo,URNo,Surname,GivenName,MidName,Street,City,PostCode,PhoneH,AdmDate,RefDate,SpecialtyDR,SpecialtyCode,SpecialtyDesc,ProgramDR,ProgramCode,ProgramDesc,RefSourceDR
 	,RefSourceCode,RefSourceDesc,RefClinicDR,RefClinicCode,RefClinicDesc,RefDocListDR,RefDocListCode,RefDocListDesc,RefExpDate,RefPeriodDR
 	,RefPeriodCode,RefPeriodDesc,RefStatusDR,RefStatusCode,RefStatusDesc,RefPriorityDR,RefPriorityCode,RefPriorityDesc,RefType,RefTypeCode
 	,RefTypeDesc,VisitStatus,ClinicianDR,ClinicianCode,ClinicianDesc,RefLetterDate,RefReceivedDate,WLPDesc,WLPCode,WLPRowID
 Set (PAADMRowID,EpisodeNo,URNo,Surname,GivenName,MidName,Street,City,PostCode,PhoneH,AdmDate,RefDate,SpecialtyCode,SpecialtyDesc,ProgramDR,ProgramCode,ProgramDesc,RefSourceCode,RefSourceDesc
 	,RefClinicCode,RefClinicDesc,RefDocListCode,RefDocListDesc,RefExpDate,RefPeriodCode,RefPeriodDesc,RefStatusCode,RefStatusDesc,RefPriorityCode
 	,RefPriorityDesc,RefType,RefTypeCode,RefTypeDesc,VisitStatus,ClinicianCode,ClinicianDesc,RefLetterDate,RefReceivedDate,WLPDesc,WLPCode,WLPRowID) = ""
 Set (SpecialtyDR,RefSourceDR,RefClinicDR,RefDocListDR,RefPeriodDR,RefStatusDR,RefPriorityDR,ClinicianDR)=0
 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)

 &SQL(DECLARE SWARHRNAP1003 CURSOR FOR
 	SELECT
 		     adm.PAADM_RowID as PAADMRowID
        ,adm.PAADM_ADMNo AS EpisodeNo
        ,adm.PAADM_PAPMI_DR->PAPMI_No AS URNo
        ,adm.PAADM_PAPMI_DR->PAPMI_Name AS Surname
        ,adm.PAADM_PAPMI_DR->PAPMI_Name2 AS GivenName
        ,adm.PAADM_PAPMI_DR->PAPMI_Name3 AS MidName
        ,adm.PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_StName AS Street
        ,adm.PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_Zip_DR->CTZIP_Desc AS City
        ,adm.PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_Zip_DR->CTZIP_Code AS PostCode
        ,adm.PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_TelH AS PhoneH
        ,adm.PAADM_AdmDate AS AdmDate
        ,adm.PAADM_RefDate AS RefDate
        ,adm.PAADM_DepCode_DR->CTLOC_RowID AS SpecialtyDR
        ,adm.PAADM_DepCode_DR->CTLOC_Code AS SpecialtyCode
        ,adm.PAADM_DepCode_DR->CTLOC_Desc AS SpecialtyDesc
        ,adm.PAADM_PAAdm2_DR->PAADM2_NFMICategDepart_DR->DEP_RowID AS ProgramDR
        ,adm.PAADM_PAAdm2_DR->PAADM2_NFMICategDepart_DR->DEP_Code AS ProgramCode
        ,adm.PAADM_PAAdm2_DR->PAADM2_NFMICategDepart_DR->DEP_Desc AS ProgramDesc
        ,adm.PAADM_SourceOfAttend_DR AS RefSourceDR
        ,adm.PAADM_SourceOfAttend_DR->ATTEND_Code AS RefSourceCode
        ,adm.PAADM_SourceOfAttend_DR->ATTEND_Desc AS RefSourceDesc
        ,adm.PAADM_RefDocClinic_DR->CLN_Clinic_DR AS RefClinicDR
        ,adm.PAADM_RefDocClinic_DR->CLN_Clinic_DR->CLN_Code AS RefClinicCode
        ,adm.PAADM_RefDocClinic_DR->CLN_Clinic_DR->CLN_Desc AS RefClinicDesc
        ,adm.PAADM_RefDocList_DR AS RefDocListDR
        ,adm.PAADM_RefDocList_DR->REFD_Code AS RefDocListCode
        ,adm.PAADM_RefDocList_DR->REFD_Desc AS RefDocListDesc
        ,adm.PAADM_RefExpiryDate AS RefExpDate
        ,adm.PAADM_RefPeriod_DR AS RefPeriodDR
        ,adm.PAADM_RefPeriod_DR->REFPER_Code AS RefPeriodCode
        ,adm.PAADM_RefPeriod_DR->REFPER_Desc AS RefPeriodDesc
        ,adm.PAADM_RefStat_DR AS RefStatusDR
        ,adm.PAADM_RefStat_DR->RST_Code AS RefStatusCode
        ,adm.PAADM_RefStat_DR->RST_Desc AS RefStatusDesc
        ,adm.PAADM_ReferralPriority_DR AS RefPriorityDR
        ,adm.PAADM_ReferralPriority_DR->REFPRI_Code AS RefPriorityCode
        ,adm.PAADM_ReferralPriority_DR->REFPRI_Desc AS RefPriorityDesc
        ,adm.PAADM_ReferralType AS RefType
        ,adm.PAADM_ReferralType->REFT_Code AS RefTypeCode
        ,adm.PAADM_ReferralType->REFT_Desc AS RefTypeDesc
        ,adm.PAADM_VisitStatus AS VisitStatus
        ,adm.PAADM_AdmDocCodeDR AS ClinicianDR
        ,adm.PAADM_AdmDocCodeDR->CTPCP_Code AS ClinicianCode
        ,adm.PAADM_AdmDocCodeDR->CTPCP_Desc AS ClinicianDesc
        ,adm.PAADM_RefDate AS RefLetterDate
        ,adm.PAADM_DateReceived AS RefReceivedDate
        ,adm.PAADM_WaitList_DR->WL_WaitListPrior_DR->WLP_Desc 
 		,adm.PAADM_WaitList_DR->WL_WaitListPrior_DR->WLP_Code 
 		,adm.PAADM_WaitList_DR->WL_WaitListPrior_DR->WLP_RowID
	FROM
        SQLUser.PA_Adm adm
	WHERE
        (adm.PAADM_Hospital_DR = :Hospital)
        AND (adm.PAADM_DateReceived BETWEEN :DateFrom AND :DateTo)	
        -- AND (adm.PAADM_DepCode_DR->CTLOC_RowID = :Specialty OR (:Specialty IS NULL)) -- Single Specialty Only
        AND (({fn CONCAT( ',', {fn CONCAT((:Specialty),',')})} [ {fn CONCAT( ',', {fn CONCAT((adm.PAADM_DepCode_DR->CTLOC_RowID),',')})}) OR (:Specialty IS NULL))  -- Multiple Specialties
        
		-- AND (adm.PAADM_PAADM2_DR->PAADM2_NFMICategDepart_DR->DEP_RowID = :Program OR (:Program IS NULL)) -- Single Program Only
		AND (({fn CONCAT( ',', {fn CONCAT((:Program),',')})} [ {fn CONCAT( ',', {fn CONCAT((adm.PAADM_PAADM2_DR->PAADM2_NFMICategDepart_DR->DEP_RowID),',')})}) OR (:Program IS NULL)) -- Multiple Programs
		
		AND (adm.PAADM_AdmDocCodeDR->CTPCP_RowId = :Clinician OR (:Clinician IS NULL))
		AND (adm.PAADM_Type = 'O') -- Outpatient
		AND (adm.PAADM_VisitStatus != 'C') -- Excludes cancelled episodes
    )
                
 &SQL(OPEN SWARHRNAP1003)
 
 d FetchRow //Fetch first row
  
 while END=0 {
  	 s AdmDate = ..GetOPAdmDate(PAADMRowID)
	 d FormatDates, FormatTimes, FormatStrings
  	 s sort = ind
	 s ^CacheTemp("TRAK",repid,sort)=$LB(EpisodeNo,URNo,Surname,GivenName,MidName,Street,City,PostCode,PhoneH,AdmDate,RefDate,SpecialtyDR,SpecialtyCode,SpecialtyDesc,ProgramDR
	 	,ProgramCode,ProgramDesc,RefSourceDR,RefSourceCode,RefSourceDesc,RefClinicDR,RefClinicCode,RefClinicDesc,RefDocListDR,RefDocListCode
	 	,RefDocListDesc,RefExpDate,RefPeriodDR,RefPeriodCode,RefPeriodDesc,RefStatusDR,RefStatusCode,RefStatusDesc,RefPriorityDR,RefPriorityCode
	 	,RefPriorityDesc,RefType,RefTypeCode,RefTypeDesc,VisitStatus,ClinicianDR,ClinicianCode,ClinicianDesc,RefLetterDate,RefReceivedDate,WLPDesc,WLPCode,WLPRowID)
	 s ind=ind+1
 	 d FetchRow //Fetch next row
 }

 &SQL(CLOSE SWARHRNAP1003)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(FETCH SWARHRNAP1003 INTO :PAADMRowID,:EpisodeNo,:URNo,:Surname,:GivenName,:MidName,:Street,:City,:PostCode,:PhoneH,:AdmDate,:RefDate,:SpecialtyDR,:SpecialtyCode,:SpecialtyDesc,:ProgramDR
 	,:ProgramCode,:ProgramDesc,:RefSourceDR,:RefSourceCode,:RefSourceDesc,:RefClinicDR,:RefClinicCode,:RefClinicDesc,:RefDocListDR
 	,:RefDocListCode,:RefDocListDesc,:RefExpDate,:RefPeriodDR,:RefPeriodCode,:RefPeriodDesc,:RefStatusDR,:RefStatusCode,:RefStatusDesc
 	,:RefPriorityDR,:RefPriorityCode,:RefPriorityDesc,:RefType,:RefTypeCode,:RefTypeDesc,:VisitStatus,:ClinicianDR,:ClinicianCode,:ClinicianDesc,:RefLetterDate,:RefReceivedDate,:WLPDesc,:WLPCode,:WLPRowID)
 if SQLCODE '= 0 set END = 1
 q
 
FormatDates
 s AdmDate =..ConvertDateToODBC(AdmDate)
 s RefDate =..ConvertDateToODBC(RefDate)
 s RefExpDate =..ConvertDateToODBC(RefExpDate)
 s RefLetterDate =..ConvertDateToODBC(RefLetterDate)
 s RefReceivedDate =..ConvertDateToODBC(RefReceivedDate)
 q
 
FormatTimes
 //s Time=$ZT(Time,2)
 q
 
FormatStrings // Cleanup specified strings
 s Surname = $ZCONVERT(Surname,"U")
 s GivenName = $ZCONVERT(GivenName,"W")
 s MidName = $ZCONVERT(MidName,"W")
 s Street = $ZCONVERT($ZSTRIP(Street,"*C"),"W")
 s City = $ZCONVERT($ZSTRIP(City,"*C"),"W")
 
 q
]]></Implementation>
</Method>

<Method name="SWARHRNAP1003Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row 
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle 
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRNAP1003">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer,DateFrom:%Date,DateTo:%Date,Specialty:%String,Program:%String,Clinician:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="EpisodeNo:%String,URNo:%String,Surname:%String,GivenName:%String,MidName:%String,Street:%String,City:%String,PostCode:%String,PhoneH:%String,AdmDate:%Date,RefDate:%Date,SpecialtyDR:%Integer,SpecialtyCode:%String,SpecialtyDesc:%String,ProgramDR:%String,ProgramCode:%String,ProgramDesc:%String,RefSourceDR:%Integer,RefSourceCode:%String,RefSourceDesc:%String,RefClinicDR:%Integer,RefClinicCode:%String,RefClinicDesc:%String,RefDocListDR:%Integer,RefDocListCode:%String,RefDocListDesc:%String,RefExpDate:%Date,RefPeriodDR:%Integer,RefPeriodCode:%String,RefPeriodDesc:%String,RefStatusDR:%Integer,RefStatusCode:%String,RefStatusDesc:%String,RefPriorityDR:%Integer,RefPriorityCode:%String,RefPriorityDesc:%String,RefType:%String,RefTypeCode:%String,RefTypeDesc:%String,VisitStatus:%String,ClinicianDR:%Integer,ClinicianCode:%String,ClinicianDesc:%String,RefLetterDate:%Date,RefReceivedDate:%Date,WLPDesc:%String,WLPCode:%String,WLPRowID:%Integer"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
