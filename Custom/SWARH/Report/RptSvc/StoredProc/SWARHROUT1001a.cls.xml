<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHROUT1001a">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARHROUT1001a
* Report Description: O/P Picking List subreport called by SWARHROUT1001
* Initial release: 
* Developer: Phuong-Dung HOANG
**************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHROUT1001a.xml#1 $</Default>
</Parameter>

<Method name="SWARHROUT1001aQueryClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHROUT1001aQueryExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,APPTRowId:%String,ASDate:%Date,PAPMIRowId:%Library.Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 New Number,String,Date,Time,c,n

 New CTLOCDescOther,CTLOCCodeOther,ASDateOther,ASSessStartTimeOther,APPTStatusOther
 s (CTLOCDescOther,CTLOCCodeOther,ASDateOther,ASSessStartTimeOther,APPTStatusOther)=""

 s ind=1

 //Convert ODBC dates to cache format
 s ASDate=..ConvertDateToCache(ASDate)

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 &SQL(DECLARE SWARHROUT1001aCursor CURSOR FOR 
 SELECT
    rba1.APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR->CTLOC_Desc as OtherApptClinicDesc,
    rba1.APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR->CTLOC_Code as OtherApptClinicCode,
    rba1.APPT_AS_ParRef->AS_Date as OtherApptDate,
    rba1.APPT_AS_ParRef->AS_SessStartTime as OtherApptTime,
    rba1.APPT_Status as OtherApptStatus
 FROM SQLUser.RB_Appointment rba1 INNER JOIN SQLUser.RB_ApptSchedule rbas1 ON (rba1.APPT_AS_ParRef = rbas1.AS_RowId)
 WHERE (rba1.APPT_PAPMI_DR=:PAPMIRowId and rba1.APPT_RowId != :APPTRowId  and rbas1.AS_Date=:ASDate and rba1.APPT_Status ='P'))

 &SQL(OPEN SWARHROUT1001aCursor)

 //FETCH FIRST ROW
 &sql(fetch SWARHROUT1001aCursor INTO :CTLOCDescOther,:CTLOCCodeOther,:ASDateOther,:ASSessStartTimeOther,:APPTStatusOther)
  
 while 'SQLCODE{
	 
 d FormatDates
  
 s sort = ind		// don't sort - uncomment this line if you've sorted in the query
 //s sort = $ZCVT(HOSPDesc,"U")_" "_$ZCVT(WARDDesc,"U")_" "_$ZCVT(ROOMCode,"U")_" "_$ZCVT(BEDCode,"U")_" "_$ZCVT(CTRLGDesc,"U")_" "_$ZCVT(PAPERName,"U")_" "_$ZCVT(PAPERName2,"U")_" "_$ZCVT(PAPERName3,"U")_ind
 
 s ^CacheTemp("TRAK",repid,sort)=$LB(CTLOCDescOther,CTLOCCodeOther,ASDateOther,ASSessStartTimeOther,APPTStatusOther)
 s ind=ind+1
 
 //fetch rows
 &sql(fetch SWARHROUT1001aCursor INTO :CTLOCDescOther,:CTLOCCodeOther,:ASDateOther,:ASSessStartTimeOther,:APPTStatusOther)}

 &SQL(CLOSE SWARHROUT1001aCursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK
 
FormatDates
 s ASDateOther=..ConvertDateToODBC(ASDateOther)
 s ASSessStartTimeOther=..ConvertTimeToODBC(ASSessStartTimeOther)
 Quit
]]></Implementation>
</Method>

<Method name="SWARHROUT1001aQueryFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHROUT1001aQuery">
<Type>%Library.Query</Type>
<FormalSpec>APPTRowId:%String,ASDate:%Date,PAPMIRowId:%Library.Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="CTLOCDescOther:%String,CTLOCCodeOther:%String,ASDateOther:%Date,ASSessStartTimeOther:%String,APPTStatusOther:%String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
