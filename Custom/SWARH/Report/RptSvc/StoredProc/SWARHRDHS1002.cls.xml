<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRDHS1002">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARHRDHS1002
* Report Description: AIMS S2 305
* Menu Caption: AIMS S2 305
* Initial release: 
* Developer: Jayson Sagnol
* 
**************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRDHS1002.xml#1 $</Default>
</Parameter>

<Method name="SWARHRDHS1002Close">
<Description>
Location and Revision of this file in Perforce (Auto-updating)
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRDHS1002Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer,DateFrom:%Date,DateTo:%Date]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
		   
 New repid,ind

 Set repid=$I(^CacheTemp("TRAK"))
 
 New ENQRowId,ENQPAPERDR,ENQDate,ENQLocationDR,ENQRowID,ENQGovernDepartDR,DEPDesc,DEPCode,ENQLocationDR,CTLOCCode,CTLOCDesc,ENQRBEventDR,EVName,EVNumber,ENQContDelivModeDR,ENQContDelivSettingDR,SUBCode,MedicalStream,Payor
 Set (ENQDate,ENQGovernDepartDR,DEPDesc,DEPCode,CTLOCCode,CTLOCDesc,EVName,EVNumber,SUBCode,Payor) = ""
 Set (ENQRowId,ENQPAPERDR,ENQLocationDR,ENQRBEventDR,ENQContDelivModeDR,ENQContDelivSettingDR)=0
 
 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)
 
 //s CustomKPIFrom ="AdmDate"
 //s CustomKPITo = "DiscghDate"

 &SQL(DECLARE SWARHRDHS1002 CURSOR FOR
		SELECT
				ENQ_RowId,
				ENQ_PAPER_DR,
				ENQ_Date,
				ENQ_GovernDepart_DR,
				ENQ_GovernDepart_DR->DEP_Desc,
				ENQ_GovernDepart_DR->DEP_Code,
				ENQ_Location_DR,
				ENQ_Location_DR->CTLOC_Code,
				ENQ_Location_DR->CTLOC_Desc,
				ENQ_RBEvent_DR,
				ENQ_RBEvent_DR->EV_Name,
				ENQ_RBEvent_DR->EV_Number,
				ENQ_ContDelivMode_DR,
				ENQ_ContDelivSetting_DR,
				ENQ_GovernDepart_DR->DEP_ParRef->NFMI_GovSubCateg_DR->SUB_Code
		FROM
				SQLUser.PA_EnquiryContact
		WHERE
				ENQ_Date Between :DateFrom AND :DateTo
				AND ENQ_Hospital_DR =:Hospital
				AND ENQ_AuxInsTYPE_DR->AUXIT_Code<>'MBSF' --Exclude MBS Funded
				AND (ENQ_ContClientPresStat_DR <> 6 OR ENQ_ContClientPresStat_DR IS NULL) 
				AND (ENQ_InpatientFlag = 'N' OR ENQ_InpatientFlag IS NULL) 
		GROUP BY ENQ_PAPER_DR, ENQ_Date, ENQ_GovernDepart_DR, ENQ_ContDelivMode_DR, ENQ_ContDelivSetting_DR
    )
                
 &SQL(OPEN SWARHRDHS1002)
 
 d FetchRow //Fetch first row
  
 while END=0 {
	 d FormatDates,FormatTimes,FormatAddress
  	 s sort = ind
	 s ^CacheTemp("TRAK",repid,sort)=$LB(ENQRowId,ENQPAPERDR,ENQDate,ENQGovernDepartDR,DEPDesc,DEPCode,ENQLocationDR,CTLOCCode,CTLOCDesc,ENQRBEventDR,EVName,EVNumber,ENQContDelivModeDR,ENQContDelivSettingDR,SUBCode,MedicalStream,Payor)
	 s MedicalStream=0
	 s ind=ind+1
 	 d FetchRow //Fetch next row
 }

 &SQL(CLOSE SWARHRDHS1002)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(FETCH SWARHRDHS1002 INTO :ENQRowId,:ENQPAPERDR,:ENQDate,:ENQGovernDepartDR,:DEPDesc,:DEPCode,:ENQLocationDR,:CTLOCCode,:CTLOCDesc,:ENQRBEventDR,:EVName,:EVNumber,:ENQContDelivModeDR,:ENQContDelivSettingDR,:SUBCode)
 
 if ENQRowId {s Payor = ..GetPrimaryInsPayorGroupForContact(ENQRowId)}
 s MedicalStream=..SetMedicalStreamProgram(ENQPAPERDR,ENQDate,ENQGovernDepartDR,ENQContDelivModeDR,ENQContDelivSettingDR)
 if SQLCODE '= 0 set END = 1
 q
 
FormatDates
 s ENQDate = ..ConvertDateToODBC(ENQDate) 
 q
  
FormatTimes
 // s ENQTime=$ZT(ENQTime,2)
 q
 
FormatAddress
 //s PAPERStName=$ZSTRIP(PAPERStName,"*C")
 q
]]></Implementation>
</Method>

<Method name="SWARHRDHS1002Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row 
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle 
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRDHS1002">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer,DateFrom:%Date,DateTo:%Date</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="ENQRowId:%Integer,ENQPAPERDR:%Integer,ENQDate:%String,ENQGovernDepartDR:%String,DEPDesc:%String,DEPCode:%String,ENQLocationDR:%Integer,CTLOCCode:%String,CTLOCDesc:%String,ENQRBEventDR:%Integer,EVName:%String,EVNumber:%String,ENQContDelivModeDR:%Integer,ENQContDelivSettingDR:%Integer,SUBCode:%String,MedicalStream:%Integer,Payor:%String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
