<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRNAP1012">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARHRNAP1012
* Report Description: Last Assessment
* Menu Caption: Last Assessment
* Initial release: 01/04/2014
* Developer: Michael Welsh
* Modified: 29/04/2014 - MW - Changed Questionnaire from QAUXXSCTLCA to QAUXXSCTFAS.
* 
**************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRNAP1012.xml#1 $</Default>
</Parameter>

<Method name="SWARHRNAP1012Close">
<Description>
Location and Revision of this file in Perforce (Auto-updating)
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRNAP1012Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer,Specialty:%Integer,Program:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
		   
 New repid,ind

 Set repid=$I(^CacheTemp("TRAK"))
 
 New URNo,Surname,GivenName,MidName,AdmDate,SpecialtyDR,SpecialtyCode,SpecialtyDesc,CategDR,CategCode,CategDesc,fasDate
 Set (URNo,Surname,GivenName,MidName,AdmDate,SpecialtyCode,SpecialtyDesc,ProgramDR,ProgramCode,ProgramDesc,fasDate) = ""
 Set (SpecialtyDR)=0
 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 //Convert ODBC dates to cache format
 //s DateFrom=$$intdate^SSUTIL4(DateFrom)
 //s DateTo=$$intdate^SSUTIL4(DateTo)

 &SQL(DECLARE SWARHRNAP1012 CURSOR FOR
 	SELECT
        adm.PAADM_PAPMI_DR->PAPMI_No AS URNo
        ,adm.PAADM_PAPMI_DR->PAPMI_Name AS Surname
        ,adm.PAADM_PAPMI_DR->PAPMI_Name2 AS GivenName
        ,adm.PAADM_PAPMI_DR->PAPMI_Name3 AS MidName
        ,adm.PAADM_AdmDate AS AdmDate
        ,adm.PAADM_DepCode_DR AS SpecialtyDR
        ,adm.PAADM_DepCode_DR->CTLOC_Code AS SpecialtyCode
        ,adm.PAADM_DepCode_DR->CTLOC_Desc AS SpecialtyDesc
        ,adm.PAADM_PAAdm2_DR->PAADM2_NFMICategDepart_DR->DEP_RowID AS ProgramDR
        ,adm.PAADM_PAAdm2_DR->PAADM2_NFMICategDepart_DR->DEP_Code AS ProgramCode
        ,adm.PAADM_PAAdm2_DR->PAADM2_NFMICategDepart_DR->DEP_Desc AS ProgramDesc
        ,fas.fasDate
        FROM
        SQLUser.PA_Adm adm
                LEFT OUTER JOIN
                        (
                                SELECT QUESPAAdmDR,MAX(Q28) AS fasDate
                                FROM questionnaire.QAUXXSCTFAS GROUP BY QUESPAAdmDR
                        )
                        AS fas
                        ON fas.QUESPAAdmDR = adm.PAADM_RowID
    WHERE
        (adm.PAADM_Hospital_DR = :Hospital)
        AND (adm.PAADM_DepCode_DR = :Specialty OR (:Specialty IS NULL))
        AND (adm.PAADM_PAADM2_DR->PAADM2_NFMICategDepart_DR->DEP_RowID = :Program OR (:Program IS NULL))
        AND (adm.PAADM_Type = 'O') -- Outpatient
        AND (adm.PAADM_VisitStatus = 'A') --Admitted
        
    )
                
 &SQL(OPEN SWARHRNAP1012)
 
 d FetchRow //Fetch first row
  
 while END=0 {
  
	 d FormatDates, FormatTimes, FormatStrings
  	 s sort = ind
	 s ^CacheTemp("TRAK",repid,sort)=$LB(URNo,Surname,GivenName,MidName,AdmDate,SpecialtyDR,SpecialtyCode,SpecialtyDesc,ProgramDR,ProgramCode,ProgramDesc,fasDate)
	 s ind=ind+1
 	 d FetchRow //Fetch next row
 }

 &SQL(CLOSE SWARHRNAP1012)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(FETCH SWARHRNAP1012 INTO :URNo,:Surname,:GivenName,:MidName,:AdmDate,:SpecialtyDR,:SpecialtyCode,:SpecialtyDesc,:ProgramDR,:ProgramCode,:ProgramDesc,:fasDate)
 if SQLCODE '= 0 set END = 1
 q
 
FormatDates
 s AdmDate=..ConvertDateToODBC(AdmDate)
 s fasDate=..ConvertDateToODBC(fasDate)
 q
 
FormatTimes
 //s Time=$ZT(Time,2)
 q
 
FormatStrings // Cleanup specified strings
 s Surname = $ZCONVERT(Surname,"W") 
 s GivenName = $ZCONVERT(GivenName,"W")
 s MidName = $ZCONVERT(MidName,"W")
 q
]]></Implementation>
</Method>

<Method name="SWARHRNAP1012Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row 
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle 
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRNAP1012">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer,Specialty:%Integer,Program:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="URNo:%String,Surname:%String,GivenName:%String,MidName:%String,AdmDate:%Date,SpecialtyDR:%Integer,SpecialtyCode:%String,SpecialtyDesc:%String,ProgramDR:%String,ProgramCode:%String,ProgramDesc:%String,fasDate:%Date"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
