<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRATD1044">
<Description><![CDATA[
<pre>
***************************************************************************************************************************************
* Report Code: SWARHRATD1044
* Report Description: Inpatients - Private/DVA
* Menu Caption: 
* Initial release: 
* Developer: unknown
* Report shows:Pataints who are either private or DVA
* Fields:UR,FName,Lname,ward,room,bed,plan,payor
* Modified:By David Cottrill 30-07-2014 .  Added DVA patients and Payor. 
***************************************************************************************************************************************
</pre>/// Class for SWARHRATD1044v2]]></Description>
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRATD1044.xml#1 $</Default>
</Parameter>

<Method name="SWARHRATD1044Close">
<Description>
Location and Revision of this file in Perforce (Auto-updating)
Parameter SrcVer = "$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRATD1044.xml#1 $";
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRATD1044Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 k ^zbernard	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,CARETYPCode,CARETYPDesc,WARDCode,ROOMCode,BEDCode,PAADMRowId,PAADMAdmDate,
 	PAADMEstimDischargeDate,ADMCATDesc,CTLOCDesc,SPPPDesc,Plan,Payor
 Set (PAADMRowId) = 0
 Set (PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,CARETYPCode,CARETYPDesc,WARDCode,ROOMCode,BEDCode,PAADMAdmDate,PAADMEstimDischargeDate,
 	ADMCATDesc,CTLOCDesc,SPPPDesc,Plan,Payor)=""
  
 s ind=1

 //Convert ODBC dates to cache format
 // s DateFrom=$$intdate^SSUTIL4(DateFrom)
 // s DateTo=$$intdate^SSUTIL4(DateTo)
 
 //s ^bernard("2")=(2)
 
 &sql(declare SWARHRATD1044 cursor for
 SELECT
 	ADM.PAADM_PAPMI_DR->PAPMI_No,
 	ADM.PAADM_PAPMI_DR->PAPMI_Name,
	ADM.PAADM_PAPMI_DR->PAPMI_Name2,
	ADM.PAADM_PAPMI_DR->PAPMI_Name3,
 	ADM.PAADM_MainMRADM_DR->MRADM_CareType_DR->CARETYP_Code,
 	ADM.PAADM_MainMRADM_DR->MRADM_CareType_DR->CARETYP_Desc,
 	ADM.PAADM_CurrentWard_DR->WARD_Code,
 	ADM.PAADM_CurrentRoom_DR->ROOM_Code,
 	ADM.PAADM_CurrentBed_DR->BED_Code,
  	ADM.PAADM_RowId,
 	ADM.PAADM_AdmDate,
   	ADM.PAADM_EstimDischargeDate,
 	ADM.PAADM_AdmCateg_DR->ADMCAT_Desc,
  	ADM.PAADM_DepCode_DR->CTLOC_Desc,
  	ADM.PAADM_StatePPP_DR->SPPP_Desc,
  	INS.INS_AuxInsType_DR->AUXIT_Desc as Plan,
  	INS.INS_instype_dr->INST_PayorGroup_DR->PGRP_Desc as Payor
 FROM
 	SQLUser.PA_Adm ADM left join SQLUser.PA_AdmInsurance INS on ADM.PAADM_RowID = INS.INS_ParRef
 WHERE
 	(ADM.PAADM_VisitStatus = 'A')
 	AND (ADM.PAADM_Type = 'I')
 	AND (ADM.PAADM_DischgDate IS NULL)
 	AND ((INS.INS_instype_dr->INST_PayorGroup_DR =5) OR (INS.INS_instype_dr->INST_PayorGroup_DR =1))
 	AND (ADM.PAADM_Hospital_DR = :Hospital)
 	
 )

 
 &sql(open SWARHRATD1044)
 
  //fetch first row
 &sql(fetch SWARHRATD1044 into :PAPMINo,:PAPMIName,:PAPMIName2,:PAPMIName3,:CARETYPCode,:CARETYPDesc,:WARDCode,:ROOMCode,:BEDCode,:PAADMRowId,
 	:PAADMAdmDate,:PAADMEstimDischargeDate,:ADMCATDesc,:CTLOCDesc,:SPPPDesc,:Plan,:Payor)
 

 while 'SQLCODE{
 
 d FormatDates
 //d FormatTimes

 // build the row
 Set ^CacheTemp(repid,ind)=$LB(PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,CARETYPCode,CARETYPDesc,WARDCode,ROOMCode,BEDCode,PAADMRowId,PAADMAdmDate,
 	PAADMEstimDischargeDate,ADMCATDesc,CTLOCDesc,SPPPDesc,Plan,Payor)
 s ind=ind+1
 //fetch rows
 &sql(fetch SWARHRATD1044 into :PAPMINo,:PAPMIName,:PAPMIName2,:PAPMIName3,:CARETYPCode,:CARETYPDesc,:WARDCode,:ROOMCode,:BEDCode,:PAADMRowId,
 	:PAADMAdmDate,:PAADMEstimDischargeDate,:ADMCATDesc,:CTLOCDesc,:SPPPDesc,:Plan,:Payor)
 }

 //s ^zBernard("3")=(3)
 &sql(close SWARHRATD1044)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 //s ^zBernard("4")=(4)

 Quit $$$OK


FormatDates
 // Convert the dates to ODBC date format
 If PAADMAdmDate Set PAADMAdmDate=$ZD(PAADMAdmDate,3)
 If PAADMEstimDischargeDate Set PAADMEstimDischargeDate=$ZD(PAADMEstimDischargeDate,3)
 Quit

FormatTimes
 // Convert the times to ODBC time format
 If PAADMAdmTime Set PAADMAdmTime=$ZT(PAADMAdmTime,1)
 If PAADMDischgTime Set PAADMDischgTime=$ZT(PAADMDischgTime,1)
 Quit
]]></Implementation>
</Method>

<Method name="SWARHRATD1044Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)

 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRATD1044">
<Description>
GHA List reports Stored Procedure
It expects 2 parameter of type date and will return a list of records:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time 																										</Description>
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAPMINo:%String(MAXLEN=255),PAPMIName:%String(MAXLEN=255),PAPMIName2:%String(MAXLEN=255),PAPMIName3:%String(MAXLEN=255),CARETYPCode:%String(MAXLEN=255),CARETYPDesc:%String(MAXLEN=255),WARDCode:%String(MAXLEN=255),ROOMCode:%String(MAXLEN=255),BEDCode:%String(MAXLEN=255),PAADMRowId:%Integer,PAADMAdmDate:%Date,PAADMEstimDischargeDate:%Date,ADMCATDesc:%String(MAXLEN=255),CTLOCDesc:%String(MAXLEN=255),SPPPDesc:%String(MAXLEN=255),Plan:%String(MAXLEN=255),Payor:%String(MAXLEN=255)"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
