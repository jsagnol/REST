<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRPMI1005">
<Description><![CDATA[
<pre>
***************************************************************************************************************************************
* Report Code: SWARHRPMI1005
* Report Description: Indigenous Patients 
* Menu Caption: Patients by Indigenous Status
* Initial release: 19-11-2014 Developer: David Cottrill
* Report shows: Indigenous Patients selected by Admission Type, grouped by Indigenous Status.
* Modified:
***************************************************************************************************************************************
</pre>
Class for SWARHRPMI1005 Report]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.RptSvc.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRPMI1005.xml#1 $</Default>
</Parameter>

<Method name="SWARHRPMI1005Close">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRPMI1005Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Library.Integer,DateFrom:%Date,DateTo:%Date,Admission:%Library.String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 

 New URnumber,Firstname,Lastname,Homephone,Sex,Age,Suburb,Admdate,AdmTime,Disdate,DisTime,IndigStatus,Episode,Ward,Bed,Phone,TelH,TriDate
 	,TriTime,DeptStatus,TriCat,Transfer,MRADMRowID,MRCIDCode,MRCIDDesc,IndigStatusCode,SpecialtyRowID,SpecialtyCode,SpecialtyDesc
 Set (URnumber,Firstname,Lastname,Homephone,Sex,Suburb,Admdate,AdmTime,Disdate,DisTime,IndigStatus,Episode,Ward,Bed,Phone,TelH,TriDate
 	,TriTime,DeptStatus,TriCat,Transfer,MRADMRowID,DRGCode,DRGDesc,SpecialtyCode,SpecialtyDesc)=""
 Set (SpecialtyRowID,Age,IndigStatusCode) = 0
 
 New PatID
 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 
 s DateFrom=..ConvertDateToCache(DateFrom)
 s DateTo=..ConvertDateToCache(DateTo)
 
 &sql(DECLARE Diagnose CURSOR FOR
  SELECT
 	MRDIA_ICDCode_DR->MRCID_Code,
    MRDIA_ICDCode_DR->MRCID_Desc
    INTO
    :MRCIDCode,
    :MRCIDDesc
    
 FROM
 	SQLUser.MR_Diagnos WHERE MRDIA_MRADM_ParRef = :patID
 	AND (MRDIA_DRGOrder =1 OR MRDIA_DRGOrder is null)
 )
 
 
 &SQL(DECLARE MyReportCursor CURSOR FOR 
	 SELECT
        PAADM_PAPMI_DR->PAPMI_Name2 As Firstname,
        PAADM_PAPMI_DR->PAPMI_Name As Lastname,
        PAADM_PAPMI_DR->PAPMI_No As URNumber,
        PAADM_ADMNo As Episode,
        PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_AgeYr As Age,
        PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_CityCode_DR->CTCIT_Desc As Suburb,
        PAADM_CurrentWard_DR->WARD_Code As Ward,
        PAADM_CurrentBed_DR->BED_Code As Bed,
        PAADM_AdmDate As AdmDate,
        PAADM_AdmTime As AdmTime,
        PAADM_DischgDate As DisDate,
        PAADM_DischgTime As DisTime,
        PAADM_PAPMI_DR->PAPMI_Sex_DR->CTSEX_Code As Sex,
        PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_TelH As TelH, 
        PAADM_PAPMI_DR->PAPMI_IndigStat_DR->INDST_Desc As IndigStatus,
        PAADM_TriageDate As TriDate,
		PAADM_TriageTime As TriTime,
		PAADM_MainMRADM_DR->MRADM_DischClassif_DR->DSCL_Desc As DeptStatus,
		PAADM_Priority_DR->CTACU_Desc As TriCat,
		PAADM_MainMRADM_DR->MRADM_TransferMeans_DR->TRANSM_Desc as Transfer,
		PAADM_MainMRADM_DR->MRADM_RowID As MRADMRowID,
		PAADM_PAPMI_DR->PAPMI_IndigStat_DR->INDST_Code As IndigStatusCode,
		PAADM_DepCode_DR->CTLOC_RowID AS SpecialtyRowID,
        PAADM_DepCode_DR->CTLOC_Code AS SpecialtyCode,
        PAADM_DepCode_DR->CTLOC_Desc AS SpecialtyDesc 
		
FROM    SQLUser.PA_Adm

WHERE   PAADM_Hospital_DR = :Hospital
  AND   PAADM_Type= :Admission
  AND   (PAADM_AdmDate >= :DateFrom)
  AND   (PAADM_AdmDate <= :DateTo)
  AND   (PAADM_PAPMI_DR->PAPMI_IndigStat_DR->INDST_Code IN (5,6,7))
  AND 	PAADM_VisitStatus<>'C'
  ORDER by PAADM_PAPMI_DR->PAPMI_No
  )
 &SQL(OPEN MyReportCursor)
 
 //FETCH FIRST ROW
 d FetchRow
  
 while END=0 {
  
	 d FormatDates
  	 d FormatTimes  	 
  	 
	 s sort = ind
	 &SQL(OPEN Diagnose)
 	 s end2=0
 	 while end2=0
 	 {
	 	&SQL(FETCH Diagnose)
		//Build Row
		s ^CacheTemp("TRAK",repid,sort)=$LB(FirstName,LastName,URNumber,Episode,Age,Suburb,Ward,Bed,AdmDate,AdmTime,DisDate,DisTime,Sex
			,TelH,IndigStatus,TriDate,TriTime,DeptStatus,TriCat,Transfer,MRADMRowID,MRCIDCode,MRCIDDesc,IndigStatusCode
			,SpecialtyRowID,SpecialtyCode,SpecialtyDesc)
		s ind=ind+1
		if SQLCODE '= 0 set end2 = 1
 	 }
	 &SQL(CLOSE Diagnose) 	 
 
	 //fetch rows
	 d FetchRow
 }

 &SQL(CLOSE MyReportCursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRow
 
 &sql(FETCH MyReportCursor INTO :FirstName,:LastName,:URNumber,:Episode,:Age,:Suburb,:Ward,:Bed,:AdmDate,:AdmTime,:DisDate,:DisTime,:Sex
 	,:TelH,:IndigStatus,:TriDate,:TriTime,:DeptStatus,:TriCat,:Transfer,:MRADMRowID,:IndigStatusCode
 	,:SpecialtyRowID,:SpecialtyCode,:SpecialtyDesc)
 
 s patID=MRADMRowID
 
 if SQLCODE '= 0 set END = 1
 q
 
FormatDates
 s AdmDate=..ConvertDateToODBC(AdmDate)
 s DisDate=..ConvertDateToODBC(DisDate)
 s TriDate=..ConvertDateToODBC(TriDate)
 q
 
FormatTimes
 s AdmTime=..ConvertTimeToHHMM(AdmTime)
 s DisTime=..ConvertTimeToHHMM(DisTime)
 s TriTime=..ConvertTimeToHHMM(TriTime)
 q
]]></Implementation>
</Method>

<Method name="SWARHRPMI1005Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRPMI1005">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Library.Integer,DateFrom:%Date,DateTo:%Date,Admission:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="FirstName:%Library.String, LastName:%Library.String, URNumber:%Library.String, Episode:%Library.String, Age:%Library.Integer, Suburb:%Library.String, Ward:%Library.String, Bed:%Library.String, AdmDate:%Library.Date, AdmTime:%Library.String, DisDate:%Library.Date, DisTime:%Library.String, Sex:%Library.String, TelH:%Library.String, IndigStatus:%Library.String, TriDate:%Library.Date, TriTime:%Library.String, DeptStatus:%Library.String, TriCat:%Library.String, Transfer:%Library.String, MRADMRowID:%Library.String, MRCIDCode:%Library.String, MRCIDDesc:%Library.String, IndigStatusCode:%Library.Integer,SpecialtyRowID:%Library.Integer,SpecialtyCode:%Library.String,SpecialtyDesc:%Library.String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
