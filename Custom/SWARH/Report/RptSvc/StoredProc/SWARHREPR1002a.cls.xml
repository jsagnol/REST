<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHREPR1002a">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARHREPR1002a
* Report Description: Antibiotic Utilisation Review - All data for Graph
* Menu Caption: Antibiotic Utilisation Review 
* Initial release: 1
* Developer: Sharon
* Modified: 26rd October 2013
* 
**************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.RptSvc.StoredProc.Abstract</Super>
<TimeCreated>63122,61050.055891</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHREPR1002a.xml#1 $</Default>
</Parameter>

<Method name="SWARHREPR1002aClose">
<Description>
Location and Revision of this file in Perforce (Auto-updating)
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHREPR1002aExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Library.Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
  
 New QDateOfAudit, QDoctor, CTPCPTextOne, CTPCPCode, CTPCPDesc, CQAntibioticGuildlines,  Compliant
 Set (QDateOfAudit,  QDoctor, CTPCPTextOne, CTPCPCode, CTPCPDesc, CQAntibioticGuildlines, Compliant)=""


 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 // * NOTE: DO NOT DO "*W" ZSTRIP FROM DATES AS IT REMOVES THE WHITESPACE BETWEEN THE DATE AND TIME AND THIS BREAKS THE QUERY! */
 //Convert ODBC dates to cache format
 
 &SQL(DECLARE SWARHREPR1002aCursor CURSOR FOR 
	SELECT
		  QDateOfAudit
		  , QDoctor
  		  , CTPCP_TextOne,CTPCP_Code,CTPCP_Desc
  		  , CQAntibioticGuildlines
  		  , Count(CQAntibioticGuildlines) As Compliant
	FROM
	    Sqluser.questionnaire.QAUR LEFT OUTER JOIN Sqluser.CT_CareProv ON QDoctor = CTPCP_RowID
	WHERE
		QUESPAAdmDR->PAADM_Hospital_DR = :Hospital
    group by QDoctor,QDateOfAudit,CQAntibioticGuildlines 	
)
 &SQL(OPEN SWARHREPR1002aCursor)
 
 //FETCH FIRST ROW
 d FetchRow
 
  
 while END=0 {
  
	 d FormatDates
  	 d FormatTimes
  	 
	 s sort = ind		// don't sort - uncomment this line if you've sorted in the query
 
	 s ^CacheTemp("TRAK",repid,sort)=$LB(QDateOfAudit, QDoctor, CTPCPTextOne, CTPCPCode, CTPCPDesc, CQAntibioticGuildlines, Compliant)
	 s ind=ind+1
 
	 //fetch rows
	 d FetchRow

 }

 &SQL(CLOSE SWARHREPR1002aCursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK
 

FetchRow
 &sql(FETCH SWARHREPR1002aCursor INTO :QDateOfAudit,:QDoctor, :CTPCPTextOne, :CTPCPCode, :CTPCPDesc, :CQAntibioticGuildlines,  :Compliant)
 if SQLCODE '= 0 set END = 1
 q
 
FormatDates
 s QDateOfAudit=..ConvertDateToODBC(QDateOfAudit)
 q
 
FormatTimes

 
 q
]]></Implementation>
</Method>

<Method name="SWARHREPR1002aFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHREPR1002a">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Library.Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="QDateOfAudit:%Library.Date, QDoctor:%Library.Integer, CTPCPTextOne:%Library.String, CTPCPCode:%Library.String, CTPCPDesc:%Library.String, CQAntibioticGuildlines:%Library.String, Compliant:%Library.Integer"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
