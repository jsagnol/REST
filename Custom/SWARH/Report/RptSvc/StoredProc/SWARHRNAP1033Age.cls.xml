<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRNAP1033Age">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARHRNAP1033Age
* Report Description: Age Demographic Data for NAP Contacts
* Menu Caption: Age Demographic Data with Drilldown
* Initial release:14/10/2016 Developer: Michael Welsh
* Modified: 
* 
**************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id$</Default>
</Parameter>

<Method name="SWARHRNAP1033Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer,DateFrom:%Date,DateTo:%Date,Range:%Integer,Specialty:%String,Program:%String,Clinician:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$INCREMENT(^CacheTemp(..#CACHETEMPSUBSCRIPT))
 
 New ContactRowID,ContactDate,ContactLocDR,ContactLocCode,ContactLocDesc,GovSubCategRowID,GovSubCategCode,GovernDepartDR,GovernDepartCode
 	,GovernDepartDesc,CareProvDr,CareProvCode,CareProvDesc,RegionCode,RegionDesc,PostCode,City,URNo,ContactDuration,IndirectTime
 	,TravelTime,Surname,GivenName,ContactTime,AgeAtContact,Sex,IndigStatCode,IndigStatDesc,BirthCOCode,BirthCountry,PrefLangCode
 	,PrefLanguage,LivingArrCode,LivingArrangment,AccomSettCode,AccomSetting,CarerAvailCode,CarerAvailDesc,PensTypeCode,PensTypeDesc,URCount,TotalTime
 	,AgeRangeSort,AgeRange
 
 Set (ContactRowID,ContactDate,ContactLocDR,ContactLocCode,ContactLocDesc,GovSubCategRowID,GovSubCategCode,GovernDepartDR,GovernDepartCode
 	,GovernDepartDesc,CareProvDr,CareProvCode,CareProvDesc,RegionCode,RegionDesc,PostCode,City,URNo,ContactDuration,IndirectTime
 	,TravelTime,Surname,GivenName,ContactTime,AgeAtContact,Sex,IndigStatCode,IndigStatDesc,BirthCOCode,BirthCountry,PrefLangCode
 	,PrefLanguage,LivingArrCode,LivingArrangment,AccomSettCode,AccomSetting,CarerAvailCode,CarerAvailDesc,PensTypeCode,PensTypeDesc,URCount,TotalTime
 	,AgeRangeSort,AgeRange)=""
 
 Set ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 //Convert ODBC dates to cache format
 Set DateFrom=..ConvertDateToCache(DateFrom)
 Set DateTo=..ConvertDateToCache(DateTo)

 &SQL(DECLARE SWARHRNAP1033 CURSOR FOR
 	SELECT
 		con.ENQ_RowID AS ContactRowID
        ,con.ENQ_Date AS ContactDate
        ,con.ENQ_Location_DR AS ContactLocDR
        ,con.ENQ_Location_DR->CTLOC_Code AS ContactLocCode
        ,con.ENQ_Location_DR->CTLOC_Desc AS ContactLocDesc
        ,con.ENQ_GovernDepart_DR->DEP_ParRef->NFMI_GovSubCateg_DR->SUB_RowID AS GovSubCategRowID
        ,con.ENQ_GovernDepart_DR->DEP_ParRef->NFMI_GovSubCateg_DR->SUB_Code AS GovSubCategCode
        ,con.ENQ_GovernDepart_DR AS GovernDepartDR
        ,con.ENQ_GovernDepart_DR->DEP_Code AS GovernDepartCode
        ,con.ENQ_GovernDepart_DR->DEP_Desc AS GovernDepartDesc
        ,con.ENQ_CTCP_DR AS CareProvDr
        ,con.ENQ_CTCP_DR->CTPCP_Code AS CareProvCode
        ,con.ENQ_CTCP_DR->CTPCP_Desc AS CareProvDesc
        ,con.ENQ_PAPER_DR->PAPER_CT_Region_DR->CTRG_Code AS RegionCode
        ,con.ENQ_PAPER_DR->PAPER_CT_Region_DR->CTRG_Desc AS RegionDesc
        ,con.ENQ_PAPER_DR->PAPER_Zip_DR->CTZIP_Code AS PostCode
        ,con.ENQ_PAPER_DR->PAPER_Zip_DR->CTZIP_Desc AS City
        ,con.ENQ_PAPER_DR->PAPER_PAPMI_DR->PAPMI_No AS URNo
        ,coalesce(con.ENQ_Duration,0) AS ContactDuration
        ,coalesce(con.ENQ_IndirectTime,0) AS IndirectTime
        ,coalesce(con.ENQ_TravelTime,0) AS TravelTime
        ,con.ENQ_PAPER_DR->PAPER_Name AS Surname
        ,con.ENQ_PAPER_DR->PAPER_Name2 AS GivenName
        ,con.ENQ_Time AS ContactTime
        ,DATEDIFF(yy,con.ENQ_PAPER_DR->PAPER_Dob,con.ENQ_Date) AS AgeAtContact
        ,con.ENQ_PAPER_DR->PAPER_Sex_DR->CTSEX_Code AS Sex
        ,con.ENQ_PAPER_DR->PAPER_IndigStat_DR->INDST_Code AS IndigStatCode
        ,con.ENQ_PAPER_DR->PAPER_IndigStat_DR->INDST_Desc AS IndigStatDesc
        ,con.ENQ_PAPER_DR->PAPER_Country_Birth_DR->CTCOU_Code AS BirthCOCode
        ,con.ENQ_PAPER_DR->PAPER_Country_Birth_DR->CTCOU_Desc AS BirthCountry
        ,con.ENQ_PAPER_DR->PAPER_PrefLanguage_DR->PREFL_Code AS PrefLangCode
        ,con.ENQ_PAPER_DR->PAPER_PrefLanguage_DR->PREFL_Desc AS PrefLanguage
        ,con.ENQ_PAPER_DR->PAPER_LivingArrangement_DR->LIVARR_Code AS LivingArrCode
        ,con.ENQ_PAPER_DR->PAPER_LivingArrangement_DR->LIVARR_Desc AS LivingArrangment
        ,con.ENQ_PAPER_DR->PAPER_AccomSetting_DR->ACCOMS_Code AS AccomSettCode
        ,con.ENQ_PAPER_DR->PAPER_AccomSetting_DR->ACCOMS_Desc AS AccomSetting
        ,con.ENQ_PAPER_DR->PAPER_CarerAvailability_DR->CARAVL_Code AS CarerAvailCode
        ,con.ENQ_PAPER_DR->PAPER_CarerAvailability_DR->CARAVL_Desc AS CarerAvailDesc
        ,con.ENQ_PAPER_DR->PAPER_PAPMI_DR->PAPMI_PensionType_DR->PENSTYPE_Code AS PensTypeCode
        ,con.ENQ_PAPER_DR->PAPER_PAPMI_DR->PAPMI_PensionType_DR->PENSTYPE_Desc AS PensTypeDesc
        ,Count(Distinct con.ENQ_PAPER_DR) AS URCount
        ,(coalesce(con.ENQ_Duration,0) + coalesce(con.ENQ_IndirectTime,0) + coalesce(con.ENQ_TravelTime,0)) AS TotalTime
	FROM
        SQLUser.PA_EnquiryContact con
    WHERE
    	(con.ENQ_Hospital_DR = :Hospital)
    AND
    	(con.ENQ_Date BETWEEN :DateFrom AND :DateTo)
   	AND
   		(({fn CONCAT( ',', {fn CONCAT((:Specialty),',')})} [ {fn CONCAT( ',', {fn CONCAT((con.ENQ_Location_DR->CTLOC_RowId),',')})}) OR (:Specialty IS NULL)) -- Multiple Specialties
	AND
		(({fn CONCAT( ',', {fn CONCAT((:Program  ),',')})} [ {fn CONCAT( ',', {fn CONCAT((con.ENQ_GovernDepart_DR->DEP_RowID),',')})}) OR (:Program IS NULL)) -- Multiple Programs
   	AND
   		(con.ENQ_CTCP_DR->CTPCP_RowId = :Clinician OR (:Clinician IS NULL))
   	AND
   		(con.ENQ_PAPER_DR IS NOT NULL)
    )
                
 &SQL(OPEN SWARHRNAP1033)
 
 //FETCH FIRST ROW
 Do FetchRow
  
 While END=0 {
  
	 Do FormatDates, FormatTimes
	 If (Range = 1) Do AgeRange1yr
	 If (Range = 5) Do AgeRange5yr
	 If (Range = 10) Do AgeRange10yr
	 
  	 Set sort = ind
	 Set ^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,sort)=$LISTBUILD(ContactRowID,ContactDate,ContactLocDR,ContactLocCode,ContactLocDesc
	 ,GovSubCategRowID,GovSubCategCode,GovernDepartDR,GovernDepartCode,GovernDepartDesc,CareProvDr,CareProvCode,CareProvDesc,RegionCode
	 ,RegionDesc,PostCode,City,URNo,ContactDuration,IndirectTime,TravelTime,Surname,GivenName,ContactTime,AgeAtContact,Sex,IndigStatCode
	 ,IndigStatDesc,BirthCOCode,BirthCountry,PrefLangCode,PrefLanguage,LivingArrCode,LivingArrangment,AccomSettCode,AccomSetting
	 ,CarerAvailCode,CarerAvailDesc,PensTypeCode,PensTypeDesc,URCount,TotalTime,AgeRangeSort,AgeRange)
	 Set ind=ind+1
 	 Do FetchRow //Fetch next row
 }

 &SQL(CLOSE SWARHRNAP1033)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$LISTBUILD(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(FETCH SWARHRNAP1033 INTO :ContactRowID,:ContactDate,:ContactLocDR,:ContactLocCode,:ContactLocDesc,:GovSubCategRowID,:GovSubCategCode
 	,:GovernDepartDR,:GovernDepartCode,:GovernDepartDesc,:CareProvDr,:CareProvCode,:CareProvDesc,:RegionCode,:RegionDesc,:PostCode,:City
 	,:URNo,:ContactDuration,:IndirectTime,:TravelTime,:Surname,:GivenName,:ContactTime,:AgeAtContact,:Sex,:IndigStatCode,:IndigStatDesc
 	,:BirthCOCode,:BirthCountry,:PrefLangCode,:PrefLanguage,:LivingArrCode,:LivingArrangment,:AccomSettCode,:AccomSetting,:CarerAvailCode
 	,:CarerAvailDesc,:PensTypeCode,:PensTypeDesc,:URCount,:TotalTime)
 If SQLCODE '= 0 set END = 1
 Quit
 
FormatDates
 Set ContactDate=..ConvertDateToODBC(ContactDate)
 Quit
 
FormatTimes
 Set ContactTime=..ConvertTimeToHHMM(ContactTime) 
 Quit
 
AgeRange1yr
 Set (AgeRangeSort,AgeRange) = "" 
 If (AgeAtContact <= 1){Set AgeRangeSort = "a", AgeRange = "0-1"}
 Elseif ((AgeAtContact > 1) & (AgeAtContact <= 2)){Set AgeRangeSort = "b", AgeRange = "1-2"}
 Elseif ((AgeAtContact > 2) & (AgeAtContact <= 3)){Set AgeRangeSort = "c", AgeRange = "2-3"}
 Elseif ((AgeAtContact > 3) & (AgeAtContact <= 4)){Set AgeRangeSort = "d", AgeRange = "3-4"}
 Elseif ((AgeAtContact > 4) & (AgeAtContact <= 5)){Set AgeRangeSort = "e", AgeRange = "4-5"}
 Elseif ((AgeAtContact > 5) & (AgeAtContact <= 6)){Set AgeRangeSort = "f", AgeRange = "5-6"}
 Elseif ((AgeAtContact > 6) & (AgeAtContact <= 7)){Set AgeRangeSort = "g", AgeRange = "6-7"}
 Elseif ((AgeAtContact > 7) & (AgeAtContact <= 8)){Set AgeRangeSort = "h", AgeRange = "7-8"}
 Elseif ((AgeAtContact > 8) & (AgeAtContact <= 9)){Set AgeRangeSort = "i", AgeRange = "8-9"}
 Elseif ((AgeAtContact > 9) & (AgeAtContact <= 10)){Set AgeRangeSort = "j", AgeRange = "9-10"}
 Elseif ((AgeAtContact > 10) & (AgeAtContact <= 11)){Set AgeRangeSort = "k", AgeRange = "10-11"}
 Elseif ((AgeAtContact > 11) & (AgeAtContact <= 12)){Set AgeRangeSort = "l", AgeRange = "11-12"}
 Elseif ((AgeAtContact > 12) & (AgeAtContact <= 13)){Set AgeRangeSort = "m", AgeRange = "12-13"}
 Elseif ((AgeAtContact > 13) & (AgeAtContact <= 14)){Set AgeRangeSort = "n", AgeRange = "13-14"}
 Elseif ((AgeAtContact > 14) & (AgeAtContact <= 15)){Set AgeRangeSort = "o", AgeRange = "14-15"}
 Elseif ((AgeAtContact > 15) & (AgeAtContact <= 16)){Set AgeRangeSort = "p", AgeRange = "15-16"}
 Elseif ((AgeAtContact > 16) & (AgeAtContact <= 17)){Set AgeRangeSort = "q", AgeRange = "16-17"}
 Elseif ((AgeAtContact > 17) & (AgeAtContact <= 18)){Set AgeRangeSort = "r", AgeRange = "17-18"}
 Elseif ((AgeAtContact > 18) & (AgeAtContact <= 19)){Set AgeRangeSort = "s", AgeRange = "18-19"}
 Elseif ((AgeAtContact > 19) & (AgeAtContact <= 20)){Set AgeRangeSort = "t", AgeRange = "19-20"}
 Elseif (AgeAtContact > 20){Set AgeRangeSort = "u", AgeRange = "20+"}
 Quit
 
AgeRange5yr
 Set (AgeRangeSort,AgeRange) = "" 
 If (AgeAtContact <= 5){Set AgeRangeSort = "a", AgeRange = "0-5"}
 Elseif ((AgeAtContact > 5) & (AgeAtContact <= 10)){Set AgeRangeSort = "b", AgeRange = "5-10"}
 Elseif ((AgeAtContact > 10) & (AgeAtContact <= 15)){Set AgeRangeSort = "c", AgeRange = "10-15"}
 Elseif ((AgeAtContact > 15) & (AgeAtContact <= 20)){Set AgeRangeSort = "d", AgeRange = "15-20"}
 Elseif ((AgeAtContact > 20) & (AgeAtContact <= 25)){Set AgeRangeSort = "e", AgeRange = "20-25"}
 Elseif ((AgeAtContact > 25) & (AgeAtContact <= 30)){Set AgeRangeSort = "f", AgeRange = "25-30"}
 Elseif ((AgeAtContact > 30) & (AgeAtContact <= 35)){Set AgeRangeSort = "g", AgeRange = "30-35"}
 Elseif ((AgeAtContact > 35) & (AgeAtContact <= 40)){Set AgeRangeSort = "h", AgeRange = "35-40"}
 Elseif ((AgeAtContact > 40) & (AgeAtContact <= 45)){Set AgeRangeSort = "i", AgeRange = "40-45"}
 Elseif ((AgeAtContact > 45) & (AgeAtContact <= 50)){Set AgeRangeSort = "j", AgeRange = "45-50"}
 Elseif ((AgeAtContact > 50) & (AgeAtContact <= 55)){Set AgeRangeSort = "k", AgeRange = "50-55"}
 Elseif ((AgeAtContact > 55) & (AgeAtContact <= 60)){Set AgeRangeSort = "l", AgeRange = "55-60"}
 Elseif ((AgeAtContact > 60) & (AgeAtContact <= 65)){Set AgeRangeSort = "m", AgeRange = "60-65"}
 Elseif ((AgeAtContact > 65) & (AgeAtContact <= 70)){Set AgeRangeSort = "n", AgeRange = "65-70"}
 Elseif ((AgeAtContact > 70) & (AgeAtContact <= 75)){Set AgeRangeSort = "o", AgeRange = "70-75"}
 Elseif ((AgeAtContact > 75) & (AgeAtContact <= 80)){Set AgeRangeSort = "p", AgeRange = "75-80"}
 Elseif ((AgeAtContact > 80) & (AgeAtContact <= 85)){Set AgeRangeSort = "q", AgeRange = "80-85"}
 Elseif ((AgeAtContact > 85) & (AgeAtContact <= 90)){Set AgeRangeSort = "r", AgeRange = "85-90"}
 Elseif ((AgeAtContact > 90) & (AgeAtContact <= 95)){Set AgeRangeSort = "s", AgeRange = "90-95"}
 Elseif ((AgeAtContact > 95) & (AgeAtContact <= 100)){Set AgeRangeSort = "t", AgeRange = "95-100"}
 Elseif (AgeAtContact > 100){Set AgeRangeSort = "u", AgeRange = "100+"}
 Quit
 
AgeRange10yr
 Set (AgeRangeSort,AgeRange) = "" 
 If (AgeAtContact <= 10){Set AgeRangeSort = "a", AgeRange = "0-10"}
 Elseif ((AgeAtContact > 10) & (AgeAtContact <= 20)){Set AgeRangeSort = "b", AgeRange = "10-20"}
 Elseif ((AgeAtContact > 20) & (AgeAtContact <= 30)){Set AgeRangeSort = "c", AgeRange = "20-30"}
 Elseif ((AgeAtContact > 30) & (AgeAtContact <= 40)){Set AgeRangeSort = "d", AgeRange = "30-40"}
 Elseif ((AgeAtContact > 40) & (AgeAtContact <= 50)){Set AgeRangeSort = "e", AgeRange = "40-50"}
 Elseif ((AgeAtContact > 50) & (AgeAtContact <= 60)){Set AgeRangeSort = "f", AgeRange = "50-60"}
 Elseif ((AgeAtContact > 60) & (AgeAtContact <= 70)){Set AgeRangeSort = "g", AgeRange = "60-70"}
 Elseif ((AgeAtContact > 70) & (AgeAtContact <= 80)){Set AgeRangeSort = "h", AgeRange = "70-80"}
 Elseif ((AgeAtContact > 80) & (AgeAtContact <= 90)){Set AgeRangeSort = "i", AgeRange = "80-90"}
 Elseif ((AgeAtContact > 90) & (AgeAtContact <= 100)){Set AgeRangeSort = "j", AgeRange = "90-100"}
 Elseif (AgeAtContact > 100){Set AgeRangeSort = "k", AgeRange = "100+"}
 Quit
]]></Implementation>
</Method>

<Method name="SWARHRNAP1033Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$LIST(QHandle,1)
 Set repid=$LIST(QHandle,2)
 Set ind=$LIST(QHandle,3)

 Set ind=$ORDER(^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,ind)
 }

 // Save QHandle
 Set QHandle=$LISTBUILD(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRNAP1033Close">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$LIST(QHandle,2)

 Kill ^CacheTemp(..#CACHETEMPSUBSCRIPT,repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRNAP1033">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer,DateFrom:%Date,DateTo:%Date,Range:%Integer,Specialty:%String,Program:%String,Clinician:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="ContactRowID:%Integer,ContactDate:%Date,ContactLocDR:%Integer,ContactLocCode:%String,ContactLocDesc:%String,GovSubCategRowID:%String,GovSubCategCode:%String,GovernDepartDR:%String,GovernDepartCode:%String,GovernDepartDesc:%String,CareProvDr:%Integer,CareProvCode:%String,CareProvDesc:%String,RegionCode:%String,RegionDesc:%String,PostCode:%String,City:%String,URNo:%String,ContactDuration:%Integer,IndirectTime:%Integer,TravelTime:%Integer,Surname:%String,GivenName:%String,ContactTime:%String,AgeAtContact:%Integer,Sex:%String,IndigStatCode:%String,IndigStatDesc:%String,BirthCOCode:%String,BirthCountry:%String,PrefLangCode:%String,PrefLanguage:%String,LivingArrCode:%String,LivingArrangment:%String,AccomSettCode:%String,AccomSetting:%String,CarerAvailCode:%String,CarerAvailDesc:%String,PensTypeCode:%String,PensTypeDesc:%String,URCount:%String,TotalTime:%Integer,AgeRangeSort:%String,AgeRange:%String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
