<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.PriorityDetails">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: Custom.SWARH.Report.RptSvc.StoredProc.PriorityDetails(WLP_RowId)
* Report Description:  Used by all Reporting Server reports with selectable Wait List Priority
* Initial release: 05/11/2013
* Developer: Michael Welsh
* Modified: 
**************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/PriorityDetails.xml#1 $</Default>
</Parameter>

<Method name="PriorityDetailsClose">
<Description>
Location and Revision of this file in Perforce (Auto-updating)
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="PriorityDetailsExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,RowId:%Library.Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 New WLPRowId,WLPCode,WLPDesc
 Set (WLPRowId)=0
 Set (WLPCode,WLPDesc)=""

 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()

 &SQL(DECLARE PriorityDetailsCursor CURSOR FOR
 	SELECT WLP_RowId,WLP_Code,WLP_Desc FROM SQLUser.PAC_WaitingListPriority WHERE WLP_RowId = :RowId)
 &SQL(OPEN PriorityDetailsCursor)
 
 //FETCH FIRST ROW
 d FetchRow
  
 while END=0{
	 s sort = $ZCVT(WLPDesc,"U")_" "_$ZCVT(WLPDesc,"U")_ind
 	 s ^CacheTemp("TRAK",repid,sort)=$LB(WLPRowId,WLPCode,WLPDesc)
	 s ind=ind+1
 
	 //fetch rows
	 d FetchRow
	 }

 &SQL(CLOSE PriorityDetailsCursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(fetch PriorityDetailsCursor INTO :WLPRowId,:WLPCode,:WLPDesc)
 if SQLCODE '= 0 set END = 1
 q
]]></Implementation>
</Method>

<Method name="PriorityDetailsFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="PriorityDetails">
<Type>%Library.Query</Type>
<FormalSpec>RowId:%Library.Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="WLPRowId:%Library.Integer,WLPCode:%Library.String,WLPDesc:%Library.String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
