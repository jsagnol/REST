<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRATD1032">
<Description>
Class for SWARHRATD1032 DRG Report by Principal Diagnosis</Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRATD1032.xml#1 $</Default>
</Parameter>

<Method name="SWARHRATD1032Close">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRATD1032Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer,DateFrom:%Date,DateTo:%Date,SICDCode:%String,EICDCode:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 k ^zbernard	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 New MRADMRowID,UR,EpisodeNo,Sex,Age,PostCode,HospDesc,AdmDate,DchDate,DRGCode,DRGDesc,StateLOS,ONWeight,SDWeight,LOS
 s (MRADMRowID,Age,LOS)=0
 s (UR,EpisodeNo,Sex,Age,PostCode,HospDesc,AdmDate,DchDate,DRGCode,DRGDesc,StateLOS,ONWeight,SDWeight)="" 
  
 s ind=1

 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)
 
 //s ^bernard("2")=(2)
 
 &sql(declare SWARHRATD1032 cursor for
SELECT DISTINCT
		MRADM.MRADM_RowId AS MRADMRowID,
    	ADM.PAADM_PAPMI_DR->PAPMI_No AS UR,
        ADM.PAADM_AdmNo AS EpisodeNo,
        ADM.PAADM_PAPMI_DR->PAPMI_Sex_DR->CTSEX_Code As Sex,
        DATEDIFF('yy',ADM.PAADM_PAPMI_DR->PAPMI_DOB,ADM.PAADM_AdmDate) AS Age,
        ADM.PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_ZIP_DR->CTZIP_Code As PostCode,
        ADM.PAADM_Hospital_DR->HOSP_Desc AS HospDesc,
        ADM.PAADM_AdmDate AS AdmDate,
        ADM.PAADM_DischgDate AS DchDate,
        MRDRG.DRG_Code As DRGCode,
        MRDRG.DRG_Desc As DRGDesc,
        BLCDRG.TAR_DayHospitalTariff As StateLOS,
        BLCDRG.TAR_ReabilitaionLimitDay As ONWeight,
        BLCDRG.TAR_LimitDay AS SDWeight,
        (CASE WHEN datediff("d",ADM.PAADM_AdmDate,ADM.PAADM_DischgDate)=0 THEN 1 ELSE datediff("d",ADM.PAADM_AdmDate,ADM.PAADM_DischgDate) END) As LOS

 FROM 	SQLUser.PA_Adm ADM
 		INNER JOIN SQLUser.MR_Adm MRADM ON ADM.PAADM_MainMRADM_DR = MRADM.MRADM_RowId
        INNER JOIN SQLUser.MRC_DRGCodes MRDRG ON MRADM.MRADM_DRG_DR = MRDRG.DRG_RowID
        INNER JOIN SQLUser.MR_Diagnos MRDIA ON MRDIA.MRDIA_MRADM_ParRef = MRADM.MRADM_RowId
        INNER JOIN SQLUser.BLC_DRG_Tariff BLCDRG ON MRDRG.DRG_RowID = BLCDRG.TAR_DRG_DR
        
 WHERE	ADM.PAADM_Hospital_DR = :Hospital
        AND ADM.PAADM_DischgDate  BETWEEN :DateFrom AND :DateTo
        AND ADM.PAADM_Type = 'I'
        AND MRDRG.DRG_Code <> ''
        AND (MRDIA_ICDCode_DR->MRCID_Code BETWEEN :SICDCode AND :EICDCode OR (:SICDCode IS NULL))
      
 )
 
 &sql(open SWARHRATD1032)
 
  //fetch first row
 &sql(fetch SWARHRATD1032 into :MRADMRowID,:UR,:EpisodeNo,:Sex,:Age,:PostCode,:HospDesc,:AdmDate,:DchDate,:DRGCode,:DRGDesc,:StateLOS,:ONWeight,:SDWeight,:LOS)

 while 'SQLCODE{
 
 d FormatDates
 //d FormatTimes
 
 s ICDCodeList=..GetICD10CodeList(MRADMRowID)

 // build the row
 Set ^CacheTemp(repid,ind)=$LB(MRADMRowID,UR,EpisodeNo,Sex,Age,PostCode,HospDesc,AdmDate,DchDate,DRGCode,DRGDesc,StateLOS,ONWeight,SDWeight,LOS,ICDCodeList)
 s ind=ind+1
 //fetch rows
 &sql(fetch SWARHRATD1032 into :MRADMRowID,:UR,:EpisodeNo,:Sex,:Age,:PostCode,:HospDesc,:AdmDate,:DchDate,:DRGCode,:DRGDesc,:StateLOS,:ONWeight,:SDWeight,:LOS)

 }

 //s ^zBernard("3")=(3)
 &sql(close SWARHRATD1032)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 //s ^zBernard("4")=(4)
 
 Quit $$$OK
 
FormatDates
 // Convert the dates to ODBC date format
 
 If AdmDate Set AdmDate=..ConvertDateToODBC(AdmDate)
 If DchDate Set DchDate=..ConvertDateToODBC(DchDate)
 Quit

FormatTimes
 // Convert the times to ODBC time format
 //If PAADMAdmTime Set PAADMAdmTime=$ZT(PAADMAdmTime,1)
 //If PAADMDischgTime Set PAADMDischgTime=$ZT(PAADMDischgTime,1)
 Quit
]]></Implementation>
</Method>

<Method name="SWARHRATD1032Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)
 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)

 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRATD1032">
<Description>
GHA List reports Stored Procedure
It expects 2 parameter of type date and will return a list of records:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time 																										</Description>
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer,DateFrom:%Date,DateTo:%Date,SICDCode:%String,EICDCode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="MRADMRowID:%Integer,UR:%String(MAXLEN=255),EpisodeNo:%String(MAXLEN=255),Sex:%String(MAXLEN=255),Age:%Integer,PostCode:%String(MAXLEN=10),HospDesc:%String(MAXLEN=255),AdmDate:%Date,DchDate:%Date,DRGCode:%String(MAXLEN=255),DRGDesc:%String(MAXLEN=255),StateLOS:%String(MAXLEN=10),ONWeight:%String(MAXLEN=10),SDWeight:%String(MAXLEN=10),LOS:%Integer,ICDCodeList:%String(MAXLEN=255)"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
