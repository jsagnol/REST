<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRNAP1024">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARHRNAP1024
* Report Description: Health Promotion Report
* Menu Caption:
* Initial release: 1
* Developer: Phuong-Dung Hoang
* Modified: 25/06/2015
* 
**************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.RptSvc.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRNAP1024.xml#1 $</Default>
</Parameter>

<Method name="SWARHRNAP1024Close">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRNAP1024Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,HospId:%Library.Integer,DateFrom:%Date,DateTo:%Date,SpecialtyId:%Library.Integer,LocalPriorityId:%Library.Integer,PopulationGrpId:%Library.Integer,EventId:%Library.Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 new PAPMINo,CTLOCDesc,LOCPRDesc,SORDesc,EVTDesc,ENQDuration,ENQIndirectTime,ENQEstimMins
 set (PAPMINo,CTLOCDesc,LOCPRDesc,SORDesc,EVTDesc) = ""
 set (ENQDuration,ENQIndirectTime,ENQEstimMins) = 0

 s ind=1, END=0

 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)
 
 
 &SQL(DECLARE NAP1024Cursor CURSOR FOR 
 SELECT
 	ENQ_PAPER_DR->PAPER_PAPMI_DR->PAPMI_No,
 	ENQ_Location_DR->CTLOC_Desc,
 	LOCPR_ContLocalPriority_DR->LOCPR_Desc,
	ENQ_SourceOfReferral_DR->SOR_Desc,
	ENQ_RBEvent_DR->EV_Name,
	ENQ_Duration,
	ENQ_IndirectTime,
	ENQ_EstimMins
 FROM SQLUser.PA_EnquiryContact
 LEFT JOIN SQLUser.PA_EnquiryContactLocalPr ON LOCPR_ParRef=ENQ_RowId
 WHERE 
 	ENQ_Date BETWEEN :DateFrom AND :DateTo
 	AND (ENQ_Location_DR->CTLOC_Hospital_DR=:HospId)
	AND (ENQ_Location_DR = :SpecialtyId OR :SpecialtyId is null)
	AND (LOCPR_ContLocalPriority_DR = :LocalPriorityId OR :LocalPriorityId is null)
	AND (ENQ_SourceOfReferral_DR = :PopulationGrpId OR :PopulationGrpId is null)
	AND (ENQ_RBEvent_DR = :EventId OR :EventId is null)
	AND (LOCPR_ContLocalPriority_DR IS NOT NULL OR ENQ_SourceOfReferral_DR IS NOT NULL)
)
 &SQL(OPEN NAP1024Cursor)
 
 //FETCH FIRST ROW
 d FetchRow
  
 while END=0 {
	 d FormatDates
	 s sort = ind		// don't sort - uncomment this line if you've sorted in the query
	 s ^CacheTemp("TRAK",repid,sort)=$ListBuild(PAPMINo,CTLOCDesc,LOCPRDesc,SORDesc,EVTDesc,ENQDuration,ENQIndirectTime,ENQEstimMins)
	 set ind=ind+1
	 //fetch rows
	 do FetchRow
 }

 &SQL(CLOSE NAP1024Cursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$listbuild(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(FETCH NAP1024Cursor INTO :PAPMINo,:CTLOCDesc,:LOCPRDesc,:SORDesc,:EVTDesc,:ENQDuration,:ENQIndirectTime,:ENQEstimMins)
 if SQLCODE '= 0 set END = 1
 quit
 
FormatDates
 q
]]></Implementation>
</Method>

<Method name="SWARHRNAP1024Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRNAP1024">
<Type>%Library.Query</Type>
<FormalSpec>HospId:%Library.Integer,DateFrom:%Date,DateTo:%Date,SpecialtyId:%Library.Integer,LocalPriorityId:%Library.Integer,PopulationGrpId:%Library.Integer,EventId:%Library.Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAPMINo:%Library.String,CTLOCDesc:%Library.String,LOCPRDesc:%Library.String,SORDesc:%Library.String,EVTDesc:%Library.String,ENQDuration:%Library.Integer,ENQIndirectTime:%Library.Integer,ENQEstimMins:%Library.Integer"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>

<Method name="LocalPriorityDetailsClose">
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$LIST(QHandle,2)
 
 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="LocalPriorityDetailsExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,LOCPRId:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$Increment(^CacheTemp("TRAK"))
 
 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3),ICDCode,DRGCode
 n LOCPRRowId, LOCPRCode, LOCPRDesc
 s LOCPRRowId=0
 s (LOCPRCode, LOCPRDesc)=""
  
 s ind=1

 &SQL(DECLARE LocPriorities CURSOR FOR
	
 	SELECT 
         	LOCPR_RowId
         ,	LOCPR_Code
         ,	LOCPR_Desc
         FROM SQLUser.PAC_ContLocalPriority
         WHERE (LOCPR_RowId=:LOCPRId OR :LOCPRId IS NULL)
           AND LOCPR_DateFrom <= CURRENT_DATE AND (LOCPR_DateTo IS NULL OR LOCPR_DateTo >= CURRENT_DATE)
 
 )
 
 &sql(open LocPriorities)
 do Fetchrow
  
 while 'SQLCODE {
	 
	Set ^CacheTemp(repid,ind)=$LB(LOCPRRowId, LOCPRCode, LOCPRDesc)
 	s ind=ind+1
	do Fetchrow
 }
 &sql(close LocPriorities)

 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

Fetchrow
	&sql(fetch LocPriorities into :LOCPRRowId, :LOCPRCode, :LOCPRDesc)
  	q
]]></Implementation>
</Method>

<Method name="LocalPriorityDetailsFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="LocalPriorityDetails">
<Type>%Library.Query</Type>
<FormalSpec>LOCPRId:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="LOCPRRowId:%Library.Integer, LOCPRCode:%Library.String, LOCPRDesc:%Library.String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>

<Method name="LocalPrioritiesClose">
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$LIST(QHandle,2)
 
 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="LocalPrioritiesExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,HospId:%Integer,DateFrom:%Date,DateTo:%Date]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[

 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$Increment(^CacheTemp("TRAK"))
 
 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()

 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)
 
 n CTLOCRowId, CTLOCCode, CTLOCDesc
 s CTLOCRowId=0
 s (CTLOCCode, CTLOCDesc)=""
 s ind=1
 
 &sql(
 	declare PrioritiesCursor cursor for
 	SELECT DISTINCT
         	ENQ_Location_DR->CTLOC_RowId
         ,	ENQ_Location_DR->CTLOC_Code
         ,	ENQ_Location_DR->CTLOC_Desc
         FROM SQLUser.PA_EnquiryContact
         LEFT JOIN SQLUser.PA_EnquiryContactLocalPr ON LOCPR_ParRef=ENQ_RowId
         WHERE ENQ_Location_DR->CTLOC_Hospital_DR=:HospId
           AND ENQ_Date BETWEEN :DateFrom AND :DateTo
           AND (LOCPR_ContLocalPriority_DR IS NOT NULL OR ENQ_SourceOfReferral_DR IS NOT NULL)
 )

 
 &sql(open PrioritiesCursor)
  do LocalPrioritiesFetchrow
  
 while 'SQLCODE {
	 
	Set ^CacheTemp(repid,ind)=$LB(CTLOCRowId, CTLOCCode, CTLOCDesc)
 	s ind=ind+1
	do LocalPrioritiesFetchrow
 }
 &sql(close PrioritiesCursor)

 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

LocalPrioritiesFetchrow
	&sql(fetch PrioritiesCursor into :CTLOCRowId, :CTLOCCode, :CTLOCDesc)
  	q
]]></Implementation>
</Method>

<Method name="LocalPrioritiesFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind,AtEnd

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="LocalPriorities">
<Type>%Library.Query</Type>
<FormalSpec>HospId:%Integer,DateFrom:%Date,DateTo:%Date</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="CTLOCRowId:%Integer, CTLOCCode:%String, CTLOCDesc:%String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>

<Method name="HealthPromotionSpecialtiesClose">
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$LIST(QHandle,2)
 
 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="HealthPromotionSpecialtiesExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,HospId:%Integer,DateFrom:%Date,DateTo:%Date]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[

 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$Increment(^CacheTemp("TRAK"))
 
 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()

 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)
 
 n CTLOCRowId, CTLOCCode, CTLOCDesc
 s CTLOCRowId=0
 s (CTLOCCode, CTLOCDesc)=""
 s ind=1
 
 &sql(
 	declare SpecialtiesCursor cursor for
 	SELECT DISTINCT
         	ENQ_Location_DR->CTLOC_RowId
         ,	ENQ_Location_DR->CTLOC_Code
         ,	ENQ_Location_DR->CTLOC_Desc
         FROM SQLUser.PA_EnquiryContact
         LEFT JOIN SQLUser.PA_EnquiryContactLocalPr ON LOCPR_ParRef=ENQ_RowId
         WHERE ENQ_Location_DR->CTLOC_Hospital_DR=:HospId
           AND ENQ_Date BETWEEN :DateFrom AND :DateTo
           AND (LOCPR_ContLocalPriority_DR IS NOT NULL OR ENQ_SourceOfReferral_DR IS NOT NULL)
 )

 
 &sql(open SpecialtiesCursor)
  do SpecialtiesFetchrow
  
 while 'SQLCODE {
	 
	Set ^CacheTemp(repid,ind)=$LB(CTLOCRowId, CTLOCCode, CTLOCDesc)
 	s ind=ind+1
	do SpecialtiesFetchrow
 }
 &sql(close SpecialtiesCursor)

 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

SpecialtiesFetchrow
	&sql(fetch SpecialtiesCursor into :CTLOCRowId, :CTLOCCode, :CTLOCDesc)
  	q
]]></Implementation>
</Method>

<Method name="HealthPromotionSpecialtiesFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind,AtEnd

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="HealthPromotionSpecialties">
<Type>%Library.Query</Type>
<FormalSpec>HospId:%Integer,DateFrom:%Date,DateTo:%Date</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="CTLOCRowId:%Integer, CTLOCCode:%String, CTLOCDesc:%String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>

<Method name="PopGroupDetailsClose">
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$LIST(QHandle,2)
 
 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="PopGroupDetailsExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,PopGrpId:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$Increment(^CacheTemp("TRAK"))
 
 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3),ICDCode,DRGCode
 n SORRowId, SORCode, SORDesc
 s SORRowId=0
 s (SORCode, SORDesc)=""
  
 s ind=1

 &SQL(DECLARE PopGroups CURSOR FOR
	
 	SELECT 
         	SOR_RowId
         ,	SOR_Code
         ,	SOR_Desc
         FROM SQLUser.PAC_SourceOfReferral
         WHERE (SOR_RowId=:PopGrpId OR :PopGrpId IS NULL)
           AND SOR_DateFrom <= CURRENT_DATE AND (SOR_DateTo IS NULL OR SOR_DateTo >= CURRENT_DATE)
 
 )
 
 &sql(open PopGroups)
 do PopGroupsFetchrow
  
 while 'SQLCODE {
	 
	Set ^CacheTemp(repid,ind)=$LB(SORRowId, SORCode, SORDesc)
 	s ind=ind+1
	do PopGroupsFetchrow
 }
 &sql(close PopGroups)

 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

PopGroupsFetchrow
	&sql(fetch PopGroups into :SORRowId, :SORCode, :SORDesc)
  	q
]]></Implementation>
</Method>

<Method name="PopGroupDetailsFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="PopGroupDetails">
<Type>%Library.Query</Type>
<FormalSpec>PopGrpId:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="SORRowId:%Library.Integer, SORCode:%Library.String, SORDesc:%Library.String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>

<Method name="EventDetailsClose">
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$LIST(QHandle,2)
 
 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="EventDetailsExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,EventId:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$Increment(^CacheTemp("TRAK"))
 
 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3),ICDCode,DRGCode
 n EVRowId, EVNumber, EVName
 s EVRowId=0
 s (EVNumber, EVName)=""
  
 s ind=1

 &SQL(DECLARE Event CURSOR FOR
	
 	SELECT 
         	EV_RowId
         ,	EV_Number
         ,	EV_Name
         FROM SQLUser.RB_Event
         WHERE (EV_RowId=:EventId OR :EventId IS NULL)
 
 )
 
 &sql(open Event)
 do EventFetchrow
  
 while 'SQLCODE {
	 
	Set ^CacheTemp(repid,ind)=$LB(EVRowId, EVNumber, EVName)
 	s ind=ind+1
	do EventFetchrow
 }
 &sql(close Event)

 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

EventFetchrow
	&sql(fetch Event into :EVRowId, :EVNumber, :EVName)
  	q
]]></Implementation>
</Method>

<Method name="EventDetailsFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="EventDetails">
<Type>%Library.Query</Type>
<FormalSpec>EventId:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="EVRowId:%Library.Integer, EVNumber:%Library.String, EVName:%Library.String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>

<Method name="SpecialtyDetailsClose">
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$LIST(QHandle,2)
 
 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SpecialtyDetailsExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,SpecId:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$Increment(^CacheTemp("TRAK"))
 
 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3),ICDCode,DRGCode
 n CTLOCRowId, CTLOCCode, CTLOCDesc
 s CTLOCRowId=0
 s (CTLOCCode, CTLOCDesc)=""
  
 s ind=1

 &SQL(DECLARE Specialty CURSOR FOR
	
 	SELECT 
         	CTLOC_RowId
         ,	CTLOC_Code
         ,	CTLOC_Desc
         FROM SQLUser.CT_LOC
         WHERE (CTLOC_RowId=:SpecId OR :SpecId IS NULL)
 
 )
 
 &sql(open Specialty)
 do SpecFetchrow
  
 while 'SQLCODE {
	 
	Set ^CacheTemp(repid,ind)=$LB(CTLOCRowId, CTLOCCode, CTLOCDesc)
 	s ind=ind+1
	do SpecFetchrow
 }
 &sql(close Specialty)

 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

SpecFetchrow
	&sql(fetch Specialty into :CTLOCRowId, :CTLOCCode, :CTLOCDesc)
  	q
]]></Implementation>
</Method>

<Method name="SpecialtyDetailsFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SpecialtyDetails">
<Type>%Library.Query</Type>
<FormalSpec>SpecId:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="CTLOCRowId:%Library.Integer, CTLOCCode:%Library.String, CTLOCDesc:%Library.String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
