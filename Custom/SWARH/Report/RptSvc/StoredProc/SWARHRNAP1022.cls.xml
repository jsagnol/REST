<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRNAP1022">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARHRNAP1022
* Report Description: 
* Menu Caption:
* Initial release: 1
* Developer: Bradly Sharpe
* Modified: 24/06/2015
* 
**************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.RptSvc.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRNAP1022.xml#1 $</Default>
</Parameter>

<Method name="SWARHRNAP1022Close">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRNAP1022Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Library.String,DateFrom:%Date,DateTo:%Date,AppointmentCount:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 new PAPMINo, PAPMIName, PAPMIName2, PAPMIDOB, ApptCount
 set (PAPMINo, PAPMIName, PAPMIName2, PAPMIDOB, ApptCount) = ""

 s ind=1, END=0
 
 s Hospital=$zstrip(Hospital,"*CW")

 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)
 
 
 &SQL(DECLARE NAP1022Cursor CURSOR FOR 	 
 SELECT 
    PAPMI_No
  , PAPMI_Name
  , PAPMI_Name2
  , PAPMI_DOB
  , COUNT(APPT_RowId) AS APPT_Count
 FROM (
   SELECT
                    appt.APPT_PAPMI_DR->PAPMI_No
            ,       appt.APPT_PAPMI_DR->PAPMI_Name
            ,       appt.APPT_PAPMI_DR->PAPMI_Name2
            ,       appt.APPT_PAPMI_DR->PAPMI_DOB
            ,       appt.%ID AS APPT_RowId
    FROM SQLUser.RB_Appointment appt
    WHERE
                appt.APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR->CTLOC_Hospital_DR = :Hospital
            AND appt.APPT_DateComp BETWEEN :DateFrom AND :DateTo
            AND appt.APPT_Status IN ('A', 'S', 'D')
) sq
GROUP BY PAPMI_No
HAVING COUNT(APPT_RowId) >= :AppointmentCount
-- BS - Removed ORDER BY, Report defaults to order by first column, have to specify sorting in tablix
--ORDER BY PAPMI_Name 
)
 &SQL(OPEN NAP1022Cursor)
 
 //FETCH FIRST ROW
 d FetchRow
  
 while END=0 {
	 d FormatDates
	 s sort = ind		// don't sort - uncomment this line if you've sorted in the query
	 s ^CacheTemp("TRAK",repid,sort)=$ListBuild(PAPMINo, PAPMIName, PAPMIName2, PAPMIDOB, ApptCount)
	 set ind=ind+1
	 //fetch rows
	 do FetchRow
 }

 &SQL(CLOSE NAP1022Cursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$listbuild(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(FETCH NAP1022Cursor INTO :PAPMINo, :PAPMIName, :PAPMIName2, :PAPMIDOB, :ApptCount)
 if SQLCODE '= 0 set END = 1
 quit
 
FormatDates
 set PAPMIDOB=..ConvertDateToODBC(PAPMIDOB)
 q
]]></Implementation>
</Method>

<Method name="SWARHRNAP1022Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRNAP1022">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Library.String,DateFrom:%Date,DateTo:%Date,AppointmentCount:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAPMINo:%Library.String,PAPMIName:%Library.String,PAPMIName2:%Library.String,PAPMIDOB:%Library.Date,ApptCount:%Library.Integer"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
