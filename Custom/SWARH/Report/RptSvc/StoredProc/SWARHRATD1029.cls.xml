<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRATD1029">
<Description>
Class for SWARHRATD1029 Report</Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.RptSvc.StoredProc.Abstract</Super>
<TimeCreated>62342,35298.70943</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRATD1029.xml#1 $</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
/*
 * Report Name: Current InPatients by GP <br>
 * Report Code: SWARH.R.1023 <br>
 */
]]></Content>
</UDLText>

<Method name="SWARHRATD1029Close">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 //Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRATD1029Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Library.Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 New UR,EpisodeNo,PatientSurname,PatientFirstName,PatientOtherNames,Sex,DOB,AgeYears,AdmissionDate,EstDischargeDate,CurrentWard,ProvDiagnosis,DoctorSurname
 Set (UR,EpisodeNo,PatientSurname,PatientFirstName,PatientOtherNames,Sex,DOB,AdmissionDate,EstDischargeDate,CurrentWard,ProvDiagnosis,DoctorSurname)=""
 Set (AgeYears)=0
 
 s ind=1, END=0

 //Convert ODBC dates to cache format
 //s DateFrom=..ConvertDateToCache(DateFrom)
 //s DateTo=..ConvertDateToCache(DateTo)

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 &SQL(DECLARE SWARHRATD1029Cursor CURSOR FOR 
 SELECT
        ADM.PAADM_PAPMI_DR->PAPMI_No AS UR,
        ADM.PAADM_AdmNo AS EpisodeNo,
        ADM.PAADM_PAPMI_DR->PAPMI_Name AS PatientSurname,
        ADM.PAADM_PAPMI_DR->PAPMI_Name2 AS PatientFirstName,
        ADM.PAADM_PAPMI_DR->PAPMI_Name3 AS PatientOtherNames,
        ADM.PAADM_PAPMI_DR->PAPMI_Sex_DR->CTSEX_Code As Sex,
        ADM.PAADM_PAPMI_DR->PAPMI_DOB AS DOB,
        ADM.PAADM_PAPMI_DR->PAPMI_RowID->PAPER_AgeYr AS AgeYears,
        ADM.PAADM_AdmDate AS AdmissionDate,
        ADM.PAADM_EstimDischargeDate AS EstDischargeDate,
        ADM.PAADM_CurrentWard_DR->WARD_Code AS CurrentWard,
        ADM.PAADM_MainMRADM_DR->MRADM_PresentComplaint AS ProvDiagnosis,
        ADM.PAADM_AdmDocCodeDR->CTPCP_Surname AS DoctorSurname
        
FROM    SQLUser.PA_Adm ADM

WHERE   ADM.PAADM_Hospital_DR = :Hospital
AND 	ADM.PAADM_VisitStatus = 'A'
AND 	ADM.PAADM_Type = 'I'
AND 	ADM.PAADM_DischgDate IS NULL
  		

)

 &SQL(OPEN SWARHRATD1029Cursor)
 //AND ADM.PAADM_AdmDate BETWEEN :DateFrom AND :DateTo
 //FETCH FIRST ROW
 d FetchRow
 
 while END=0 {
  
	 d FormatDates
	 //d FormatTimes
  
	 s sort = ind		// don't sort - uncomment this line if you've sorted in the query
	 //s sort = $ZCVT(HOSPDesc,"U")_" "_$ZCVT(WARDDesc,"U")_" "_$ZCVT(ROOMCode,"U")_" "_$ZCVT(BEDCode,"U")_" "_$ZCVT(CTRLGDesc,"U")_" "_$ZCVT(PAPERName,"U")_" "_$ZCVT(PAPERName2,"U")_" "_$ZCVT(PAPERName3,"U")_ind
 
	 s ^CacheTemp("TRAK",repid,sort)=$LB(UR,EpisodeNo,PatientSurname,PatientFirstName,PatientOtherNames,Sex,DOB,AgeYears,AdmissionDate,EstDischargeDate,CurrentWard,ProvDiagnosis,DoctorSurname)
	 s ind=ind+1
 
	 //fetch rows
	 d FetchRow
 }

 &SQL(CLOSE SWARHRATD1029Cursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(FETCH SWARHRATD1029Cursor INTO :UR,:EpisodeNo,:PatientSurname,:PatientFirstName,:PatientOtherNames,:Sex,:DOB,:AgeYears,:AdmissionDate,:EstDischargeDate,:CurrentWard,:ProvDiagnosis,:DoctorSurname)
 if SQLCODE '= 0 set END = 1
 q

FormatDates
 // Convert the dates to ODBC time format
 If DOB Set DOB=..ConvertDateToODBC(DOB)
 If AdmissionDate Set AdmissionDate=..ConvertDateToODBC(AdmissionDate)
 If EstDischargeDate Set EstDischargeDate=..ConvertDateToODBC(EstDischargeDate)
 q
 
FormatTimes
 // Convert the times to ODBC time format
 q
]]></Implementation>
</Method>

<Method name="SWARHRATD1029Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRATD1029">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Library.Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="UR:%String,EpisodeNo:%String,PatientSurname:%String,PatientFirstName:%String,PatientOtherNames:%String,Sex:%String,DOB:%Date,AgeYears:%Integer,AdmissionDate:%Date,EstDischargeDate:%Date,CurrentWard:%String,ProvDiagnosis:%String,DoctorSurname:%String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
