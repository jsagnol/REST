<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRFIN1003">
<Description><![CDATA[
<pre>
***************************************************************************************************************************************
* Report Code: SWARHRFIN1003
* Report Description: Community Billing data
* Menu Caption: Community Billing
* Initial release: 27/01/2015 Developer: Michael Welsh
* Modified:	
***************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>59388,55236.125</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRFIN1003.xml#1 $</Default>
</Parameter>

<Method name="SWARHRFIN1003Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer,DateFrom:%Date,DateTo:%Date,Specialty:%Integer,OrdSubCat:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$INCREMENT(^CacheTemp(..#CACHETEMPSUBSCRIPT))
 
 New URNUMBER,EPISODESURNAME,EPISODEGIVENNAME,EPISODEADDRESS1,EPISODEADDRESS2,EPISODETOWN,EPISODEPOSTCODE,EPISODENO,EPISODEADMISSIONDATE
	,EPISODESPECIALITY,EPISODEPAYOR,EPISODEPLAN,EPISODEPAYORGROUPCODE,EPISODEPAYORGROUPDESC,EPISODEPAYOROFFICE,EPISODEINSURANCECONTACTNAME
	,EPISODEINSURANCECONTACTADDRESS,EPISODEINSURANCECONTACTADDRESS2,EPISODEINSURANCECONTACTCITY,EPISODEINSURANCECONTACTPCODE
	,PATIENTBILLPAYORTYPE,PATIENTBILLBILLREFUND,PATIENTBILLAMOUNTTOPAY,PATIENTBILLPAYOR,PATIENTBILLPLAN,STATUS,CONTACTDURATION
	,CONTACTSURNAME,CONTACTGIVENNAME,CONTACTADDRESS,CONTACTADDRESS2,CONTACTTOWN,CONTACTPOSTCODE,CONTACTPAYOR,CONTACTPLAN,BILLSERVICECODE
	,BILLSERVICEDESC,BILLINGSUBGROUP,UNITPRICE,DAILYQTY,LINETOTAL,ITEMDATE,ITEMTIME,OrdSubCatRowID,OrdSubCatCode,OrdSubCatDesc

 Set (URNUMBER,EPISODESURNAME,EPISODEGIVENNAME,EPISODEADDRESS1,EPISODEADDRESS2,EPISODETOWN,EPISODEPOSTCODE,EPISODENO,EPISODEADMISSIONDATE
	,EPISODESPECIALITY,EPISODEPAYOR,EPISODEPLAN,EPISODEPAYORGROUPCODE,EPISODEPAYORGROUPDESC,EPISODEPAYOROFFICE,EPISODEINSURANCECONTACTNAME
	,EPISODEINSURANCECONTACTADDRESS,EPISODEINSURANCECONTACTADDRESS2,EPISODEINSURANCECONTACTCITY,EPISODEINSURANCECONTACTPCODE
	,PATIENTBILLPAYORTYPE,PATIENTBILLBILLREFUND,PATIENTBILLAMOUNTTOPAY,PATIENTBILLPAYOR,PATIENTBILLPLAN,STATUS,CONTACTDURATION
	,CONTACTSURNAME,CONTACTGIVENNAME,CONTACTADDRESS,CONTACTADDRESS2,CONTACTTOWN,CONTACTPOSTCODE,CONTACTPAYOR,CONTACTPLAN,BILLSERVICECODE
	,BILLSERVICEDESC,BILLINGSUBGROUP,UNITPRICE,DAILYQTY,LINETOTAL,ITEMDATE,ITEMTIME,OrdSubCatRowID,OrdSubCatCode,OrdSubCatDesc) = ""
 Set (Integer)=0
 
 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 //Convert ODBC dates to cache format
 Set DateFrom=..ConvertDateToCache(DateFrom)
 Set DateTo=..ConvertDateToCache(DateTo)
 
 &SQL(DECLARE SWARHRFIN1003 CURSOR FOR
 	SELECT
        PAADM_PAPMI_DR->PAPMI_NO AS URNUMBER
        ,PAADM_PAPMI_DR->PAPMI_NAME AS EPISODESURNAME
        ,PAADM_PAPMI_DR->PAPMI_NAME2 AS EPISODEGIVENNAME
        ,PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_STNAME AS EPISODEADDRESS1
        ,PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_FOREIGNADDRESS AS EPISODEADDRESS2
        ,PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_CITYCODE_DR->CTCIT_DESC AS EPISODETOWN
        ,PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_ZIP_DR->CTZIP_CODE AS EPISODEPOSTCODE
        ,PAADM_ADMNO AS EPISODENO, PAADM_ADMDATE AS EPISODEADMISSIONDATE
        ,PAADM_DEPCODE_DR->CTLOC_DESC AS EPISODESPECIALITY
        ,INS_INSTYPE_DR->INST_DESC AS EPISODEPAYOR
        ,INS_AUXINSTYPE_DR->AUXIT_DESC AS EPISODEPLAN
        ,INS_INSTYPE_DR->INST_PAYORGROUP_DR->PGRP_CODE AS EPISODEPAYORGROUPCODE
        ,INS_INSTYPE_DR->INST_PAYORGROUP_DR->PGRP_DESC AS EPISODEPAYORGROUPDESC
        ,INS_INSASSOC_DR->INSAS_DESC AS EPISODEPAYOROFFICE
        ,CONTACT_NAME AS EPISODEINSURANCECONTACTNAME
        ,CONTACT_ADDRESS1 AS EPISODEINSURANCECONTACTADDRESS
        ,CONTACT_ADDRESS2 AS EPISODEINSURANCECONTACTADDRESS2
        ,CONTACT_CITY_DR->CTCIT_DESC AS EPISODEINSURANCECONTACTCITY
        ,CONTACT_ZIP_DR->CTZIP_CODE AS EPISODEINSURANCECONTACTPCODE
        ,ARPBL_PAYORTYPE AS PATIENTBILLPAYORTYPE
        ,ARPBL_BILLREFUND AS PATIENTBILLBILLREFUND
        ,ARPBL_AMOUNTTOPAY AS PATIENTBILLAMOUNTTOPAY
        ,ARPBL_INSURANCETYPE_DR->INST_DESC AS PATIENTBILLPAYOR
        ,ARPBL_AUXINSTYPE_DR->AUXIT_DESC AS PATIENTBILLPLAN
        ,ITM_OEORI_DR->OEORI_ITEMSTAT_DR->OSTAT_DESC AS STATUS
        ,ENQ_DURATION AS CONTACTDURATION
        ,ENQ_PAPER_DR->PAPER_NAME AS CONTACTSURNAME
        ,ENQ_PAPER_DR->PAPER_NAME2 AS CONTACTGIVENNAME
        ,ENQ_PAPER_DR->PAPER_STNAME AS CONTACTADDRESS
        ,ENQ_PAPER_DR->PAPER_FOREIGNADDRESS AS CONTACTADDRESS2
        ,ENQ_PAPER_DR->PAPER_CITYCODE_DR->CTCIT_DESC AS CONTACTTOWN
        ,ENQ_PAPER_DR->PAPER_ZIP_DR->CTZIP_CODE AS CONTACTPOSTCODE
        ,ENQ_INSTYPE_DR->INST_DESC AS CONTACTPAYOR
        ,ENQ_AUXINSTYPE_DR->AUXIT_DESC AS CONTACTPLAN
        ,ITM_ARCIM_DR->ARCIM_CODE AS BILLSERVICECODE
        ,ITM_ARCIM_DR->ARCIM_DESC AS BILLSERVICEDESC
        ,ITM_ARCIM_DR->ARCIM_BILLSUB_DR->ARCSG_DESC AS BILLINGSUBGROUP
        ,ITM_UNITPRICE AS UNITPRICE
        ,ITM_DAILYQTY AS DAILYQTY
        ,ITM_LINETOTAL AS LINETOTAL
        ,ITM_DATE AS ITEMDATE
        ,ITM_OrderTime AS ITEMTIME
		,ITM_OrdSubcat_DR AS OrdSubCatRowID
        ,ITM_OrdSubcat_DR->ARCIC_Code AS OrdSubCatCode
        ,ITM_OrdSubcat_DR->ARCIC_DESC AS OrdSubCatDesc
	FROM
    	SQLUser.AR_PATIENTBILL
        	LEFT OUTER JOIN SQLUser.AR_PATBILLGROUP ON ARPBL_ROWID = BGRP_PARREF
            LEFT OUTER JOIN SQLUser.AR_PATBILLGROUPCHARGES ON BGRP_ROWID = ITM_PARREF
            LEFT OUTER JOIN SQLUser.PA_ENQUIRYCONTACT ON ITM_OEORI_DR = ENQ_OEORDITEM_DR
            LEFT OUTER JOIN SQLUser.PA_ADM ON ITM_PAADM_DR = PAADM_ROWID
            LEFT OUTER JOIN SQLUser.PA_ADMINSURANCE ON PAADM_ROWID = INS_PARREF
            LEFT OUTER JOIN SQLUser.PA_ADMINSURANCECONTACTS ON INS_ROWID = CONTACT_PARREF
    WHERE
        ENQ_HOSPITAL_DR = :Hospital
	AND
        ENQ_LOCATION_DR = :Specialty
    AND
        (ITM_OrdSubcat_DR = :OrdSubCat OR (:OrdSubCat IS NULL))
	AND
        ARPBL_PAYORTYPE <> 'P'
	AND
        ((ITM_ARCIM_DR->ARCIM_BILLSUB_DR->ARCSG_ARCBG_PARREF IN (SELECT BPS_BILLGROUP_DR FROM SQLUSER.BLC_BILLPRINTSEQUENCE)) OR (ITM_LINETOTAL <> '0'))
	AND
        (ENQ_DATE >= :DateFrom AND ENQ_DATE <= :DateTo)
	AND
        (INS_DATETYPEFROM <= ENQ_DATE AND (INS_DATETYPETO >= ENQ_DATE OR INS_DATETYPETO IS NULL))
    AND
        (ITM_OEORI_DR->OEORI_ITEMSTAT_DR = 6) --- Executed ---
	ORDER BY
        PAADM_PAPMI_DR->PAPMI_NO, PAADM_ADMNO, ITM_DATE)
                
 &SQL(OPEN SWARHRFIN1003)
 
 //FETCH FIRST ROW
 Do FetchRow
  
 while END=0 {
  
	 Do FormatDates, FormatTimes, FormatStrings
  	 Set sort = ind
	 Set ^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,sort)=$LISTBUILD(URNUMBER,EPISODESURNAME,EPISODEGIVENNAME,EPISODEADDRESS1,EPISODEADDRESS2,EPISODETOWN,EPISODEPOSTCODE,EPISODENO,EPISODEADMISSIONDATE
	,EPISODESPECIALITY,EPISODEPAYOR,EPISODEPLAN,EPISODEPAYORGROUPCODE,EPISODEPAYORGROUPDESC,EPISODEPAYOROFFICE,EPISODEINSURANCECONTACTNAME
	,EPISODEINSURANCECONTACTADDRESS,EPISODEINSURANCECONTACTADDRESS2,EPISODEINSURANCECONTACTCITY,EPISODEINSURANCECONTACTPCODE
	,PATIENTBILLPAYORTYPE,PATIENTBILLBILLREFUND,PATIENTBILLAMOUNTTOPAY,PATIENTBILLPAYOR,PATIENTBILLPLAN,STATUS,CONTACTDURATION
	,CONTACTSURNAME,CONTACTGIVENNAME,CONTACTADDRESS,CONTACTADDRESS2,CONTACTTOWN,CONTACTPOSTCODE,CONTACTPAYOR,CONTACTPLAN,BILLSERVICECODE
	,BILLSERVICEDESC,BILLINGSUBGROUP,UNITPRICE,DAILYQTY,LINETOTAL,ITEMDATE,ITEMTIME,OrdSubCatRowID,OrdSubCatCode,OrdSubCatDesc)
	 
	 Set ind=ind+1
	 
	 //Fetch next row
 	 Do FetchRow 
 }

 &SQL(CLOSE SWARHRFIN1003)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$listbuild(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(FETCH SWARHRFIN1003 INTO :URNUMBER,:EPISODESURNAME,:EPISODEGIVENNAME,:EPISODEADDRESS1,:EPISODEADDRESS2,:EPISODETOWN,:EPISODEPOSTCODE
 ,:EPISODENO,:EPISODEADMISSIONDATE,:EPISODESPECIALITY,:EPISODEPAYOR,:EPISODEPLAN,:EPISODEPAYORGROUPCODE,:EPISODEPAYORGROUPDESC
 ,:EPISODEPAYOROFFICE,:EPISODEINSURANCECONTACTNAME,:EPISODEINSURANCECONTACTADDRESS,:EPISODEINSURANCECONTACTADDRESS2
 ,:EPISODEINSURANCECONTACTCITY,:EPISODEINSURANCECONTACTPCODE,:PATIENTBILLPAYORTYPE,:PATIENTBILLBILLREFUND,:PATIENTBILLAMOUNTTOPAY
 ,:PATIENTBILLPAYOR,:PATIENTBILLPLAN,:STATUS,:CONTACTDURATION,:CONTACTSURNAME,:CONTACTGIVENNAME,:CONTACTADDRESS,:CONTACTADDRESS2
 ,:CONTACTTOWN,:CONTACTPOSTCODE,:CONTACTPAYOR,:CONTACTPLAN,:BILLSERVICECODE,:BILLSERVICEDESC,:BILLINGSUBGROUP,:UNITPRICE,:DAILYQTY
 ,:LINETOTAL,:ITEMDATE,:ITEMTIME,:OrdSubCatRowID,:OrdSubCatCode,:OrdSubCatDesc)
 if SQLCODE '= 0 set END = 1
 q
 
FormatDates
 s EPISODEADMISSIONDATE =..ConvertDateToODBC(EPISODEADMISSIONDATE)
 s ITEMDATE =..ConvertDateToODBC(ITEMDATE)
 q
 
FormatTimes
 s ITEMTIME =..ConvertTimeToHHMM(ITEMTIME)
 q
 
FormatStrings // Cleanup specified strings
 s EPISODEADDRESS1 = $ZStrip(EPISODEADDRESS1,"*C") 
 s EPISODEADDRESS2 = $ZStrip(EPISODEADDRESS2,"*C")
 s EPISODEINSURANCECONTACTADDRESS = $ZStrip(EPISODEINSURANCECONTACTADDRESS,"*C") 
 s EPISODEINSURANCECONTACTADDRESS2 = $ZStrip(EPISODEINSURANCECONTACTADDRESS2,"*C")
 s CONTACTADDRESS = $ZStrip(CONTACTADDRESS,"*C") 
 s CONTACTADDRESS2 = $ZStrip(CONTACTADDRESS2,"*C")
 s EPISODESURNAME = $ZCONVERT(EPISODESURNAME,"U") 
 s EPISODEGIVENNAME = $ZCONVERT(EPISODEGIVENNAME,"W")
 s CONTACTSURNAME = $ZCONVERT(CONTACTSURNAME,"U") 
 s CONTACTGIVENNAME = $ZCONVERT(CONTACTGIVENNAME,"W")
 q
]]></Implementation>
</Method>

<Method name="SWARHRFIN1003Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$LIST(QHandle,1)
 Set repid=$LIST(QHandle,2)
 Set ind=$LIST(QHandle,3)

 Set ind=$ORDER(^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,ind)
 }

 // Save QHandle
 Set QHandle=$LISTBUILD(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRFIN1003Close">
<Description>
Location and Revision of this file in Perforce (Auto-updating)
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$LIST(QHandle,2)

 Kill ^CacheTemp(..#CACHETEMPSUBSCRIPT,repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRFIN1003">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer,DateFrom:%Date,DateTo:%Date,Specialty:%Integer,OrdSubCat:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="URNUMBER:%String,EPISODESURNAME:%String,EPISODEGIVENNAME:%String,EPISODEADDRESS1:%String,EPISODEADDRESS2:%String,EPISODETOWN:%String,EPISODEPOSTCODE:%String,EPISODENO:%String,EPISODEADMISSIONDATE:%Date,EPISODESPECIALITY:%String,EPISODEPAYOR:%String,EPISODEPLAN:%String,EPISODEPAYORGROUPCODE:%String,EPISODEPAYORGROUPDESC:%String,EPISODEPAYOROFFICE:%String,EPISODEINSURANCECONTACTNAME:%String,EPISODEINSURANCECONTACTADDRESS:%String,EPISODEINSURANCECONTACTADDRESS2:%String,EPISODEINSURANCECONTACTCITY:%String,EPISODEINSURANCECONTACTPCODE:%String,PATIENTBILLPAYORTYPE:%String,PATIENTBILLBILLREFUND:%String,PATIENTBILLAMOUNTTOPAY:%Float,PATIENTBILLPAYOR:%String,PATIENTBILLPLAN:%String,STATUS:%String,CONTACTDURATION:%String,CONTACTSURNAME:%String,CONTACTGIVENNAME:%String,CONTACTADDRESS:%String,CONTACTADDRESS2:%String,CONTACTTOWN:%String,CONTACTPOSTCODE:%String,CONTACTPAYOR:%String,CONTACTPLAN:%String,BILLSERVICECODE:%String,BILLSERVICEDESC:%String,BILLINGSUBGROUP:%String,UNITPRICE:%Float,DAILYQTY:%Integer,LINETOTAL:%Float,ITEMDATE:%Date,ITEMTIME:%String,OrdSubCatRowID:%Integer,OrdSubCatCode:%String,OrdSubCatDesc:%String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
