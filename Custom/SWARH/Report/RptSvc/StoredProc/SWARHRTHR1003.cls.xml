<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRTHR1003">
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRTHR1003.xml#1 $</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
/*
 * Report Name: <SWARHReportName> <br>
 * Report Code: SWARH.R.<SWARHReportCode> <br>
 * SWARH Developer: your name <br>
 */
]]></Content>
</UDLText>

<Method name="SWARHRTHR1003QueryClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRTHR1003QueryExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Library.String,DateFrom:%Date,DateTo:%Date,Doctor:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 /* TEMPLATE MODIFY: Define and initialise appropriate column variables to describe output rowset columns */
 New PAPMINo,RBOPTimeOper,AMPM,PAPMIName,PAPMIName2,WARDCode,CTSEXGender,PAPERAgeYr,PAPERDob,SPPPDesc,Alert,RBOPDateOper,RBOPDateBook
 New RESDesc,CTPCPDesc,Anaesthetist,WLProcedureFreeText,PAPMIRowId,NumAlerts,Urgency,WLDaysOnList
 Set (PAPMINo,RBOPTimeOper,AMPM,PAPMIName,PAPMIName2,WARDCode,CTSEXGender,PAPERAgeYr,PAPERDob,SPPPDesc,Alert,RBOPDateOper,RBOPDateBook)=""
 Set (RESDesc,CTPCPDesc,CTPCPDesc1,WLProcedureFreeText,PAPMIRowId,NumAlerts,Urgency,WLDaysOnList)=""

 s ind=1

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 /* TEMPLATE MODIFY: Clean up parameter variables - $zstrip(<variable>,"*CW") strips all control characters and whitespace, "<>W" just strips leading/trailing whitespace
  * NOTE: DO NOT DO "*W" ZSTRIP FROM DATES AS IT REMOVES THE WHITESPACE BETWEEN THE DATE AND TIME AND THIS BREAKS THE QUERY! */
 s Hospital=$zstrip(Hospital,"*CW")
 s Doctor=$zstrip(Doctor,"*CW")
 //Convert ODBC dates to cache format
 s DateFrom=..ConvertDateToCache(DateFrom)
 s DateTo=..ConvertDateToCache(DateTo)
 
 /*
  * TEMPLATE MODIFY:
  *		1. Change name of cursor to something more descriptive than SWARHRTHR1003Cursor (need to change in 4 places; here, 2x "fetch" expressions and close expression below)
  *		2. Change SQL query to query desired data, passing valid parameters as defined in Query and Execute method arguments.
  *		3. Pass appropriate parameters using :<ParameterVariableName> - eg. :Hospital
  */
 &SQL(DECLARE SWARHRTHR1003Cursor CURSOR FOR 
				 SELECT 
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_No, 
				RBOP_TimeOper, 
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_Name, 
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_Name2, 
				RBOP_PAADM_DR->PAADM_CurrentWard_DR->WARD_Code,
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_Sex_DR->CTSEX_Gender,
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_AgeYr,
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_Dob,
				RBOP_StatePPP_DR->SPPP_Desc,
				CASE WHEN COUNT(*) = 0 THEN 'No' ELSE 'Yes' END AS Alert,
				RBOP_DateOper, 
				RBOP_DateBook, 
				RBOP_Resource_DR->RES_Desc, 
				%EXACT(RBOP_Surgeon_DR->CTPCP_Desc)As CTPCP_Desc,
				%EXACT(RBOP_Anaesthetist_DR->CTPCP_Desc)As Anaesthetist,
				(RBOP_ProcsOpers) AS WL_ProcedureFreeText,
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_RowId,
				WL.WL_WaitListPrior_DR->WLP_Code as Urgency,
				WL.WL_DaysOnList
				from SQLUSER.RB_OperatingRoom
			INNER JOIN SQLUser.PA_Adm PA ON (RBOP_PAADM_DR=PAADM_RowID) 
			LEFT JOIN SQLUser.PA_AlertMsg AM ON (PAADM_PAPMI_DR=ALM_PAPMI_ParRef)
			LEFT JOIN SQLUser.PA_WaitingList WL ON (RB_OperatingRoom.RBOP_Waitlist_DR = WL.WL_RowId)
		WHERE RBOP_DateOper between :DateFrom and :DateTo
			AND RBOP_PAADM_DR->PAADM_Hospital_DR = :Hospital
			AND RBOP_Status <> 'X'
			AND (RBOP_Surgeon_DR->CTPCP_RowId = :Doctor or :Doctor is null)
			Group by RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_No,
				RBOP_TimeOper, 
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_Name, 
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_Name2, 
				RBOP_PAADM_DR->PAADM_CurrentWard_DR->WARD_Code,
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_Sex_DR->CTSEX_Gender,
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_AgeYr,
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_Dob,
				RBOP_DateOper, 
				RBOP_DateBook, 
				RBOP_Resource_DR->RES_Desc, 
				RBOP_Surgeon_DR->CTPCP_Desc,
				RBOP_Anaesthetist_DR->CTPCP_Desc,
				RBOP_ProcsOpers,
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_RowId,
				WL.WL_WaitListPrior_DR->WLP_Code,
				WL.WL_DaysOnList
				ORDER BY RBOP_DateOper)
		
 &SQL(OPEN SWARHRTHR1003Cursor)
 
 /* TEMPLATE MODIFY: Rename cursor to something moreChange fetch INTO parameter list to match column variable names */
 //FETCH FIRST ROW
 &sql(fetch SWARHRTHR1003Cursor INTO :PAPMINo,:RBOPTimeOper,:PAPMIName,:PAPMIName2,:WARDCode,:CTSEXGender,:PAPERAgeYr,:PAPERDob,:SPPPDesc,:Alert,:RBOPDateOper,:RBOPDateBook,:RESDesc,:CTPCPDesc,:Anaesthetist,:WLProcedureFreeText,:PAPMIRowId,:Urgency,:WLDaysOnList)
  
 while 'SQLCODE{
  
	 d FormatDates
  	 d FormatTimes
  	 s NumAlerts=$$GetNumAlerts(PAPMIRowId)
  	 
	 /* TEMPLATE MODIFY: Build the sort string here from column variables. Convert strings to uppercase ($ZCVT(<field>,"U") and separate with spaces */
	 s sort = ind		// don't sort - uncomment this line if you've sorted in the query
	 //s sort = $ZCVT(HOSPDesc,"U")_" "_$ZCVT(WARDDesc,"U")_" "_$ZCVT(ROOMCode,"U")_" "_$ZCVT(BEDCode,"U")_" "_$ZCVT(CTRLGDesc,"U")_" "_$ZCVT(PAPERName,"U")_" "_$ZCVT(PAPERName2,"U")_" "_$ZCVT(PAPERName3,"U")_ind
 
	 /* TEMPLATE MODIFY: Build the list of fields by placing correct column variable names in the $LB() here. */
	 s ^CacheTemp("TRAK",repid,sort)=$LB(PAPMINo,RBOPTimeOper,AMPM,PAPMIName,PAPMIName2,WARDCode,CTSEXGender,PAPERAgeYr,PAPERDob,SPPPDesc,Alert,RBOPDateOper,RBOPDateBook, RESDesc,CTPCPDesc,Anaesthetist,WLProcedureFreeText,PAPMIRowId,NumAlerts,Urgency,WLDaysOnList)
	 s ind=ind+1
 
	 /* TEMPLATE MODIFY: Change field variables to match row columns - copy FETCH FIRST ROW from above */
	 //fetch rows
	 &sql(fetch SWARHRTHR1003Cursor INTO :PAPMINo,:RBOPTimeOper,:PAPMIName,:PAPMIName2,:WARDCode,:CTSEXGender,:PAPERAgeYr,:PAPERDob,:SPPPDesc,:Alert,:RBOPDateOper,:RBOPDateBook,:RESDesc,:CTPCPDesc,:Anaesthetist,:WLProcedureFreeText,:PAPMIRowId,:Urgency,:WLDaysOnList)
 }

 &SQL(CLOSE SWARHRTHR1003Cursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FormatDates
 /* TEMPLATE MODIFY: Add an entry to perform a date format for all date/time fields here */
 s RBOPDateOper=..ConvertDateToODBC(RBOPDateOper)
 s RBOPDateBook=..ConvertDateToODBC(RBOPDateBook)
 s WLProcedureFreeText = $LISTTOSTRING(WLProcedureFreeText, $CHAR(13)_$CHAR(10))
 s PAPERDob =..ConvertDateToODBC(PAPERDob)
 q
FormatTimes
 s AMPM = $SELECT(RBOPTimeOper < (12*60*60):"AM",1:"PM")
 s RBOPTimeOper=..ConvertTimeToODBC(RBOPTimeOper)
 q
 
GetNumAlerts(PAPMIRowId)
 s numAlerts=0
 s (Childsub, ALMCreateDate, ALMClosedFlag, ALMClosedDate) = ""
 For {
	s Childsub=$O(^PAPER(PAPMIRowId,"ALM",Childsub))
	Quit:(Childsub="")
	s ALMCreateDate=$P(^PAPER(PAPMIRowId,"ALM",Childsub),"^",4)
	s ALMClosedFlag=$P(^PAPER(PAPMIRowId,"ALM",Childsub),"^",7)
	s ALMClosedDate=$P(^PAPER(PAPMIRowId,"ALM",Childsub),"^",15)
	if ((ALMClosedFlag="N") && (ALMCreateDate<=$NOW()) && ((ALMClosedDate="") || (ALMClosedDate>$NOW()))) {
		s numAlerts=numAlerts+1
	}
 }
 q numAlerts
]]></Implementation>
</Method>

<Method name="SWARHRTHR1003QueryFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/* TEMPLATE MODIFY: Rename Stored Proc query to <MyStoredProcName> 
 * TEMPLATE MODIFY: Change parameters to match desired stored procedure parameters
 * TEMPLATE MODIFY: Change ROWSPEC list to match desired output column names and column data types */
]]></Content>
</UDLText>

<Query name="SWARHRTHR1003Query">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Library.String,DateFrom:%Date,DateTo:%Date,Doctor:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAPMINo:%Library.String,RBOPTimeOper:%Library.String,AMPM:%Library.String,PAPMIName:%Library.String,PAPMIName2:%Library.String,WARDCode:%Library.String,CTSEXGender:%Library.String,PAPERAgeYr:%Library.Integer,PAPERDob:%Library.Date,SPPPDesc:%Library.String,Alert:%Library.String,RBOPDateOper:%Library.Date,RBOPDateBook:%Library.Date,RESDesc:%Library.String,CTPCPDesc:%Library.String,Anaesthetist:%Library.String,WLProcedureFreeText:%Library.String,PAPMIRowId:%Library.Integer,NumAlerts:%Library.Integer,Urgency:%Library.Integer,WLDaysOnList:%Library.String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
