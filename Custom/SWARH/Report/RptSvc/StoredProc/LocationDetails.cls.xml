<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.LocationDetails">
<Description><![CDATA[
***************************************************************************************************************************************
* Report Code: Custom.SWARH.Report.RptSvc.StoredProc.LocationDetails
* Report Description: Datasets to be used by Reporting Server reports requiring specific location derived data
* Menu Caption: N/A
* Initial Release: ??/??/?? - Phuong-Dung Hoang
* Modified: 22/10/15 - RG - Added LocationsCSV
*
* LocationDetails(LocationRowId,HospID) - Returns specified rowid row
* LocationsCSV(LocationCSV)             - Converts a Comma-Separated-Value (string) containing location rowids 
*                                         into a CSV containing their descriptions.  
*                                         eg: '101,33' => 'Neonatology - Medical wdhs,Paediatric Surgery swhw'
***************************************************************************************************************************************]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/LocationDetails.xml#1 $</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
/*
 * Procedure Name: Custom_SWARH_Report_RptSvc_StoredProc.LocationDetails_LocationDetails(LocationRowId) <br>
 * Report Code: Used by all Reporting Server reports with selectable location <br>
 * SWARH Developer: Phuong-Dung Hoang <br>
 */
]]></Content>
</UDLText>

<Method name="LocationDetailsClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="LocationDetailsExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,LocationRowId:%Library.Integer,HospID:%Library.Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 New CTLOCRowId, CTLOCCode, CTLOCDesc, CTLOCHospitalDR
 Set (CTLOCRowId,CTLOCHospitalDR)=0
 Set (CTLOCCode, CTLOCDesc)=""

 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()

  
 &SQL(DECLARE LocationDetailsCursor CURSOR FOR 
         SELECT	CTLOC_RowId,CTLOC_Code,CTLOC_Desc,CTLOC_Hospital_DR
         FROM SqlUser.CT_Loc
         WHERE CTLOC_RowId = :LocationRowId
         AND CTLOC_Hospital_DR = :HospID
         AND CTLOC_DateActiveFrom <= CURRENT_DATE AND (CTLOC_DateActiveTo IS NULL OR CTLOC_DateActiveTo >= CURRENT_DATE)	)
 &SQL(OPEN LocationDetailsCursor)
 
 //FETCH FIRST ROW
 d FetchRow
  
 while END=0 {
  
	 //d FormatDates
  	 //d FormatTimes
  	 
	 s sort = $ZCVT(CTLOCDesc,"U")_" "_$ZCVT(CTLOCRowId,"U")_ind
 
	 /* TEMPLATE MODIFY: Build the list of fields by placing correct column variable names in the $LB() here. */
	 s ^CacheTemp("TRAK",repid,sort)=$LB(CTLOCRowId, CTLOCCode, CTLOCDesc, CTLOCHospitalDR)
	 s ind=ind+1
 
	 //fetch rows
	 d FetchRow
 }

 &SQL(CLOSE LocationDetailsCursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(fetch LocationDetailsCursor INTO :CTLOCRowId, :CTLOCCode, :CTLOCDesc, :CTLOCHospitalDR)
 if SQLCODE '= 0 set END = 1
 q
 
FormatDates
 q
FormatTimes
 q
]]></Implementation>
</Method>

<Method name="LocationDetailsFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="LocationDetails">
<Type>%Library.Query</Type>
<FormalSpec>LocationRowId:%Library.Integer,HospID:%Library.Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="CTLOCRowId:%Library.Integer, CTLOCCode:%Library.String, CTLOCDesc:%Library.String, CTLOCHospitalDR:%Library.Integer"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>

<Method name="LocationsCSVExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,LocationsCSV:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$INCREMENT(^CacheTemp(..#CACHETEMPSUBSCRIPT))
 
 New LocationsString

 Set (LocationsString)=""
 
 Set ind=1, END=0

 //Start Monitor (if configured to capture stats)
 Set mon=..MonitorBegin()

 //Convert ODBC dates to cache format
 //Set DateFrom=..ConvertDateToCache(DateFrom)
 //Set DateTo=..ConvertDateToCache(DateTo)
 
 &SQL(DECLARE LocationsCSVCursor CURSOR FOR
    SELECT
      LIST(CTLOC_Desc) AS LocationsString
    FROM
      SQLUser.CT_Loc
    WHERE
      INSTR(',' || :LocationsCSV || ',', ',' || CTLOC_RowID || ',') <> 0
	)
	 	
 &SQL(OPEN LocationsCSVCursor)
 
 //FETCH FIRST ROW
 Do FetchRowLocationsCSV
  
 While END=0 {
  
	 Do FormatDateLocationsCSV
  	 Do FormatTimesLocationsCSV
  	 Do FormatStringsLocationsCSV
  	 
	 Set sort = ind	
 
	 Set ^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,sort)=$LISTBUILD(LocationsString)
	 Set ind=ind+1
 
	 //fetch rows
	 Do FetchRowLocationsCSV
 }

 &SQL(CLOSE LocationsCSVCursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$ListBuild(0,repid,0)

 Quit $$$OK

FetchRowLocationsCSV
 &sql(FETCH LocationsCSVCursor INTO :LocationsString)
 If SQLCODE '= 0 Set END = 1
 Quit
 
FormatDateLocationsCSV
 //Set AdmDate=..ConvertDateToODBC(AdmDate)
 //Set DischgDate=..ConvertDateToODBC(DischgDate)
 Quit
 
FormatTimesLocationsCSV //Be sure to set fields in Query output as '%String' then format Reporting Services field as Time.
 //Set AdmTime=..ConvertTimeToHHMM(AdmTime) 
 //Set DischgTime=..ConvertTimeToHHMM(DischgTime)
 Quit
 
FormatStringsLocationsCSV
 if LocationsString'="" s LocationsString=$REPLACE(LocationsString,",",", ")
 Quit
]]></Implementation>
</Method>

<Method name="LocationsCSVFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$LIST(QHandle,1)
 Set repid=$LIST(QHandle,2)
 Set ind=$LIST(QHandle,3)

 Set ind=$ORDER(^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,ind)
 }

 // Save QHandle
 Set QHandle=$LISTBUILD(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="LocationsCSVClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$LIST(QHandle,2)

 Kill ^CacheTemp(..#CACHETEMPSUBSCRIPT,repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="LocationsCSV">
<Type>%Library.Query</Type>
<FormalSpec>LocationsCSV:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="LocationsString:%String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
