<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.Hospital">
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/Hospital.xml#1 $</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
/*
 * Report Name: SWARHRAllHospitals <br>
 * Report Code: Used by all Reporting Server reports with selectable hospital <br>
 * SWARH Developer: Timshel Knoll-Miller <br>
 */
]]></Content>
</UDLText>

<Method name="AllHospitalsClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="AllHospitalsExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 New HOSPRowId, HOSPCode, HOSPDesc, HOSPNationalCode, HOSPDateFrom, HOSPDateTo,
 	 HOSPPhone, HOSPFax, HOSPEmail, CTZIPCode, HOSPAddress, CTCITDesc, PROVDesc
 Set (HOSPRowId)=0
 Set (HOSPCode, HOSPDesc, HOSPNationalCode, HOSPDateFrom, HOSPDateTo)=""
 Set (HOSPPhone, HOSPFax, HOSPEmail, CTZIPCode, HOSPAddress, CTCITDesc, PROVDesc)=""

 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()

  
 &SQL(DECLARE HospitalCursor CURSOR FOR 
         SELECT
                 HOSP_RowId,
                 HOSP_Code,
                 HOSP_Desc,
                 HOSP_NationalCode,
                 HOSP_DateFrom,
                 HOSP_DateTo,
                 HOSP_Phone,
                 HOSP_Fax,
                 HOSP_Email,
                 HOSP_ZipDR->CTZIP_Code,
                 HOSP_Address,
                 HOSP_City->CTCIT_Desc,
                 HOSP_Province_DR->PROV_Desc
         FROM SqlUser.CT_Hospital
         WHERE HOSP_DateFrom <= CURRENT_DATE AND (HOSP_DateTo IS NULL OR HOSP_DateTo >= CURRENT_DATE)	)
 &SQL(OPEN HospitalCursor)
 
 //FETCH FIRST ROW
 d FetchRow
  
 while END=0 {
  
	 d FormatDates
  	 //d FormatTimes
  	 
	 s sort = $ZCVT(HOSPDesc,"U")_" "_$ZCVT(HOSPRowId,"U")_ind
 
	 /* TEMPLATE MODIFY: Build the list of fields by placing correct column variable names in the $LB() here. */
	 s ^CacheTemp("TRAK",repid,sort)=$LB(HOSPRowId, HOSPCode, HOSPDesc, HOSPNationalCode, HOSPDateFrom, HOSPDateTo, HOSPPhone, HOSPFax, HOSPEmail, CTZIPCode, HOSPAddress, CTCITDesc, PROVDesc)
	 s ind=ind+1
 
	 //fetch rows
	 d FetchRow
 }

 &SQL(CLOSE HospitalCursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(fetch HospitalCursor INTO :HOSPRowId, :HOSPCode, :HOSPDesc, :HOSPNationalCode, :HOSPDateFrom, :HOSPDateTo, :HOSPPhone, :HOSPFax, :HOSPEmail, :CTZIPCode, :HOSPAddress, :CTCITDesc, :PROVDesc)
 if SQLCODE '= 0 set END = 1
 q
 
FormatDates
 s HOSPDateFrom=..ConvertDateToODBC(HOSPDateFrom)
 s HOSPDateTo=..ConvertDateToODBC(HOSPDateTo)
 q
FormatTimes
 //s PAADMAdmTime=..ConvertTimeToODBC(PAADMAdmTime)
 q
]]></Implementation>
</Method>

<Method name="AllHospitalsFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/* TEMPLATE MODIFY: Rename Stored Proc query to <MyStoredProcName> 
 * TEMPLATE MODIFY: Change parameters to match desired stored procedure parameters
 * TEMPLATE MODIFY: Change ROWSPEC list to match desired output column names and column data types */
]]></Content>
</UDLText>

<Query name="AllHospitals">
<Type>%Library.Query</Type>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="HOSPRowId:%Library.Integer, HOSPCode:%Library.Integer, HOSPDesc:%Library.String, HOSPNationalCode:%Library.Integer, HOSPDateFrom:%Library.Date, HOSPDateTo:%Library.Date, HOSPPhone:%Library.String, HOSPFax:%Library.String, HOSPEmail:%Library.String, CTZIPCode:%Library.String, HOSPAddress:%Library.String, CTCITDesc:%Library.String, PROVDesc:%Library.String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>

<UDLText name="T">
<Content><![CDATA[
/*
 * Procedure Name: Custom_SWARH_Report.RptSvc.StoredProc.Hospital <br>
 * Report Code: Used by all Reporting Server reports with selectable hospital <br>
 * SWARH Developer: Timshel Knoll-Miller <br>
 */
]]></Content>
</UDLText>

<Method name="HospitalDetailsClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="HospitalDetailsExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,HospitalRowId:%Library.Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 New HOSPRowId, HOSPCode, HOSPDesc, HOSPNationalCode, HOSPDateFrom, HOSPDateTo,
 	 HOSPPhone, HOSPFax, HOSPEmail, CTZIPCode, HOSPAddress, CTCITDesc, PROVDesc
 Set (HOSPRowId)=0
 Set (HOSPCode, HOSPDesc, HOSPNationalCode, HOSPDateFrom, HOSPDateTo)=""
 Set (HOSPPhone, HOSPFax, HOSPEmail, CTZIPCode, HOSPAddress, CTCITDesc, PROVDesc)=""

 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()

  
 &SQL(DECLARE HospitalDetailsCursor CURSOR FOR 
         SELECT
                 HOSP_RowId,
                 HOSP_Code,
                 HOSP_Desc,
                 HOSP_NationalCode,
                 HOSP_DateFrom,
                 HOSP_DateTo,
                 HOSP_Phone,
                 HOSP_Fax,
                 HOSP_Email,
                 HOSP_ZipDR->CTZIP_Code,
                 HOSP_Address,
                 HOSP_City->CTCIT_Desc,
                 HOSP_Province_DR->PROV_Desc
         FROM SqlUser.CT_Hospital
         WHERE HOSP_RowId = :HospitalRowId
           AND HOSP_DateFrom <= CURRENT_DATE AND (HOSP_DateTo IS NULL OR HOSP_DateTo >= CURRENT_DATE)	)
 &SQL(OPEN HospitalDetailsCursor)
 
 //FETCH FIRST ROW
 d HospitalDetailsFetchRow
  
 while END=0 {
  
	 d HospitalDetailsFormatDates
  	 //d HospitalDetailsFormatTimes
  	 
	 s sort = $ZCVT(HOSPDesc,"U")_" "_$ZCVT(HOSPRowId,"U")_ind
 
	 /* TEMPLATE MODIFY: Build the list of fields by placing correct column variable names in the $LB() here. */
	 s ^CacheTemp("TRAK",repid,sort)=$LB(HOSPRowId, HOSPCode, HOSPDesc, HOSPNationalCode, HOSPDateFrom, HOSPDateTo, HOSPPhone, HOSPFax, HOSPEmail, CTZIPCode, HOSPAddress, CTCITDesc, PROVDesc)
	 s ind=ind+1
 
	 //fetch rows
	 d HospitalDetailsFetchRow
 }

 &SQL(CLOSE HospitalDetailsCursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

HospitalDetailsFetchRow
 &sql(fetch HospitalDetailsCursor INTO :HOSPRowId, :HOSPCode, :HOSPDesc, :HOSPNationalCode, :HOSPDateFrom, :HOSPDateTo, :HOSPPhone, :HOSPFax, :HOSPEmail, :CTZIPCode, :HOSPAddress, :CTCITDesc, :PROVDesc)
 if SQLCODE '= 0 set END = 1
 q
 
HospitalDetailsFormatDates
 s HOSPDateFrom=..ConvertDateToODBC(HOSPDateFrom)
 s HOSPDateTo=..ConvertDateToODBC(HOSPDateTo)
 q
HospitalDetailsFormatTimes
 //s PAADMAdmTime=..ConvertTimeToODBC(PAADMAdmTime)
 q
]]></Implementation>
</Method>

<Method name="HospitalDetailsFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/* TEMPLATE MODIFY: Rename Stored Proc query to <MyStoredProcName> 
 * TEMPLATE MODIFY: Change parameters to match desired stored procedure parameters
 * TEMPLATE MODIFY: Change ROWSPEC list to match desired output column names and column data types */
]]></Content>
</UDLText>

<Query name="HospitalDetails">
<Type>%Library.Query</Type>
<FormalSpec>HospitalRowId:%Library.Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="HOSPRowId:%Library.Integer, HOSPCode:%Library.Integer, HOSPDesc:%Library.String, HOSPNationalCode:%Library.Integer, HOSPDateFrom:%Library.Date, HOSPDateTo:%Library.Date, HOSPPhone:%Library.String, HOSPFax:%Library.String, HOSPEmail:%Library.String, CTZIPCode:%Library.String, HOSPAddress:%Library.String, CTCITDesc:%Library.String, PROVDesc:%Library.String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
