<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRATD1038">
<Description>
Class for SWARHRATD1038</Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.RptSvc.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRATD1038.xml#1 $</Default>
</Parameter>

<Method name="SWARHRATD1038Close">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.
***************************************************************************************************************************************
* SWARH ATD Period Activity Report by Ward
* Initial release: 24/04/2013
* Developer: Michael Welsh 
* Report lists all active wards and there episodes by CurrentWard for the report period.
* Subreports use stored procedures SWARHRATD1038a(counts admissions) and SWARHATD1038b(lists leave days)
***************************************************************************************************************************************</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRATD1038Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer,DateFrom:%Date,DateTo:%Date]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 k ^zbernard	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 New RptDays,PAADMRowId,AdmNo,AdmDate,DchDate,CurrentWardDR,CurrentWard,HOSPDesc,AdmDuring,DchDuring,SameDay,LOS,LOSBefore,LOSAfter,
 WRowID,WCode,WDesc
 s (AdmNo,AdmDate,DchDate,CurrentWard,HOSPDesc,WCode,WDesc)=""
 s (RptDays,PAADMRowId,CurrentWardDR,AdmDuring,DchDuring,SameDay,LOS,LOSBefore,LOSAfter,WRowID) = 0
  
 s ind=1,END=0
 
 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)
   
 &sql(Select datediff("d",:DateFrom,:DateTo) INTO :RptDays)
 s RptDays = RptDays+1
   
 &sql(DECLARE SWARHRATD1038 CURSOR FOR
 	SELECT a.PAADM_RowID AS PAADMRowId,
		a.PAADM_ADMNo AS AdmNo,
		a.PAADM_AdmDate AS AdmDate,
		a.PAADM_DischgDate AS DchDate,
		a.PAADM_CurrentWard_DR AS CurrentWardDR,
		a.PAADM_CurrentWard_DR->WARD_Code AS CurrentWard,
		a.PAADM_Hospital_DR->HOSP_Desc As HOSPDesc,
		CASE WHEN a.PAADM_AdmDate >= :DateFrom THEN 1 ELSE 0 END AS AdmDuring,
		CASE WHEN a.PAADM_DischgDate <= :DateTo THEN 1 ELSE 0 END AS DchDuring,
		CASE WHEN a.PAADM_AdmDate = a.PAADM_DischgDate THEN 1 ELSE 0 END AS SameDay,
		CASE WHEN a.PAADM_AdmDate < :DateFrom THEN datediff("d",a.PAADM_AdmDate,:DateFrom) ELSE 0 END AS LOSBefore,
		CASE WHEN a.PAADM_DischgDate > :DateTo THEN datediff("d",:DateTo,a.PAADM_DischgDate) -1 ELSE 0 END AS LOSAfter,
		datediff("d",a.PAADM_AdmDate,a.PAADM_DischgDate) AS LOS,
		w.WARD_RowID AS WRowID,
		w.WARD_Code AS WCode,
		w.WARD_Desc AS WDesc

	FROM SQLUser.PAC_WARD w LEFT JOIN SQLUser.PA_Adm a ON a.PAADM_CurrentWard_DR = w.WARD_RowID
            AND a.PAADM_Hospital_DR = :Hospital
			AND (a.PAADM_Type = 'I' )
			AND (a.PAADM_VisitStatus = 'D')
    		AND (a.PAADM_ADMNo NOT LIKE 'ED%')
    		AND (a.PAADM_AdmDate <= :DateTo)
    		AND (a.PAADM_DischgDate >= :DateFrom), SQLUser.PAC_Bed b
	
	WHERE b.BED_WARD_ParRef = w.WARD_RowID
        AND w.WARD_LocationDR->CTLOC_Hospital_DR = :Hospital
        AND w.WARD_LocationDR->CTLOC_Type = 'W'
        AND w.WARD_LocationDR->CTLOC_DateActiveTo IS NULL
        AND w.WARD_Active = 'Y'
        AND b.BED_RcFlag = 'Y'
        AND b.BED_DateTo IS NULL
	UNION
	SELECT a.PAADM_RowID AS PAADMRowId,
		a.PAADM_ADMNo AS AdmNo,
		a.PAADM_AdmDate AS AdmDate,
		a.PAADM_DischgDate AS DchDate,
		a.PAADM_CurrentWard_DR AS CurrentWardDR,
		a.PAADM_CurrentWard_DR->WARD_Code AS CurrentWard,
		a.PAADM_Hospital_DR->HOSP_Desc As HOSPDesc,
		CASE WHEN a.PAADM_AdmDate BETWEEN :DateFrom and :DateTo THEN 1 ELSE 0 END AS AdmDuring,
		CASE WHEN a.PAADM_DischgDate BETWEEN :DateFrom and :DateTo THEN 1 ELSE 0 END AS DchDuring,
		CASE WHEN a.PAADM_AdmDate = a.PAADM_DischgDate THEN 1 ELSE 0 END AS SameDay,
		CASE WHEN a.PAADM_AdmDate < :DateFrom THEN datediff("d",a.PAADM_AdmDate,:DateFrom) ELSE 0 END AS LOSBefore,
		0 AS LOSAfter,
		datediff("d",a.PAADM_AdmDate,:DateTo) +1 AS LOS,
		w.WARD_RowID AS WRowID,
		w.WARD_Code AS WCode,
		w.WARD_Desc AS WDesc

	FROM SQLUser.PAC_WARD w LEFT JOIN SQLUser.PA_Adm a ON a.PAADM_CurrentWard_DR = w.WARD_RowID
            AND a.PAADM_Hospital_DR = :Hospital
			AND (a.PAADM_Type = 'I' )
			AND (a.PAADM_VisitStatus = 'A')
    		AND (a.PAADM_ADMNo NOT LIKE 'ED%')
    		AND (a.PAADM_AdmDate <= :DateTo)
    		AND (a.PAADM_DischgDate IS NULL), SQLUser.PAC_Bed b 
	WHERE b.BED_WARD_ParRef = w.WARD_RowID
        AND w.WARD_LocationDR->CTLOC_Hospital_DR = :Hospital
        AND w.WARD_LocationDR->CTLOC_Type = 'W'
        AND w.WARD_LocationDR->CTLOC_DateActiveTo IS NULL
        AND w.WARD_Active = 'Y'
        AND b.BED_RcFlag = 'Y'
        AND b.BED_DateTo IS NULL

    ORDER BY CurrentWardDR
	)

 &sql(open SWARHRATD1038)
 
 s (AdmWard) = ""
 s (PrevWardDR) = 0  
 
 //fetch first row
 d FetchRow
 
 d GetTotalBedCount 
 
 while END=0{
 
 If PAADMRowId s AdmWard=..GetAdmWardForEpisode(PAADMRowId)
 
 If PrevWardDR '= WRowID do GetAvailBedCount
 
 s LOS = LOS - (LOSBefore + LOSAfter)
 
 d FormatDates

 s sort = $ZCVT(CurrentWard,"U")_" "_ind
 
 s ^CacheTemp(repid,sort)=$LB(RptDays,PAADMRowId,AdmNo,AdmDate,DchDate,CurrentWardDR,CurrentWard,HOSPDesc,AdmDuring,DchDuring,SameDay,LOSBefore,LOSAfter,LOS,
 WRowID,WCode,WDesc,AdmWard,AvailBedCount,TotalBedCount)
	 	 
 s PrevWardDR = WRowID
  
 Set ind=ind+1
 
 //fetch rows
 d FetchRow
 
 }

 &sql(close SWARHRATD1038)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)
 
 Quit $$$OK
 
FetchRow
 
 &sql(FETCH SWARHRATD1038 INTO :PAADMRowId,:AdmNo,:AdmDate,:DchDate,:CurrentWardDR,:CurrentWard,:HOSPDesc,:AdmDuring,:DchDuring,
 :SameDay,:LOSBefore,:LOSAfter,:LOS,:WRowID,:WCode,:WDesc)
 if SQLCODE '= 0 set END = 1
 q 
 
GetAvailBedCount
 &sql(SELECT COUNT(Distinct Bed_RowID) INTO :AvailBedCount
		FROM SQLUser.PAC_BED b INNER JOIN SQLUser.PAC_WARD w ON w.WARD_RowID = b.BED_WARD_ParRef
		WHERE b.BED_RcFlag = 'Y'
		AND b.BED_DateTo IS NULL
		AND w.WARD_LocationDR->CTLOC_Hospital_DR = :Hospital
		AND w.WARD_LocationDR->CTLOC_Type = 'W'
		AND w.WARD_Active = 'Y'
		AND w.WARD_LocationDR->CTLOC_DateActiveTo IS NULL
		AND w.WARD_RowID = :WRowID
	)
 Quit
GetTotalBedCount
	&sql(SELECT COUNT(Distinct Bed_RowID) INTO :TotalBedCount
		FROM SQLUser.PAC_BED b INNER JOIN SQLUser.PAC_WARD w ON w.WARD_RowID = b.BED_WARD_ParRef
		WHERE b.BED_RcFlag = 'Y'
		AND b.BED_DateTo IS NULL
		AND w.WARD_LocationDR->CTLOC_Hospital_DR = :Hospital
		AND w.WARD_LocationDR->CTLOC_Type = 'W'
		AND w.WARD_Active = 'Y'
		AND w.WARD_LocationDR->CTLOC_DateActiveTo IS NULL
		
	)
 Quit

FormatDates
 // Convert the dates to ODBC date format
 If AdmDate Set AdmDate=$ZD(AdmDate,3)
 If DchDate Set DchDate=$ZD(DchDate,3)
 Quit
]]></Implementation>
</Method>

<Method name="SWARHRATD1038Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)
 
 Set ind=$o(^CacheTemp(repid,ind))
  
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }
 
 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRATD1038">
<Description>
GHA List reports Stored Procedure
It expects 2 parameter of type date and will return a list of records:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time 																										</Description>
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer,DateFrom:%Date,DateTo:%Date</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="RptDays:%Integer,PAADMRowId:%Integer,AdmNo:%String,AdmDate:%Date,DchDate:%Date,CurrentWardDR:%Integer,CurrentWard:%String,HOSPDesc:%String,AdmDuring:%Integer,DchDuring:%Integer,SameDay:%Integer,LOSBefore:%Integer,LOSAfter:%Integer,LOS:%Integer,WRowID:%Integer,WCode:%String,WDesc:%String,AdmWard:%String,AvailBedCount:%Integer,TotalBedCount:%Integer"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
