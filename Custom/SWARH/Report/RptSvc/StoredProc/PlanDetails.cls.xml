<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2015.2 (Build 664_3_16515U)" ts="2017-05-29 12:56:52">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.PlanDetails">
<Description>
***************************************************************************************************************************************
* Report Code: Custom.SWARH.Report.RptSvc.StoredProc.PlanDetails
* Report Description: Datasets to be used by Reporting Server reports requiring specific Community Plan derived data
* Menu Caption: N/A
* Initial Release: 21/07/2016 Developer: Michael Welsh
* Modified:
***************************************************************************************************************************************</Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeChanged>64432,46509.713438</TimeChanged>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/PlanDetails.xml#1 $</Default>
</Parameter>

<Method name="PlansCSVExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,PlansCSV:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk test test test
 New repid,ind,g,d

 // Use $Increment to get the next node
 Set repid=$INCREMENT(^CacheTemp(..#CACHETEMPSUBSCRIPT))
 
 New PlansString

 Set (PlansString)=""
 
 Set ind=1, END=0

 //Start Monitor (if configured to capture stats)
 Set mon=..MonitorBegin()
 
 &SQL(DECLARE PlansCSVCursor CURSOR FOR
	SELECT
      LIST(AUXIT_Desc) AS PlansString
	FROM
      SQLUser.ARC_AuxilInsurType
	WHERE
      INSTR(',' || :PlansCSV || ',', ',' || AUXIT_RowId || ',') <> 0
	)
	 	
 &SQL(OPEN PlansCSVCursor)
 
 //FETCH FIRST ROW
 Do FetchRowPlansCSV
  
 While END=0 {
  
  	 Do FormatStringsPlansCSV
  	 
	 Set sort = ind	
 
	 Set ^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,sort)=$LISTBUILD(PlansString)
	 Set ind=ind+1
 
	 //fetch rows
	 Do FetchRowPlansCSV
 }

 &SQL(CLOSE PlansCSVCursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$ListBuild(0,repid,0)

 Quit $$$OK

FetchRowPlansCSV
 &SQL(FETCH PlansCSVCursor INTO :PlansString)
 If SQLCODE '= 0 Set END = 1
 Quit
 
FormatStringsPlansCSV
 if PlansString'="" s PlansString=$REPLACE(PlansString,",",", ")
 Quit
]]></Implementation>
</Method>

<Method name="PlansCSVFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$LIST(QHandle,1)
 Set repid=$LIST(QHandle,2)
 Set ind=$LIST(QHandle,3)

 Set ind=$ORDER(^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,ind)
 }

 // Save QHandle
 Set QHandle=$LISTBUILD(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="PlansCSVClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$LIST(QHandle,2)

 Kill ^CacheTemp(..#CACHETEMPSUBSCRIPT,repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="PlansCSV">
<Type>%Library.Query</Type>
<FormalSpec>PlansCSV:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PlansString:%String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
