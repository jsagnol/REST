<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRATD1003">
<Description>
Class for SWARHRATD1003 by Surgeon</Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRATD1003.xml#1 $</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
/*
 * Report Name: Patients by ICD10 Codes by Surgeon <br>
 * Report Code: SWARHRATD1003 <br>
 * SWARH Developer: Michael Welsh <br>
 * Updated: 04/02/2013
 */
]]></Content>
</UDLText>

<Method name="SWARHRATD1003Close">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRATD1003Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer,DateFrom:%Date,DateTo:%Date,ICDPrefix:%String,SICDCode:%String,EICDCode:%String,pSurgeonCode:%String,pWardCode:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 k ^zbernard	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 New PAADMRowId,MRADMRowID,PAPMINo,PAADMADMNo,PAPMIName,PAPMIName2,CTSEXCode,PAPMIDOB,CTZIPCode,INDSTCode,PAADMType,PAADMPAPMIDR,
 PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,AdmDoc,HOSPDesc,PAADMHospitalDR,AdmDocCode,SurgeonCode,Surgeon,
 WardCode,WardDesc,FinConCode
 s (PAADMRowId,MRADMRowID,PAADMPAPMIDR,PAADMHospitalDR)=0
 s (PAPMINo,PAADMADMNo,PAPMIName,PAPMIName2,CTSEXCode,PAPMIDOB,CTZIPCode,INDSTCode,PAADMType,
 	PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,AdmDoc,HOSPDesc,AdmDocCode,SurgeonCode,Surgeon,WardCode,WardDesc,FinConCode)="" 
  
 s ind=1

 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)
 
 //s ^bernard("2")=(2)
 
 &sql(declare SWARHRATD1003 cursor for
 SELECT DISTINCT
 	PAADM_RowID,
 	MRADM.MRADM_RowId AS MRADMRowID,
 	PAPMI_No,
 	PAADM_ADMNo,
 	UCASE(PAPMI_Name),
 	UCASE(PAPMI_Name2),
 	PAPMI_Sex_DR->CTSEX_Code,
 	PAPMI_DOB,
    PAPMI_PAPER_DR->PAPER_ZIP_DR->CTZIP_Code,
    PAPMI_PAPER_DR->PAPER_IndigStat_DR->INDST_Code,
    PAADm_Type,
    PAADM_PAPMI_DR,
    PAADM_AdmDate,
    PAADM_AdmTime,
    PAADM_DischgDate,
    PAADM_DischgTime,
    {fn UCASE(%EXACT(PAADM_AdmDocCodeDR->CTPCP_Desc))} As AdmDoc,
    PAADM_Hospital_DR->HOSP_Desc,
    PAADM_Hospital_DR,
    PAADM_AdmDocCodeDR->CTPCP_Code As AdmDocCode,
    ANAOP_Surgeon_DR->CTPCP_Code As SurgeonCode, 
    UCASE(ANAOP_Surgeon_DR->CTPCP_Desc) As Surgeon,
    PAADM_CurrentWard_DR->Ward_Code As WardCode,
    UCASE(PAADM_CurrentWard_DR->Ward_Desc) As WardDesc
   	
 FROM SQLUser.PA_Adm A
 		INNER JOIN SQLUser.MR_Adm MRADM ON A.PAADM_MainMRADM_DR = MRADM.MRADM_RowId
        INNER JOIN SQLUser.PA_PatMas B ON A.PAADM_PAPMI_DR = B.PAPMI_RowId
        INNER JOIN SQLUser.MR_Diagnos C ON A.PAADM_MainMRADM_DR = C.MRDIA_MRADM_ParRef
        INNER JOIN SqlUser.SQLUser.OR_Anaesthesia E ON A.PAADM_RowID = E.ANA_PAADM_ParRef
        INNER JOIN SQLUser.OR_Anaest_Operation F ON E.ANA_RowId = F.ANAOP_Par_Ref
       
       
 WHERE
 	PAADM_Hospital_DR = :Hospital
 	AND PAADM_Type='I' -- Inpatient Episodes ONLY
 	AND PAADM_VisitStatus ='D'
 	AND PAADM_DischgDate  BETWEEN :DateFrom AND :DateTo
 	AND	MRDIA_ICDCode_DR->MRCID_Code <> ''
 	AND (UCASE(MRDIA_Prefix) = UCASE(:ICDPrefix) OR (:ICDPrefix IS NULL))
 	AND (MRDIA_ICDCode_DR->MRCID_Code BETWEEN :SICDCode AND :EICDCode OR (:SICDCode IS NULL)) 
 	AND (ANAOP_Surgeon_DR->CTPCP_RowID = :pSurgeonCode OR (:pSurgeonCode IS NULL))
 	AND (UCASE(PAADM_CurrentWard_DR->Ward_RowID) = UCASE(:pWardCode) OR (:pWardCode IS NULL))
 )

 
 &sql(open SWARHRATD1003)
 
  //fetch first row 
 &sql(fetch SWARHRATD1003 into :PAADMRowId,:MRADMRowID,:PAPMINo,:PAADMADMNo,:PAPMIName,:PAPMIName2,:CTSEXCode,:PAPMIDOB,:CTZIPCode,:INDSTCode,:PAADMType,
 :PAADMPAPMIDR,:PAADMAdmDate,:PAADMAdmTime,:PAADMDischgDate,:PAADMDischgTime,:AdmDoc,:HOSPDesc,:PAADMHospitalDR,:AdmDocCode,
 :SurgeonCode,:Surgeon,:WardCode,:WardDesc)
 

 while 'SQLCODE{
 
 d FormatDates
 d FormatTimes
 
 //Calls Custom.SWARH.StoredProc.Abstract ClassMethod GetICD10DetailsList. Returns Diagnosis details for Episode.
 s ICDDetailsList =..GetICD10DetailsList(MRADMRowID) 
 
 //Calls Custom.SWARH.StoredProc.Abstract ClassMethod GetProcDetailsList. Returns Procedure details for Episode.
 s ProcDetailsList =..GetProcDetailsList(MRADMRowID)
 
 s FinConCode =..GetFinDetailsForEpisode(PAADMRowId)
 
 // build the row
 Set ^CacheTemp(repid,ind)=$LB(PAADMRowId,MRADMRowID,PAPMINo,PAADMADMNo,PAPMIName,PAPMIName2,CTSEXCode,PAPMIDOB,CTZIPCode,INDSTCode,PAADMType,
 PAADMPAPMIDR,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,AdmDoc,HOSPDesc,PAADMHospitalDR,AdmDocCode,SurgeonCode,
 Surgeon,WardCode,WardDesc,ICDDetailsList,ProcDetailsList,FinConCode)
 s ind=ind+1
 //fetch rows
 &sql(fetch SWARHRATD1003 into :PAADMRowId,:MRADMRowID,:PAPMINo,:PAADMADMNo,:PAPMIName,:PAPMIName2,:CTSEXCode,:PAPMIDOB,:CTZIPCode,:INDSTCode,:PAADMType,
 :PAADMPAPMIDR,:PAADMAdmDate,:PAADMAdmTime,:PAADMDischgDate,:PAADMDischgTime,:AdmDoc,:HOSPDesc,:PAADMHospitalDR,:AdmDocCode,:SurgeonCode,
 :Surgeon,:WardCode,:WardDesc)
 }

 //s ^zBernard("3")=(3)
 &sql(close SWARHRATD1003)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 //s ^zBernard("4")=(4)

 Quit $$$OK

FormatDates
 // Convert the dates to ODBC date format
 If PAPMIDOB Set PAPMIDOB=$ZD(PAPMIDOB,3)
 If PAADMAdmDate Set PAADMAdmDate=$ZD(PAADMAdmDate,3)
 If PAADMDischgDate Set PAADMDischgDate=$ZD(PAADMDischgDate,3)
 Quit

FormatTimes
 // Convert the times to ODBC time format
 If PAADMAdmTime Set PAADMAdmTime=$ZT(PAADMAdmTime,1)
 If PAADMDischgTime Set PAADMDischgTime=$ZT(PAADMDischgTime,1)
 Quit
]]></Implementation>
</Method>

<Method name="SWARHRATD1003Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)

 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRATD1003">
<Description>
GHA List reports Stored Procedure
It expects 2 parameter of type date and will return a list of records:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time </Description>
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer,DateFrom:%Date,DateTo:%Date,ICDPrefix:%String,SICDCode:%String,EICDCode:%String,pSurgeonCode:%String,pWardCode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAADMRowId:%Integer,MRADMRowID:%Integer,PAPMINo:%String(MAXLEN=255),PAADMADMNo:%String(MAXLEN=255),PAPMIName:%String(MAXLEN=255),PAPMIName2:%String(MAXLEN=255),CTSEXCode:%String(MAXLEN=255),PAPMIDOB:%Date,CTZIPCode:%String(MAXLEN=255),INDSTCode:%String(MAXLEN=255),PAADMType:%String(MAXLEN=255),PAADMPAPMIDR:%Integer,PAADMAdmDate:%Date,PAADMAdmTime:%Time,PAADMDischgDate:%Date,PAADMDischgTime:%Time,AdmDoc:%String(MAXLEN=255),HOSPDesc:%String(MAXLEN=255),PAADMHospitalDR:%Integer,AdmDocCode:%String(MAXLEN=255),SurgeonCode:%String(MAXLEN=255),Surgeon:%String(MAXLEN=255),WardCode:%String(MAXLEN=255),WardDesc:%String(MAXLEN=255),ICDDetailsList:%String(MAXLEN=255),ProcDetailsList:%String(MAXLEN=255),FinConCode:%String(MAXLEN=255)"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
