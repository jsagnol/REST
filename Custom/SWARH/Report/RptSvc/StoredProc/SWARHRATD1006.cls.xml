<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRATD1006">
<Description>
Class for SWARHRATD1006</Description>
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRATD1006.xml#1 $</Default>
</Parameter>

<Method name="SWARHRATD1006Close">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRATD1006Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer,DateFrom:%Date,DateTo:%Date,SPCode:%Integer,EPCode:%Integer,SDRGCode:%String,EDRGCode:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 k ^zbernard	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 New PAPMINo,PAADMADMNo,PAPMIName,PAPMIName2,CTZIPCode,PAADMType,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,AdmDoc,
 HOSPDesc,PAADMHospitalDR,DRGCode,DRGDesc,AdmSource,DischDestin
 s (PAADMPAPMIDR, PAADMHospitalDR)=0
 s (PAPMINo,PAADMADMNo,PAPMIName,PAPMIName2,CTZIPCode,PAADMType,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,AdmDoc,
 HOSPDesc,PAADMHospitalDR,DRGCode,DRGDesc,AdmSource,DischDestin)="" 
  
 s ind=1

 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)
 
 //s ^bernard("2")=(2)
 
 &sql(declare SWARHRATD1006 cursor for
 SELECT DISTINCT
  	PAPMI_No,
 	PAADM_ADMNo,
 	UCASE(PAPMI_Name),
 	UCASE(PAPMI_Name2),
 	PAPMI_PAPER_DR->PAPER_ZIP_DR->CTZIP_Code,
    PAADm_Type,
    PAADM_AdmDate,
    PAADM_AdmTime,
    PAADM_DischgDate,
    PAADM_DischgTime,
    {fn UCASE(%EXACT(PAADM_AdmDocCodeDR->CTPCP_Desc))} As AdmDoc,
    PAADM_Hospital_DR->HOSP_Desc,
    PAADM_Hospital_DR,
    PAADM_MainMRADM_DR->MRADM_DRG_DR->DRG_Code As DRGCode,
    PAADM_MainMRADM_DR->MRADM_DRG_DR->DRG_Desc As DRGDesc,
    PAADM_AdmSrc_DR->ADSOU_Desc As AdmSource,
    PAADM_MainMRADM_DR->MRADM_DischType_DR->CTDSP_Desc as DischDestin
   	
 FROM SQLUser.PA_Adm A
        LEFT OUTER JOIN SQLUser.PA_PatMas B ON A.PAADM_PAPMI_DR = B.PAPMI_RowId
        LEFT OUTER JOIN SQLUser.MR_Diagnos C ON A.PAADM_MainMRADM_DR = C.MRDIA_MRADM_ParRef
             
 	
 WHERE
 	PAADM_Hospital_DR = :Hospital
 	AND PAADM_Type='I' -- Inpatient Episodes ONLY
 	AND PAADM_VisitStatus ='D'
 	AND PAADM_DischgDate  BETWEEN :DateFrom AND :DateTo
 	AND PAADM_MainMRADM_DR->MRADM_DRG_DR->DRG_Code <> ""
 	AND (PAPMI_PAPER_DR->PAPER_ZIP_DR->CTZIP_Code BETWEEN :SPCode AND :EPCode OR (:SPCode IS NULL)) 
 	AND (UCASE(PAADM_MainMRADM_DR->MRADM_DRG_DR->DRG_Code) BETWEEN UCASE(:SDRGCode) AND UCASE(:EDRGCode) OR (:SDRGCode IS NULL)) 
 )

 
 &sql(open SWARHRATD1006)
 
  //fetch first row 
 &sql(fetch SWARHRATD1006 into :PAPMINo,:PAADMADMNo,:PAPMIName,:PAPMIName2,:CTZIPCode,:PAADMType,:PAADMAdmDate,:PAADMAdmTime,
 :PAADMDischgDate,:PAADMDischgTime,:AdmDoc,:HOSPDesc,:PAADMHospitalDR,:DRGCode,:DRGDesc,:AdmSource,:DischDestin)

 while 'SQLCODE{
 
 d FormatDates
 d FormatTimes

 // build the row
 Set ^CacheTemp(repid,ind)=$LB(PAPMINo,PAADMADMNo,PAPMIName,PAPMIName2,CTZIPCode,PAADMType,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,AdmDoc,
 HOSPDesc,PAADMHospitalDR,DRGCode,DRGDesc,AdmSource,DischDestin)
 s ind=ind+1
 //fetch rows
 &sql(fetch SWARHRATD1006 into :PAPMINo,:PAADMADMNo,:PAPMIName,:PAPMIName2,:CTZIPCode,:PAADMType,:PAADMAdmDate,:PAADMAdmTime,
 :PAADMDischgDate,:PAADMDischgTime,:AdmDoc,:HOSPDesc,:PAADMHospitalDR,:DRGCode,:DRGDesc,:AdmSource,:DischDestin)
 }

 //s ^zBernard("3")=(3)
 &sql(close SWARHRATD1006)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 //s ^zBernard("4")=(4)

 Quit $$$OK


FormatDates
 // Convert the dates to ODBC date format
 If PAADMAdmDate Set PAADMAdmDate=$ZD(PAADMAdmDate,3)
 If PAADMDischgDate Set PAADMDischgDate=$ZD(PAADMDischgDate,3)
 Quit

FormatTimes
 // Convert the times to ODBC time format
 If PAADMAdmTime Set PAADMAdmTime=$ZT(PAADMAdmTime,1)
 If PAADMDischgTime Set PAADMDischgTime=$ZT(PAADMDischgTime,1)
 Quit
]]></Implementation>
</Method>

<Method name="SWARHRATD1006Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)

 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRATD1006">
<Description>
GHA List reports Stored Procedure
It expects 2 parameter of type date and will return a list of records:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time </Description>
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer,DateFrom:%Date,DateTo:%Date,SPCode:%Integer,EPCode:%Integer,SDRGCode:%String,EDRGCode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAPMINo:%String(MAXLEN=255),PAADMADMNo:%String(MAXLEN=255),PAPMIName:%String(MAXLEN=255),PAPMIName2:%String(MAXLEN=255),CTZIPCode:%String(MAXLEN=255),PAADMType:%String(MAXLEN=255),PAADMAdmDate:%Date,PAADMAdmTime:%Time,PAADMDischgDate:%Date,PAADMDischgTime:%Time,AdmDoc:%String(MAXLEN=255),HOSPDesc:%String(MAXLEN=255),PAADMHospitalDR:%Integer,DRGCode:%String(MAXLEN=255),DRGDesc:%String(MAXLEN=255),AdmSource:%String(MAXLEN=255),DischDestin:%String(MAXLEN=255)"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
