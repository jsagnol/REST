<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRNAP1017">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARHRNAP1017
* Report Description: VINAH Episodes
* Menu Caption: 
* Initial release: 
* Developer: Michael Welsh
* Modified: Jayson Sagnol - Altered referral acknowledge date
**************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRNAP1017.xml#1 $</Default>
</Parameter>

<Method name="SWARHRNAP1017Close">
<Description>
Location and Revision of this file in Perforce (Auto-updating)
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRNAP1017Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer,DateFrom:%Date,DateTo:%Date,Specialty:%Integer,Program:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
		   
 New repid,ind

 Set repid=$I(^CacheTemp("TRAK"))
 New ProgramDesc,URNo,Surname,GivenName,MidName,RefReceivedDate,RefAckDate,AdmDate,qCarePlanDocDate,DchDate,ContactCount,CSE,paadmadmno
 Set (ProgramDesc,URNo,Surname,GivenName,MidName,RefReceivedDate,RefAckDate,AdmDate,qCarePlanDocDate,DchDate)=""
 Set (ContactCount,CSE)=0
 s ind=1

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 //Convert ODBC dates to cache format
	

 s datefrom=$zdh(DateFrom,3)
 s dateto=$zdh(DateTo,3)

	s paadmrowid=0
	f {
	    s (hospid,depcodedr,nfmicategdepartdr,depparref,nfmigovsubcatdr,vinah,qCarePlanDocDate,DchDate,RefReceivedDate,RefAckDate,Episode)=""
	    s (CSE,qid,ContactCount)=0
    
	 	s paadmrowid=$o(^PAADMi("PAADM_Type","O",paadmrowid)) q:paadmrowid="" ;loop through all outpatient/NA episodes
 	
	 	;Hospital ID from Episode
	 	s hospid=$P($G(^PAADM(paadmrowid,2)),"^",85) 
	 	i hospid'=Hospital {continue}
 	
	 	;get specialty
	 	s depcodedr=$P($G(^PAADM(paadmrowid)),"^",4) 
	 	i depcodedr'=Specialty {
		 	i Specialty'="" {continue}	
	 	}
 	
	 	;check that episode is VINAH
	 	s nfmicategdepartdr=$P($G(^PAADM(paadmrowid,"ADM2")),"^",104)
		i nfmicategdepartdr="" {continue}
		s depparref=$P(nfmicategdepartdr,"||",1)
		i depparref="" {continue}
		s nfmigovsubcatdr=$P($G(^CT("NFMI",depparref)),"^",5)
		i nfmigovsubcatdr'="1||1" {continue}
 	
	 	;Referral status from episode
	 	s refstatdr=$P($G(^PAADM(paadmrowid,2)),"^",14) 
 	
	 	;check referral status is either Accepted (8) or Waiting List (1)
	 	i ((refstatdr'=1) && (refstatdr'=8)) {continue}
 	
	 	;loop throug ref status history to find date changed to 1 or 8
		s refhiscs=0
		s AdmDate=""
		f {
			s refhiscs=$o(^PAADM(paadmrowid,"REFHIS",refhiscs)) q:refhiscs="" 
			s refhisstatdr=$P($G(^PAADM(paadmrowid,"REFHIS",refhiscs)),"^",3)
			i ((refhisstatdr=1) || (refhisstatdr=8)) {
				s AdmDate=$P($G(^PAADM(paadmrowid,"REFHIS",refhiscs)),"^",1)	
				q
			}	
		}
		;if no ref status history, date must be episode adm date
		i AdmDate="" {
			s AdmDate=$P($G(^PAADM(paadmrowid)),"^",6) 
		}
	
		;if refhisdate falls within date parameters, gather data and build a row.
		i ((AdmDate>=datefrom) && (AdmDate<=dateto)) {
			;do the stuff here


			s AdmDate=$zd(AdmDate,4)
			s qid=$o(^questionnaire.QAUXXVINAHI("IndexPAAdmID",paadmrowid,""))
			s vinah=##class(questionnaire.QAUXXVINAH).%OpenId(qid)
			i vinah {s qCarePlanDocDate=vinah.QSACS10}
			i qCarePlanDocDate'="" {s qCarePlanDocDate=$zd(qCarePlanDocDate,4)}
			
			s Episode=$P($G(^PAADM(paadmrowid)),"^",81) 
			s papmirowid=$P($G(^PAADM(paadmrowid)),"^",1) 
			s URNo=$S($G(XFUNC("CLASS"))="OP":$p($g(^PAPER(papmirowid,"PAT",1)),"^",2),1:$p($g(^PAPER(papmirowid,"PAT",1)),"^",1))
			s EpisodeNo=$P($G(^PAADM(paadmrowid)),"^",81) 
			s Surname=$P($G(^PAPER(papmirowid,"ALL")),"^",1)
			s GivenName=$P($G(^PAPER(papmirowid,"ALL")),"^",2)
			s MidName=$P($G(^PAPER(papmirowid,"ALL")),"^",19)
			s DchDate=$P($G(^PAADM(paadmrowid)),"^",17)
			i DchDate'="" {s DchDate=$zd(DchDate,4)}
			s RefReceivedDate=$P($G(^PAADM(paadmrowid,2)),"^",9)
			i RefReceivedDate'="" {s RefReceivedDate=$zd(RefReceivedDate,4)}
			s ProgramDesc=$P($G(^CT("NFMI",depparref)),"^",2)
			s RefAckDate=..GetReferralAcknowledgeDate(paadmrowid)
			i RefAckDate'="" {s RefAckDate=$zd(RefAckDate,4)}
			s CSE=..GetCSEForEpisodeDateRange(paadmrowid,DateFrom,DateTo)
			s ContactCount=..GetContactCountForEpisodeDateRange(paadmrowid,DateFrom,DateTo)
			d FormatStrings
			s sort = ind
	 		s ^CacheTemp("TRAK",repid,sort)=$LB(ProgramDesc,Episode,URNo,Surname,GivenName,MidName,RefReceivedDate,RefAckDate,AdmDate,qCarePlanDocDate,DchDate,ContactCount,CSE)
	 		s ind=ind+1
		}
	}


 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FormatDates
 ;;s AdmDate =..ConvertDateToODBC(AdmDate)
 q
 
FormatTimes
 q
 
FormatStrings // Cleanup specified strings
 s Surname = $ZCONVERT(Surname,"U") 
 s GivenName = $ZCONVERT(GivenName,"W")
 s MidName = $ZCONVERT(MidName,"W")
 q
]]></Implementation>
</Method>

<Method name="SWARHRNAP1017Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row 
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle 
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRNAP1017">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer,DateFrom:%Date,DateTo:%Date,Specialty:%Integer,Program:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="ProgramDesc:%String,Episode:%String,URNo:%String,Surname:%String,GivenName:%String,MidName:%String,RefReceivedDate:%String,RefAckDate:%String,AdmDate:%String,qCarePlanDocDate:%String,DchDate:%String,ContactCount:%Integer,CSE:%Integer"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
