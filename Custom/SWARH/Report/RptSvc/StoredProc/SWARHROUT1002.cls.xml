<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHROUT1002">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARHROUT1002
* Report Description: Clinic List (Appointment List)
* Menu Caption:
* Initial release: 2
* Developer: Phuong-Dung Hoang
* Modified: JS-2015-07-31 - Added 'Plan' to returned fields.
* 
**************************************************************************************************************************************
</pre>
Class for SWARHROUT1002 Report]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>62335,45574.688786</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHROUT1002.xml#1 $</Default>
</Parameter>

<Method name="SWARHROUT1002QueryClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHROUT1002QueryExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Library.Integer,DateFrom:%Date,DateTo:%Date,Location:%Library.Integer,Clinician:%Library.Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 New Number,String,Date,Time,c,n

 /* TEMPLATE MODIFY: Define and initialise appropriate column variables to describe output rowset columns */
 New CTLOCDesc,CTLOCCode,CTLOCRowId,ASSlot,ASBookedSlots,PAADMRowId,PAADMAdmNo,PAADMCurrent,PAADMType,PAADMVisitStatus,CurrentInpatient,
 INSTCode,SGCode,ASDate,PAPMINo,PAPERTelH,PAPERMobPhone,PAPERTelO,
 PAPMIName,PAPMIName2,PAPMIName3,ASSessStartTime,APPTDuration,APPTStatus,RESCTLOCDR,RESCTPCPDR,RESDesc,PAPMIDOB,PAPERStName,CTCITDesc,CTZIPCode,PROVCode,
 REFDDesc,REFDForename, plan
 Set (CTLOCRowId,APPTDuration,RESCTLOCDR,RESCTPCPDR,ASSlot,ASBookedSlots,PAADMRowId)=0
 Set (CTLOCDesc,PAADMAdmNo,PAADMCurrent,PAADMType,PAADMVisitStatus,CurrentInpatient,INSTCode,SGCode,ASDate,PAPMINo,
 PAPERTelH,PAPERMobPhone,PAPERTelO,
 PAPMIName,PAPMIName2,PAPMIName3,ASSessStartTime,APPTStatus,RESCTPCPDR,RESDesc,PAPMIDOB,PAPERStName,CTCITDesc,CTZIPCode,PROVCode,
 REFDDesc,REFDForename,plan)=""

 s ind=1

 //Convert ODBC dates to cache format
 //s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateFrom=..ConvertDateToCache(DateFrom)
 //s DateTo=$$intdate^SSUTIL4(DateTo)
 s DateTo=..ConvertDateToCache(DateTo)

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 /* TEMPLATE MODIFY: Clean up parameter variables - $zstrip(<variable>,"*CW") strips all control characters and whitespace, "<>W" just strips leading/trailing whitespace */

 /*
  * TEMPLATE MODIFY:
  *		1. Change name of cursor to something more descriptive than MyReportCursor (need to change in 4 places; here, 2x "fetch" expressions and close expression below)
  *		2. Change SQL query to query desired data, passing valid parameters as defined in Query and Execute method arguments.
  *		3. Pass appropriate parameters using :<ParameterVariableName> - eg. :Hospital
  */
 &SQL(DECLARE SWARHROUT1002Cursor CURSOR FOR 
/*
	--BS 2015-01-28
	--ORIGINAL
 SELECT 
APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR->CTLOC_Desc,
APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR->CTLOC_Code,
APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR,
APPT_AS_ParRef->AS_Slot,
APPT_AS_ParRef->AS_BookedSlots,
p.PAADM_RowId,
p.PAADM_AdmNo,
p.PAADM_Current,
p.PAADM_Type,
p.PAADM_VisitStatus,
CASE WHEN (p1.PAADM_AdmNo is not null) THEN 'Y' ELSE 'N' END AS CurrentInpatient,
APPT_RBCServ_DR->SER_ServGroup_DR->SG_Code,
APPT_AS_ParRef->AS_Date,
APPT_PAPMI_DR->PAPMI_No,
APPT_PAPMI_DR->PAPMI_PAPER_DR->PAPER_TelH,
APPT_PAPMI_DR->PAPMI_PAPER_DR->PAPER_MobPhone,
APPT_PAPMI_DR->PAPMI_PAPER_DR->PAPER_TelO,
APPT_PAPMI_DR->PAPMI_Name,
APPT_PAPMI_DR->PAPMI_Name2,
APPT_PAPMI_DR->PAPMI_Name3,
APPT_AS_ParRef->AS_SessStartTime,
APPT_Duration,
APPT_Status,
APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR,
APPT_AS_ParRef->AS_RES_ParRef->RES_CTPCP_DR,
APPT_AS_ParRef->AS_RES_ParRef->RES_CTPCP_DR->CTPCP_Desc,
APPT_PAPMI_DR->PAPMI_DOB,
APPT_PAPMI_DR->PAPMI_PAPER_DR->PAPER_StName,
APPT_PAPMI_DR->PAPMI_PAPER_DR->PAPER_CityCode_DR->CTCIT_Desc,
APPT_PAPMI_DR->PAPMI_PAPER_DR->PAPER_Zip_DR->CTZIP_Code,
APPT_PAPMI_DR->PAPMI_PAPER_DR->PAPER_Zip_DR->CTZIP_Province_DR->PROV_Code,
REFD_Desc,
REFD_Forename
FROM SQLUser.RB_Appointment INNER JOIN SQLUser.PA_Adm p ON p.PAADM_RowId=APPT_Adm_DR
LEFT JOIN SQLUser.PA_Adm p1 on (p.PAADM_PAPMI_DR=p1.PAADM_PAPMI_DR and p1.PAADM_Type='I' and 
((p1.PAADM_DischgDate is NULL) or (p1.PAADM_DischgDate > :DateTo)) and p1.PAADM_Current='Y' and p1.PAADM_Hospital_DR=:Hospital and p1.PAADM_VisitStatus='A')
LEFT JOIN SQLUser.PA_AdmInsurance ON (p.PAADM_RowId=INS_ParRef)
LEFT JOIN SQLUser.PAC_RefDoctor ON REFD_RowId=p.PAADM_RefDocCodeDR
WHERE
APPT_AS_ParRef->AS_Date BETWEEN :DateFrom AND :DateTo
AND (APPT_Status NOT IN ('X','T'))
AND APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR->CTLOC_Hospital_DR=:Hospital
AND p.PAADM_Type='O'
AND ((APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR=:Location) OR (:Location is null))
AND ((APPT_AS_ParRef->AS_RES_ParRef->RES_CTPCP_DR=:Clinician) OR (:Clinician is null))
GROUP BY APPT_RowId,p.PAADM_RowId
order by APPT_AS_ParRef->AS_SessStartTime asc
*/

SELECT
                appt.APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR->CTLOC_Desc
        ,       appt.APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR->CTLOC_Code
        ,       appt.APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR
        ,       appt.APPT_AS_ParRef->AS_Slot
        ,       appt.APPT_AS_ParRef->AS_BookedSlots
        ,       appt.APPT_Adm_DR
        ,       appt.APPT_Adm_DR->PAADM_AdmNo
        ,       appt.APPT_Adm_DR->PAADM_Current
        ,       appt.APPT_Adm_DR->PAADM_Type
        ,       appt.APPT_Adm_DR->PAADM_VisitStatus
        ,       CASE
                        WHEN curadm.PAADM_AdmNo IS NOT NULL THEN 'Y'
                        ELSE 'N' END
                AS CurrentInpatient
        ,       appt.APPT_RBCServ_DR->SER_ServGroup_DR->SG_Code
        ,       appt.APPT_AS_ParRef->AS_Date
        ,       appt.APPT_PAPMI_DR->PAPMI_No
        ,       appt.APPT_PAPMI_DR->PAPMI_PAPER_DR->PAPER_TelH
        ,       appt.APPT_PAPMI_DR->PAPMI_PAPER_DR->PAPER_MobPhone
        ,       appt.APPT_PAPMI_DR->PAPMI_PAPER_DR->PAPER_TelO
        ,       appt.APPT_PAPMI_DR->PAPMI_Name
        ,       appt.APPT_PAPMI_DR->PAPMI_Name2
        ,       appt.APPT_PAPMI_DR->PAPMI_Name3
        ,       appt.APPT_AS_ParRef->AS_SessStartTime
        ,       appt.APPT_Duration
        ,       appt.APPT_Status
        ,       appt.APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR
        ,       appt.APPT_AS_ParRef->AS_RES_ParRef->RES_CTPCP_DR
        ,       appt.APPT_AS_ParRef->AS_RES_ParRef->RES_CTPCP_DR->CTPCP_Desc
        ,       appt.APPT_PAPMI_DR->PAPMI_DOB
        ,       appt.APPT_PAPMI_DR->PAPMI_PAPER_DR->PAPER_StName
        ,       appt.APPT_PAPMI_DR->PAPMI_PAPER_DR->PAPER_CityCode_DR->CTCIT_Desc
        ,       appt.APPT_PAPMI_DR->PAPMI_PAPER_DR->PAPER_Zip_DR->CTZIP_Code
        ,       appt.APPT_PAPMI_DR->PAPMI_PAPER_DR->PAPER_Zip_DR->CTZIP_Province_DR->PROV_Code
        ,       appt.APPT_Adm_DR->PAADM_RefDocList_DR->REFD_Desc
        ,       appt.APPT_Adm_DR->PAADM_RefDocList_DR->REFD_Forename
        ,		appt.APPT_Adm_DR->PAADM_WaitList_DR->WL_AuxilInsurType_DR->AUXIT_Desc
FROM
                SQLUser.RB_Appointment appt
                		--Find if patient has a current inpatient episode that is not discharged
                        LEFT JOIN SQLUser.PA_Adm curadm
                                ON (
                                                appt.APPT_PAPMI_DR = curadm.PAADM_PAPMI_DR
                                        AND curadm.PAADM_Type = 'I'
                                        AND ((curadm.PAADM_DischgDate IS NULL) OR (curadm.PAADM_DischgDate > :DateTo))
                                        AND curadm.PAADM_Current = 'Y'
                                        AND curadm.PAADM_Hospital_DR = :Hospital
                                        AND curadm.PAADM_VisitStatus = 'A'
                                )
WHERE
                appt.APPT_AS_ParRef->AS_Date BETWEEN :DateFrom AND :DateTo
        AND appt.APPT_Status NOT IN ('X','T')
        AND appt.APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR->CTLOC_Hospital_DR = :Hospital
        AND appt.APPT_Adm_DR->PAADM_Type = 'O'
        AND ((appt.APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR = :Location) OR (:Location IS NULL))
        AND ((appt.APPT_AS_ParRef->AS_RES_ParRef->RES_CTPCP_DR = :Clinician) OR (:Clinician IS NULL))
GROUP BY
                appt.APPT_RowId
        ,       appt.APPT_Adm_DR
ORDER BY
                appt.APPT_AS_ParRef->AS_SessStartTime ASC
                
)

 &SQL(OPEN SWARHROUT1002Cursor)
 

 /* TEMPLATE MODIFY: Rename cursor to something moreChange fetch INTO parameter list to match column variable names */
 //FETCH FIRST ROW
 &sql(fetch SWARHROUT1002Cursor INTO :CTLOCDesc,:CTLOCCode,:CTLOCRowId,:ASSlot,:ASBookedSlots,:PAADMRowId,:PAADMAdmNo,:PAADMCurrent,:PAADMType,
 :PAADMVisitStatus,:CurrentInpatient,:SGCode,:ASDate,:PAPMINo,:PAPERTelH,:PAPERMobPhone,:PAPERTelO,
 :PAPMIName,:PAPMIName2,:PAPMIName3,:ASSessStartTime,:APPTDuration,:APPTStatus,:RESCTLOCDR,:RESCTPCPDR,:RESDesc,:PAPMIDOB,:PAPERStName,:CTCITDesc,:CTZIPCode,:PROVCode,
 :REFDDesc,:REFDForename,:plan)
  
 while 'SQLCODE{
  
 d FormatDates
 s INSTCode=..GetPrimaryInsPayorGroupForEpisode(PAADMRowId)
 /* TEMPLATE MODIFY: Build the sort string here from column variables. Convert strings to uppercase ($ZCVT(<field>,"U") and separate with spaces */
 s sort = ind		// don't sort - uncomment this line if you've sorted in the query
 //s sort = $ZCVT(HOSPDesc,"U")_" "_$ZCVT(WARDDesc,"U")_" "_$ZCVT(ROOMCode,"U")_" "_$ZCVT(BEDCode,"U")_" "_$ZCVT(CTRLGDesc,"U")_" "_$ZCVT(PAPERName,"U")_" "_$ZCVT(PAPERName2,"U")_" "_$ZCVT(PAPERName3,"U")_ind
 
 /* TEMPLATE MODIFY: Build the list of fields by placing correct column variable names in the $LB() here. */
 s ^CacheTemp("TRAK",repid,sort)=$LB(CTLOCDesc,CTLOCCode,CTLOCRowId,ASSlot,ASBookedSlots,PAADMRowId,PAADMAdmNo,PAADMCurrent,PAADMType,PAADMVisitStatus,
 CurrentInpatient,INSTCode,SGCode,ASDate,PAPMINo,PAPERTelH,PAPERMobPhone,PAPERTelO,
 PAPMIName,PAPMIName2,PAPMIName3,ASSessStartTime,APPTDuration,APPTStatus,RESCTLOCDR,RESCTPCPDR,RESDesc,PAPMIDOB,PAPERStName,CTCITDesc,CTZIPCode,PROVCode,
 REFDDesc,REFDForename,plan)
 s ind=ind+1
 
 /* TEMPLATE MODIFY: Change field variables to match row columns - copy FETCH FIRST ROW from above */
 //fetch rows
 &sql(fetch SWARHROUT1002Cursor INTO :CTLOCDesc,:CTLOCCode,:CTLOCRowId,:ASSlot,:ASBookedSlots,:PAADMRowId,:PAADMAdmNo,:PAADMCurrent,:PAADMType,
 :PAADMVisitStatus,:CurrentInpatient,:SGCode,:ASDate,:PAPMINo,:PAPERTelH,:PAPERMobPhone,:PAPERTelO,
 :PAPMIName,:PAPMIName2,:PAPMIName3,:ASSessStartTime,:APPTDuration,:APPTStatus,:RESCTLOCDR,:RESCTPCPDR,:RESDesc,:PAPMIDOB,:PAPERStName,:CTCITDesc,:CTZIPCode,:PROVCode,
 :REFDDesc,:REFDForename,:plan)}

 &SQL(CLOSE SWARHROUT1002Cursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FormatDates
 /* TEMPLATE MODIFY: Add an entry to perform a date format for all date/time fields here */
 //s AdmDate=..ConvertDateToODBC(AdmDate)
 //s DischgDate=..ConvertDateToODBC(DischgDate)
 //s TRANSStartDate=..ConvertDateToODBC(TRANSStartDate)
 s ASDate=..ConvertDateToODBC(ASDate)
 s PAPMIDOB=..ConvertDateToODBC(PAPMIDOB)
 s ASSessStartTime=..ConvertTimeToODBC(ASSessStartTime)
 s ASSessStartTime=$P(ASSessStartTime,":",1)_":"_$P(ASSessStartTime,":",2)
 s PAPERStName=$LISTTOSTRING(PAPERStName, $CHAR(13)_$CHAR(10))
 Quit
]]></Implementation>
</Method>

<Method name="SWARHROUT1002QueryFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/* TEMPLATE MODIFY: Rename Stored Proc query to <MyStoredProcName> 
 * TEMPLATE MODIFY: Change parameters to match desired stored procedure parameters
 * TEMPLATE MODIFY: Change ROWSPEC list to match desired output column names and column data types */
]]></Content>
</UDLText>

<Query name="SWARHROUT1002Query">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Library.Integer,DateFrom:%Date,DateTo:%Date,Location:%Library.Integer,Clinician:%Library.Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="CTLOCDesc:%String(MAXLEN=255),CTLOCCode:%String(MAXLEN=10),CTLOCRowId:%Integer,ASSlot:%Integer,ASBookedSlots:%Integer,PAADMRowId:%Integer,PAADMAdmNo:%String(MAXLEN=255),PAADMCurrent:%String,PAADMType:%String(MAXLEN=5),PAADMVisitStatus:%String,CurrentInpatient:%String,INSCode:%String,SGCode:%String,ASDate:%Date,PAPMINo:%String(MAXLEN=255),PAPERTelH:%String(MAXLEN=255),PAPERMobPhone:%String(MAXLEN=255),PAPERTelO:%String(MAXLEN=255),PAPMIName:%String(MAXLEN=255),PAPMIName2:%String(MAXLEN=255),PAPMIName3:%String(MAXLEN=255),ASSessStartTime:%String(MAXLEN=255),APPTDuration:%Integer,APPTStatus:%String(MAXLEN=5),RESCTLOCDR:%Integer,RESCTPCPDR:%Integer,RESDesc:%Library.String,PAPMIDOB:%Date,PAPERStName:%String(MAXLEN=255),CTCITDesc:%String(MAXLEN=255),CTZIPCode:%String(MAXLEN=255),PROVCode:%String(MAXLEN=255),REFDDesc:%String(MAXLEN=255),REFDForename:%String(MAXLEN=255),plan:%String(MAXLEN=255)"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
