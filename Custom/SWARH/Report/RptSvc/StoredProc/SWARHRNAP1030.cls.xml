<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRNAP1030">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARHRNAP1030
* Report Description: SCTT Care Coordination Plan Review Report
* Menu Caption:
* Initial release: 1
* Developer: Phuong-Dung Hoang
* Created: 06/03/2016
* 
**************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.RptSvc.StoredProc.Abstract</Super>
<TimeCreated>60905,54849</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRNAP1030.xml#1 $</Default>
</Parameter>

<Method name="SWARHRNAP1030Close">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRNAP1030Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,HospId:%Library.Integer,DateFrom:%Date,DateTo:%Date,Specialty:%Library.String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 new QUESStatus, PAPMINo, PAPMIName, PAPMIName2, PAPMIName3, PAPMIDOB, PAADMAdmNo, CTLOCCode, CTLOCDesc, TargetReviewDate, ReviewDate, 
 	LastUpdateUser, LastUpdateDate, LastUpdateTime
 set (QUESStatus, PAPMINo, PAPMIName, PAPMIName2, PAPMIName3, PAPMIDOB, PAADMAdmNo, CTLOCCode, CTLOCDesc, TargetReviewDate, ReviewDate, 
 	LastUpdateUser, LastUpdateDate, LastUpdateTime) = ""

 s ind=1, END=0

 //Convert ODBC dates to cache format
 set DateFrom=..ConvertDateToCache(DateFrom)
 set DateTo=..ConvertDateToCache(DateTo)
 
 
 &SQL(DECLARE NAP1030Cursor CURSOR FOR 
 SELECT 
 	QUESStatusDR->NNS_Desc,
 	QUESPAPatMasDR->PAPMI_No,
	QUESPAPatMasDR->PAPMI_Name,
	QUESPAPatMasDR->PAPMI_Name2,
	QUESPAPatMasDR->PAPMI_Name3,
	QUESPAPatMasDR->PAPMI_DOB,
	QUESPAAdmDR->PAADM_AdmNo,
	QUESPAAdmDR->PAADM_DepCode_DR->CTLOC_Code,
	QUESPAAdmDR->PAADM_DepCode_DR->CTLOC_Desc,
	Q59 AS TargetReviewDate,
	Q107 AS ReviewDate,
	QUESUserDR->SSUSR_Name,
	QUESDate,
	QUESTime
 FROM questionnaire.QAUXXSCTTCC WHERE QUESStatusDR->NNS_Code='E'
 AND Q121=:HospId
 --AND (:SpecialtyId IS NULL OR QUESPAAdmDR->PAADM_DepCode_DR=:SpecialtyId)
 AND (({fn CONCAT( ',', {fn CONCAT((:Specialty),',')})} [ {fn CONCAT( ',', {fn CONCAT((QUESPAAdmDR->PAADM_DepCode_DR),',')})}) OR (:Specialty IS NULL))  -- Multiple Specialties
 AND (:DateTo IS NULL OR Q59<=:DateTo)
 AND (:DateFrom IS NULL OR Q59>=:DateFrom)
 ORDER BY Q59
)
 &SQL(OPEN NAP1030Cursor)
 
 //FETCH FIRST ROW
 d FetchRow
  
 while END=0 {
	 d FormatDates
	 s sort = ind		// don't sort - uncomment this line if you've sorted in the query
	 s ^CacheTemp("TRAK",repid,sort)=$LB(QUESStatus, PAPMINo, PAPMIName, PAPMIName2, PAPMIName3, PAPMIDOB, PAADMAdmNo, CTLOCCode, CTLOCDesc, TargetReviewDate, ReviewDate, 
 	LastUpdateUser, LastUpdateDate, LastUpdateTime)
	 set ind=ind+1
	 //fetch rows
	 do FetchRow
 }

 &SQL(CLOSE NAP1030Cursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$listbuild(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(FETCH NAP1030Cursor INTO :QUESStatus, :PAPMINo, :PAPMIName, :PAPMIName2, :PAPMIName3, :PAPMIDOB, :PAADMAdmNo, :CTLOCCode, :CTLOCDesc, 
 :TargetReviewDate, :ReviewDate, :LastUpdateUser, :LastUpdateDate, :LastUpdateTime)
 if SQLCODE '= 0 set END = 1
 quit
 
FormatDates
 if PAPMIDOB'="" s PAPMIDOB=..ConvertDateToODBC(PAPMIDOB)
 if TargetReviewDate'="" s TargetReviewDate=..ConvertDateToODBC(TargetReviewDate)
 if ReviewDate'="" s ReviewDate=..ConvertDateToODBC(ReviewDate)
 if LastUpdateDate'="" s LastUpdateDate=..ConvertDateToODBC(LastUpdateDate)
 if LastUpdateTime'="" s LastUpdateTime=..ConvertTimeToHHMM(LastUpdateTime)
 q
]]></Implementation>
</Method>

<Method name="SWARHRNAP1030Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRNAP1030">
<Type>%Library.Query</Type>
<FormalSpec>HospId:%Library.Integer,DateFrom:%Date,DateTo:%Date,Specialty:%Library.String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="QUESStatus:%Library.String, PAPMINo:%Library.String, PAPMIName:%Library.String, PAPMIName2:%Library.String, PAPMIName3:%Library.String, PAPMIDOB:%Library.Date, PAADMAdmNo:%Library.String, CTLOCCode:%Library.String, CTLOCDesc:%Library.String, TargetReviewDate:%Library.Date, ReviewDate:%Library.Date, LastUpdateUser:%Library.String, LastUpdateDate:%Library.Date, LastUpdateTime:%Library.String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>

<Method name="SpecialtyDetailsClose">
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$LIST(QHandle,2)
 
 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SpecialtyDetailsExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,SpecId:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$Increment(^CacheTemp("TRAK"))
 
 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3),ICDCode,DRGCode
 n CTLOCRowId, CTLOCCode, CTLOCDesc
 s CTLOCRowId=0
 s (CTLOCCode, CTLOCDesc)=""
  
 s ind=1

 &SQL(DECLARE Specialty CURSOR FOR
	
 	SELECT 
         	CTLOC_RowId
         ,	CTLOC_Code
         ,	CTLOC_Desc
         FROM SQLUser.CT_LOC
         WHERE (CTLOC_RowId=:SpecId OR :SpecId IS NULL)
 
 )
 
 &sql(open Specialty)
 do SpecFetchrow
  
 while 'SQLCODE {
	 
	Set ^CacheTemp(repid,ind)=$LB(CTLOCRowId, CTLOCCode, CTLOCDesc)
 	s ind=ind+1
	do SpecFetchrow
 }
 &sql(close Specialty)

 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

SpecFetchrow
	&sql(fetch Specialty into :CTLOCRowId, :CTLOCCode, :CTLOCDesc)
  	q
]]></Implementation>
</Method>

<Method name="SpecialtyDetailsFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SpecialtyDetails">
<Type>%Library.Query</Type>
<FormalSpec>SpecId:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="CTLOCRowId:%Library.Integer, CTLOCCode:%Library.String, CTLOCDesc:%Library.String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
