<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHROUT1006">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARHROUT1006
* Report Description: Non Admitted Patient Medical Record Picking List
* Menu Caption: Non Admitted Patient Medical Record Picking List
* Initial release: 
* Developer: Jayson Sagnol (copied SWARHROUT1001 by Phuong-Dung HOANG)
* Modified: 03/11/2014 - MW & PH. Replaced line to limit returns based on Hospital ID and medical records type Code with
* 	new line to limit returns to medical records type Description.
* 27/01/2015: SQL stored procedure SNAP_MRPickListV7 to check MR Required checkbox for SWHW 
**************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>62335,45574.688786</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHROUT1006.xml#1 $</Default>
</Parameter>

<Method name="SWARHROUT1006QueryClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHROUT1006QueryExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Library.Integer,DateFrom:%Date,DateTo:%Date,Location:%Library.Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 New Number,String,Date,Time,c,n

 New RESDesc,SERDesc,CTLOCDesc,CTLOCCode,CTLOCRowId,PAADMRowId,PAADMAdmNo,PAADMCurrent,PAADMType,PAADMVisitStatus,REFDTitle,REFDForename,REFDDesc,
 CurrentInpatient,SGCode,ASDate,PAPMIRowId,
 PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,ASSessStartTime,APPTStatus,RESCTPCPDR,CTPCPDesc,CTLOCDescOther,CTLOCCodeOther,
 ASDateOther,ASSessStartTimeOther,APPTStatusOther,RTMASRowId,APPTRowId,MRLOCDesc,MRLOCCode,MRVol,FINCode,URLastTwoDigits
 s (CTLOCRowId,RESCTPCPDR,URLastTwoDigits)=0
 s (CTLOCDesc,CTLOCCode,PAADMAdmNo,PAADMCurrent,PAADMType,PAADMVisitStatus,CurrentInpatient,SGCode,ASDate,PAPMIRowId,
 PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,ASSessStartTime,APPTStatus,CTPCPDesc,CTLOCDescOther,CTLOCCodeOther,
 ASDateOther,ASSessStartTimeOther,APPTStatusOther,RTMASRowId,APPTRowId,MRLOCDesc,MRLOCCode,MRVol,FINCode)=""

 s ind=1

 //Convert ODBC dates to cache format
 s DateFrom=..ConvertDateToCache(DateFrom)
 s DateTo=..ConvertDateToCache(DateTo)

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 &SQL(DECLARE SWARHROUT1006Cursor CURSOR FOR 
 SELECT
rbas.AS_RES_ParRef->RES_Desc,
rba.APPT_RBCServ_DR->SER_Desc,
rba.APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR->CTLOC_Desc as ClinicDesc,
rba.APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR->CTLOC_Code as ClinicCode,
rba.APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR as ClinicID,
p.PAADM_RowId,
p.PAADM_AdmNo as EpisodeNo,
p.PAADM_Current,
p.PAADM_Type as Type,
p.PAADM_VisitStatus as VisitStatus,
p.PAADM_RefDocList_DR->REFD_Title,
p.PAADM_RefDocList_DR->REFD_Forename,
p.PAADM_RefDocList_DR->REFD_Desc,
CASE WHEN (p1.PAADM_AdmNo is not null) THEN 'Y' ELSE 'N' END AS CurrentInpatient,
rba.APPT_RBCServ_DR->SER_ServGroup_DR->SG_Code as SGCode,
rba.APPT_AS_ParRef->AS_Date as ApptDate,
rba.APPT_PAPMI_DR,
rba.APPT_PAPMI_DR->PAPMI_No as UR,
rba.APPT_PAPMI_DR->PAPMI_Name as Lastname,
rba.APPT_PAPMI_DR->PAPMI_Name2 as Firstname,
rba.APPT_PAPMI_DR->PAPMI_Name3 as Middlename,
rba.APPT_AS_ParRef->AS_SessStartTime as ApptTime,
rba.APPT_Status as ApptStatus,
rba.APPT_AS_ParRef->AS_RES_ParRef->RES_CTPCP_DR as ClinicianID,
rba.APPT_AS_ParRef->AS_RES_ParRef->RES_CTPCP_DR->CTPCP_Desc as ClinicianDesc,
rtm.RTMAS_RowId,
rba.APPT_RowId

FROM SQLUser.RB_Appointment rba INNER JOIN SQLUser.PA_Adm p ON p.PAADM_RowId=rba.APPT_Adm_DR
INNER JOIN SQLUser.RB_ApptSchedule rbas ON (rba.APPT_AS_ParRef = rbas.AS_RowId)
LEFT JOIN SQLUser.RT_Master rtm on (rtm.RTMAS_PatNo_DR=rba.APPT_PAPMI_DR AND rtm.RTMAS_Hospital_DR=:Hospital)
LEFT JOIN SQLUser.RTC_MRecordType rtcmrt on rtcmrt.TYP_RowId=rtm.RTMAS_MRType_DR
LEFT JOIN SQLUser.PA_Adm p1 on (p.PAADM_PAPMI_DR=p1.PAADM_PAPMI_DR and p1.PAADM_Type='I' and
((p1.PAADM_DischgDate is NULL) or (p1.PAADM_DischgDate > :DateTo)) and p1.PAADM_Current='Y' and p1.PAADM_Hospital_DR=:Hospital and p1.PAADM_VisitStatus='A' )
LEFT JOIN SQLUser.PAC_RefDoctor ON REFD_RowId=p.PAADM_RefDocCodeDR

WHERE
rba.APPT_AS_ParRef->AS_Date BETWEEN :DateFrom AND :DateTo
AND rba.APPT_Status ='P'
AND rba.APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR->CTLOC_Hospital_DR=:Hospital
AND p.PAADM_Type='O'
AND ((rba.APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR=:Location) OR (:Location is null))
--AND (:Hospital=696 AND (rtcmrt.TYP_Code='MR' OR rtcmrt.TYP_Code IS NULL) AND rba.APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR->CTLOC_Code != 'PREA')
AND ((rtcmrt.TYP_Desc like 'Medical Record%' AND rtcmrt.TYP_DateTo is NULL) OR rtcmrt.TYP_Code IS NULL)
AND rba.APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR->CTLOC_Code != 'PREA'
GROUP BY rba.APPT_RowId,rba.APPT_AS_ParRef,p.PAADM_RowId,p.PAADM_AdmNo,p.PAADM_Current,p.PAADM_Type,p.PAADM_VisitStatus,
p.PAADM_RefDocList_DR,rtm.RTMAS_RowId
ORDER BY ClinicDesc asc,rba.APPT_AS_ParRef->AS_Date asc, rba.APPT_AS_ParRef->AS_SessStartTime ASC)

 &SQL(OPEN SWARHROUT1006Cursor)
 
 //FETCH FIRST ROW
 &sql(fetch SWARHROUT1006Cursor INTO :RESDesc,:SERDesc,:CTLOCDesc,:CTLOCCode,:CTLOCRowId,:PAADMRowId,:PAADMAdmNo,:PAADMCurrent,:PAADMType,:PAADMVisitStatus,:REFDTitle,:REFDForename,
 :REFDDesc,:CurrentInpatient,:SGCode,:ASDate,
 :PAPMIRowId,:PAPMINo,:PAPMIName,:PAPMIName2,:PAPMIName3,:ASSessStartTime,:APPTStatus,:RESCTPCPDR,:CTPCPDesc,:RTMASRowId,:APPTRowId)
  
 while 'SQLCODE{
	 
 d GetMRDetails  
 d FormatDates
 s FINCode=..GetFinCodeForEpisode(PAADMRowId)
 ;Get UR Last 2 digits for sorting
 s URLastTwoDigits=$e(PAPMINo,$l(PAPMINo)-1,$l(PAPMINo))
 s sort = ind		// don't sort - uncomment this line if you've sorted in the query
 //s sort = $ZCVT(HOSPDesc,"U")_" "_$ZCVT(WARDDesc,"U")_" "_$ZCVT(ROOMCode,"U")_" "_$ZCVT(BEDCode,"U")_" "_$ZCVT(CTRLGDesc,"U")_" "_$ZCVT(PAPERName,"U")_" "_$ZCVT(PAPERName2,"U")_" "_$ZCVT(PAPERName3,"U")_ind
 
 s ^CacheTemp("TRAK",repid,sort)=$LB(RESDesc,SERDesc,CTLOCDesc,CTLOCCode,CTLOCRowId,PAADMRowId,PAADMAdmNo,PAADMCurrent,PAADMType,PAADMVisitStatus,REFDTitle,REFDForename,REFDDesc,
 CurrentInpatient,SGCode,ASDate,
 PAPMIRowId,PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,ASSessStartTime,APPTStatus,RESCTPCPDR,CTPCPDesc,RTMASRowId,APPTRowId,MRLOCDesc,MRLOCCode,MRVol,FINCode,URLastTwoDigits)
 s ind=ind+1
 
 //fetch rows
 &sql(fetch SWARHROUT1006Cursor INTO :RESDesc,:SERDesc,:CTLOCDesc,:CTLOCCode,:CTLOCRowId,:PAADMRowId,:PAADMAdmNo,:PAADMCurrent,:PAADMType,:PAADMVisitStatus,:REFDTitle,:REFDForename,:REFDDesc,
 :CurrentInpatient,:SGCode,:ASDate,
 :PAPMIRowId,:PAPMINo,:PAPMIName,:PAPMIName2,:PAPMIName3,:ASSessStartTime,:APPTStatus,:RESCTPCPDR,:CTPCPDesc,:RTMASRowId,:APPTRowId)}

 &SQL(CLOSE SWARHROUT1006Cursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK
  
GetMRDetails
 Set (Childsub,SelChildsub,VolLatestDateCreated,VolLatestTimeCreated, VolLatestDateIssued, VolLatestNumber) = ""
 Set (MRLOCCode,MRLOCDesc,MRVol)=""
 
 if (RTMASRowId'="") {
	 w RTMASRowId,!
 For {
	 Set Childsub=$O(^RT(RTMASRowId,"RTMAV",Childsub))
	 Quit:(Childsub="")
	 If ($P(^RT(RTMASRowId,"RTMAV",Childsub),"^",6)="Y") {
	 	Set VolDesc=$P(^RT(RTMASRowId,"RTMAV",Childsub),"^",1)
	 	If (
	 			(VolLatestNumber="") // first iteration
	 	    ||	(VolDesc>VolLatestNumber)	 	    	
	 	) {
		 	Set VolLatestNumber=VolDesc
		 	Set SelChildsub=Childsub
	 	}
	 }
	 Set:(SelChildsub'="") MRLOCCode=$P(^CTLOC($P(^RT(RTMASRowId,"RTMAV",SelChildsub),"^",9)),"^",1)
	 Set:(SelChildsub'="") MRLOCDesc=$P(^CTLOC($P(^RT(RTMASRowId,"RTMAV",SelChildsub),"^",9)),"^",2)
	 Set:(SelChildsub'="") MRVol=$P(^RT(RTMASRowId,"RTMAV",SelChildsub),"^",1)
 }
 }
 Quit  
 
FormatDates
 s ASDate=..ConvertDateToODBC(ASDate)
 s ASDateOther=..ConvertDateToODBC(ASDateOther)
 s ASSessStartTime=..ConvertTimeToODBC(ASSessStartTime)
 s ASSessStartTimeOther=..ConvertTimeToODBC(ASSessStartTimeOther)
 Quit
]]></Implementation>
</Method>

<Method name="MRLatestVol">
<ClassMethod>1</ClassMethod>
<FormalSpec>RTMASRowId:%String</FormalSpec>
<Implementation><![CDATA[
 Set (Childsub,SelChildsub,VolLatestDateCreated,VolLatestTimeCreated, VolLatestDateIssued, VolLatestNumber) = ""
 Set (MRLOCCode,MRLOCDesc,MRVol)=""
 Set ASDate=$zdateh("11/20/2012")
 w "test",!
 w ASDate,!
 if (RTMASRowId'="") {
	 w RTMASRowId,!
 For {
	 Set Childsub=$O(^RT(RTMASRowId,"RTMAV",Childsub))
	 Quit:(Childsub="")
	 w "ChildSub = "_Childsub,!
	 If ($P(^RT(RTMASRowId,"RTMAV",Childsub),"^",6)="Y") {
	 	Set VolDesc=$P(^RT(RTMASRowId,"RTMAV",Childsub),"^",1)
	 	w "VolDesc  = "_VolDesc,!
	 	If (
	 			(VolLatestNumber="") // first iteration
	 	    ||	(VolDesc>VolLatestNumber)	 	    	
	 	) {
		 	Set VolLatestNumber=VolDesc
		 	Set SelChildsub=Childsub
	 	}
	 }
	 w "SelChildSub="_SelChildsub,!
	 Set:(SelChildsub'="") MRLOCCode=$P(^CTLOC($P(^RT(RTMASRowId,"RTMAV",SelChildsub),"^",9)),"^",1)
	 Set:(SelChildsub'="") MRLOCDesc=$P(^CTLOC($P(^RT(RTMASRowId,"RTMAV",SelChildsub),"^",9)),"^",2)
	 Set:(SelChildsub'="") MRVol=$P(^RT(RTMASRowId,"RTMAV",SelChildsub),"^",1)
 }
 }
 w "MRLOCCode: "_MRLOCCode,!
 w "MRLOCDesc: "_MRLOCDesc,!
 w "MRVol: "_MRVol,!
 Quit MRLOCCode
]]></Implementation>
</Method>

<Method name="SWARHROUT1006QueryFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHROUT1006Query">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Library.Integer,DateFrom:%Date,DateTo:%Date,Location:%Library.Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="RESDesc:%String,SERDesc:%String,CTLOCDesc:%String,CTLOCCode:%String,CTLOCRowId:%Integer,PAADMRowId:%Integer,PAADMAdmNo:%String,PAADMCurrent:%String,PAADMType:%String,PAADMVisitStatus:%String,REFDTitle:%String,REFDForename:%String,REFDDesc:%String,CurrentInpatient:%String,SGCode:%String,ASDate:%Date,PAPMIRowId:%Integer,PAPMINo:%String,PAPMIName:%String,PAPMIName2:%String,PAPMIName3:%String,ASSessStartTime:%String,APPTStatus:%String,RESCTPCPDR:%Integer,CTPCPDesc:%String,RTMASRowId:%String,APPTRowId:%String,MRLOCDesc:%String,MRLOCCode:%String,MRVol:%String,FINCode:%String,URLastTwoDigits:%Integer"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
