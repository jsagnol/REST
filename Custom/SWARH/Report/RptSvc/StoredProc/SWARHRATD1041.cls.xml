<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRATD1041">
<Description>
Class for SWARHRATD1041 Report</Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>62335,45574.688786</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRATD1041.xml#1 $</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
/*
 * ---START TEMPLATE COMMENT BLOCK---
 * SWARH ZEN Report Template
 * Use Tools->Copy Class in Studio to copy this template to your new Stored Procedure class,
 * giving it your relevant Stored Procedure name (as per SWARH naming conventions), keeping itin the Custom.SWARH.Report.ZEN.StoredProc package.
 * Find and Replace "AAATemplateStoredProcQuery" with your appropriate stored procedure name as per SWARH naming conventions
 *
 * All places in this class requiring modification are tagged with "TEMPLATE MODIFY" comments; search for this tag and 
 * remove the comments as you go to ensure you've made all required changes.
 *
 * Modification Steps Required:
 * 1.  Change Query name and prefix of Execute, Close and Fetch methods to desired query name:
 *     eg. Query <MyQueryName>, ClassMethod <MyQueryName>Execute, ClassMethod <MyQueryName>Fetch, ClassMethod <MyQueryName>Close
 * 2.  Alter the SQL query in <MyQueryName>Execute to perform the desired SQL query (use WinSQL or the Ensemble Management Portal to test your query)
 * 3.  Alter the parameters of the Query <MyQuery> and the <MyQueryName>Execute method to suit your query's requirements
 * 4.  In the <MyQueryName>Execute method, set up variables for your query's output fields; each variable name will be specified in at least 5 places
 *   1.   Declare under an n/New line (eg. 'New MyField')
 *   2.   Initialised under an s/Set line (set to "" for string/date/time fields or 0 for numeric fields) (eg. Set (MyField,MyOtherField)=""
 *   3&4. Placed in the two 'fetch ... into ' line's output variable lists- eg. 'fetch MyReportCursor INTO :MyField,:MyOtherField'
 *        (output fields need to be specified in the same order as they are specified in the SELECT statement)
 *	 5.   In the ^CacheTemp row assignment $LB list, at the appropriate index for the output column.
 *        eg. 's ^CacheTemp("TRAK",repid,sort)=$LB(MyField,MyOtherField,...) 
 * 5.  Add appropriate conversion assignments under the FormatDates label for any date or time fields
 * 6.  Build up the sort string on the 's sort = ' line, with desired fields to sort the output rowset on.
 *     To ignore uppercase/lowercase characters, you need to wrap each variable in a $ZCVT(<variable>,"U") to convert it to uppercase.
 *     Sorting here is supposedly faster than using an ORDER BY in most circumstances.
 *     Build the string as: 's sort = $ZCVT(SortField1,"U")_" "_$ZCVT(SortField2,"U")_" "_..._" "_ind'
 *     The sort string  should always end with 'ind', and if no sorting is required outside the SQL query, simply specify 'set sort = ind'
 * 7.  Set up output field names and types in ROWSPEC:
 *     Alter the ROWSPEC (under Query) to match desired output field names and types, in the correct order (as specified in the ^CacheTemp
 *     row assignment $LB list from step 4.5).
 * 8.  Fill out Report Name and Code in detail comment below
 * 9.  Test the stored procedure using WinSQL (execute "CALL <Custom_SWARH_Report_ZEN_StoredProc_AAATemplateStoredProcClass.AAAAATemplateStoredProcQuery(Params) or the Ensemble System Management Portal:
 *		 (under SQL->[select namespace]->SQL Schemas->[click "Procedures" against Custom_SWARH_Report_ZEN_StoredProc schema]->[click "Run" against appropriate stored procedure])
 * 10. Finally, remove this comment block and you're done!
 * ---END TEMPLATE COMMENT BLOCK---
 */
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/*
 * Report Name: AutoPrint Current Inpatients List for Repat Patients <br>
 * Report Code: SWARHRATD1041 <br>
 * SWARH Developer: Phuong-Dung HOANG <br>
 */
]]></Content>
</UDLText>

<Method name="SWARHRATD1041CurPatClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRATD1041CurPatExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Library.Integer,RunDate:%Date,WardId:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 New Number,String,Date,Time,c,n

 /* TEMPLATE MODIFY: Define and initialise appropriate column variables to describe output rowset columns */
 New PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,CTSEXCode,
 PAADMRowId,PAADMAdmNo,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,
 WARDCode,ROOMCode,BEDCode,CTPCPDesc
 Set (PAADMRowId) = 0
 Set (PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,CTSEXCode,
 PAADMAdmNo,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,
 WARDCode,ROOMCode,BEDCode,CTPCPDesc)=""

 s ind=1
 //Convert ODBC dates to cache format
 s RunDate=..ConvertDateToCache(RunDate)
 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 /* TEMPLATE MODIFY: Clean up parameter variables - $zstrip(<variable>,"*CW") strips all control characters and whitespace, "<>W" just strips leading/trailing whitespace */

 /*
  * TEMPLATE MODIFY:
  *		1. Change name of cursor to something more descriptive than MyReportCursor (need to change in 4 places; here, 2x "fetch" expressions and close expression below)
  *		2. Change SQL query to query desired data, passing valid parameters as defined in Query and Execute method arguments.
  *		3. Pass appropriate parameters using :<ParameterVariableName> - eg. :Hospital
  */
 &SQL(DECLARE SWARHRATD1041CurPatCursor CURSOR FOR 
 SELECT
PAADM_PAPMI_DR->PAPMI_No,
PAADM_PAPMI_DR->PAPMI_Name,
PAADM_PAPMI_DR->PAPMI_Name2,
PAADM_PAPMI_DR->PAPMI_Name3,
PAADM_PAPMI_DR->PAPMI_Sex_DR->CTSEX_Code,
PAADM_RowId,
PAADM_AdmNo,
PAADM_AdmDate,
PAADM_AdmTime,
PAADM_DischgDate,
PAADM_DischgTime,
PAADM_CurrentWard_DR->WARD_Code,
PAADM_CurrentRoom_DR->ROOM_Code,
PAADM_CurrentBed_DR->BED_Code,
PAADM_AdmDocCodeDR->CTPCP_Desc
 FROM SQLUser.PA_Adm
 WHERE PAADM_Hospital_DR=:Hospital
 AND PAADM_Type='I'
 AND (PAADM_DischgDate is null or (PAADM_DischgDate > :RunDate))
 AND PAADM_AdmDate <= :RunDate
 AND ((PAADM_CurrentWard_DR=:WardId) OR (:WardId is null))
 AND PAADM_VisitStatus<>'C'
 )
 &SQL(OPEN SWARHRATD1041CurPatCursor)
 

 /* TEMPLATE MODIFY: Rename cursor to something moreChange fetch INTO parameter list to match column variable names */
 //FETCH FIRST ROW
 d FetchRow
  
 while 'SQLCODE{
  
 d FormatDates
  
  /* TEMPLATE MODIFY: Build the sort string here from column variables. Convert strings to uppercase ($ZCVT(<field>,"U") and separate with spaces */
 s sort = ind		// don't sort - uncomment this line if you've sorted in the query
 //s sort = $ZCVT(HOSPDesc,"U")_" "_$ZCVT(WARDDesc,"U")_" "_$ZCVT(ROOMCode,"U")_" "_$ZCVT(BEDCode,"U")_" "_$ZCVT(CTRLGDesc,"U")_" "_$ZCVT(PAPERName,"U")_" "_$ZCVT(PAPERName2,"U")_" "_$ZCVT(PAPERName3,"U")_ind
 
 /* TEMPLATE MODIFY: Build the list of fields by placing correct column variable names in the $LB() here. */
 
 	s ^CacheTemp("TRAK",repid,sort)=$LB(PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,CTSEXCode,
 PAADMRowId,PAADMAdmNo,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,
 WARDCode,ROOMCode,BEDCode,CTPCPDesc)
 s ind=ind+1
 
 
 /* TEMPLATE MODIFY: Change field variables to match row columns - copy FETCH FIRST ROW from above */
 //fetch rows
 d FetchRow}

 &SQL(CLOSE SWARHRATD1041CurPatCursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRow
 /* TEMPLATE MODIFY: Rename cursor to something moreChange fetch INTO parameter list to match column variable names */
 &sql(FETCH SWARHRATD1041CurPatCursor INTO :PAPMINo,:PAPMIName,:PAPMIName2,:PAPMIName3,:CTSEXCode,
 :PAADMRowId,:PAADMAdmNo,:PAADMAdmDate,:PAADMAdmTime,:PAADMDischgDate,:PAADMDischgTime,
 :WARDCode,:ROOMCode,:BEDCode,:CTPCPDesc)
 
 if SQLCODE '= 0 set END = 1
 q

FormatDates
 /* TEMPLATE MODIFY: Add an entry to perform a date format for all date/time fields here */
 if PAADMAdmDate s PAADMAdmDate=..ConvertDateToODBC(PAADMAdmDate)
 if PAADMDischgDate s PAADMDischgDate=..ConvertDateToODBC(PAADMDischgDate)
 if PAADMAdmTime s PAADMAdmTime=..ConvertTimeToODBC(PAADMAdmTime)
 if PAADMDischgTime s PAADMDischgTime=..ConvertTimeToODBC(PAADMDischgTime)
]]></Implementation>
</Method>

<Method name="SWARHRATD1041CurPatFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/* TEMPLATE MODIFY: Rename Stored Proc query to <MyStoredProcName> 
 * TEMPLATE MODIFY: Change parameters to match desired stored procedure parameters
 * TEMPLATE MODIFY: Change ROWSPEC list to match desired output column names and column data types */
]]></Content>
</UDLText>

<Query name="SWARHRATD1041CurPat">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Library.Integer,RunDate:%Date,WardId:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAPMINo:%String,PAPMIName:%String,PAPMIName2:%String,PAPMIName3:%String,CTSEXCode:%String,PAADMRowId:%Integer,PAADMAdmNo:%String,PAADMAdmDate:%Date,PAADMAdmTime:%String,PAADMDischgDate:%Date,PAADMDischgTime:%String,WARDCode:%String,ROOMCode:%String,BEDCode:%String,CTPCPDesc:%String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>

<Method name="SWARHRATD1041TransInClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRATD1041TransInExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Library.Integer,RunDate:%Date,WardId:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 New Number,String,Date,Time,c,n

 /* TEMPLATE MODIFY: Define and initialise appropriate column variables to describe output rowset columns */
 New PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,CTSEXCode,
 PAADMRowId,PAADMAdmNo,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,
 WARDCode,ROOMCode,BEDCode,CTPCPDesc,TRANSStartDate,TRANSStartTime,TRANSFromWardCode
 Set (PAADMRowId) = 0
 Set (PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,CTSEXCode,
 PAADMAdmNo,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,
 WARDCode,ROOMCode,BEDCode,CTPCPDesc,TRANSStartDate,TRANSStartTime,TRANSFromWardCode)=""

 s ind=1
 //Convert ODBC dates to cache format
 s RunDate=..ConvertDateToCache(RunDate)
 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 /* TEMPLATE MODIFY: Clean up parameter variables - $zstrip(<variable>,"*CW") strips all control characters and whitespace, "<>W" just strips leading/trailing whitespace */

 /*
  * TEMPLATE MODIFY:
  *		1. Change name of cursor to something more descriptive than MyReportCursor (need to change in 4 places; here, 2x "fetch" expressions and close expression below)
  *		2. Change SQL query to query desired data, passing valid parameters as defined in Query and Execute method arguments.
  *		3. Pass appropriate parameters using :<ParameterVariableName> - eg. :Hospital
  */
 &SQL(DECLARE SWARHRATD1041TransInCursor CURSOR FOR 
 SELECT adm.PAADM_PAPMI_DR->PAPMI_No,
adm.PAADM_PAPMI_DR->PAPMI_Name,
adm.PAADM_PAPMI_DR->PAPMI_Name2,
adm.PAADM_PAPMI_DR->PAPMI_Name3,
adm.PAADM_PAPMI_DR->PAPMI_Sex_DR->CTSEX_Code,
adm.PAADM_RowId,
adm.PAADM_AdmNo,
adm.PAADM_AdmDate,
adm.PAADM_AdmTime,
adm.PAADM_DischgDate,
adm.PAADM_DischgTime,
adm.PAADM_CurrentWard_DR->WARD_Code,
adm.PAADM_CurrentRoom_DR->ROOM_Code,
adm.PAADM_CurrentBed_DR->BED_Code,
adm.PAADM_AdmDocCodeDR->CTPCP_Desc,
trans.TRANS_StartDate,
trans.TRANS_StartTime,
trans1.TRANS_Ward_DR->WARD_Code
FROM SQLUser.PA_Adm adm left join SQLUser.PA_AdmTransaction trans on trans.TRANS_ParRef=adm.PAADM_RowId
left join SQLUser.PA_AdmTransaction trans1 on (trans.TRANS_ParRef=trans1.TRANS_ParRef and (trans1.TRANS_Ward_DR <> trans.TRANS_Ward_DR))
left join SQLUser.PA_AdmTransaction2 t2 on trans.TRANS_RowId=t2.TRANSRowId
where adm.PAADM_Hospital_DR=:Hospital
and adm.PAADM_Type='I'
and (adm.PAADM_DischgDate is null or adm.PAADM_DischgDate > :RunDate)
and adm.PAADM_AdmDate <= :RunDate
and adm.PAADM_VisitStatus<>'C'
and adm.PAADM_CurrentWard_DR = :WardId
and trans.TRANS_Ward_DR = :WardId
and trans.TRANS_StartDate = :RunDate
and trans1.TRANS_Ward_DR is not null
group by adm.PAADM_PAPMI_DR,adm.PAADM_RowId
order by trans1.TRANS_StartDate desc, trans1.TRANS_StartTime desc
 )
 &SQL(OPEN SWARHRATD1041TransInCursor)
 

 /* TEMPLATE MODIFY: Rename cursor to something moreChange fetch INTO parameter list to match column variable names */
 //FETCH FIRST ROW
 d FetchRowTransIn
  
 while 'SQLCODE{
  
 d FormatDatesTransIn
  
  /* TEMPLATE MODIFY: Build the sort string here from column variables. Convert strings to uppercase ($ZCVT(<field>,"U") and separate with spaces */
 s sort = ind		// don't sort - uncomment this line if you've sorted in the query
 //s sort = $ZCVT(HOSPDesc,"U")_" "_$ZCVT(WARDDesc,"U")_" "_$ZCVT(ROOMCode,"U")_" "_$ZCVT(BEDCode,"U")_" "_$ZCVT(CTRLGDesc,"U")_" "_$ZCVT(PAPERName,"U")_" "_$ZCVT(PAPERName2,"U")_" "_$ZCVT(PAPERName3,"U")_ind
 
 /* TEMPLATE MODIFY: Build the list of fields by placing correct column variable names in the $LB() here. */
 
 	s ^CacheTemp("TRAK",repid,sort)=$LB(PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,CTSEXCode,
 PAADMRowId,PAADMAdmNo,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,
 WARDCode,ROOMCode,BEDCode,CTPCPDesc,TRANSStartDate,TRANSStartTime,TRANSFromWardCode)
 s ind=ind+1
 
 
 /* TEMPLATE MODIFY: Change field variables to match row columns - copy FETCH FIRST ROW from above */
 //fetch rows
 d FetchRowTransIn}

 &SQL(CLOSE SWARHRATD1041TransInCursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRowTransIn
 /* TEMPLATE MODIFY: Rename cursor to something moreChange fetch INTO parameter list to match column variable names */
 &sql(FETCH SWARHRATD1041TransInCursor INTO :PAPMINo,:PAPMIName,:PAPMIName2,:PAPMIName3,:CTSEXCode,
 :PAADMRowId,:PAADMAdmNo,:PAADMAdmDate,:PAADMAdmTime,:PAADMDischgDate,:PAADMDischgTime,
 :WARDCode,:ROOMCode,:BEDCode,:CTPCPDesc,:TRANSStartDate,:TRANSStartTime,:TRANSFromWardCode)
 
 if SQLCODE '= 0 set END = 1
 q

FormatDatesTransIn
 /* TEMPLATE MODIFY: Add an entry to perform a date format for all date/time fields here */
 if PAADMAdmDate s PAADMAdmDate=..ConvertDateToODBC(PAADMAdmDate)
 if PAADMDischgDate s PAADMDischgDate=..ConvertDateToODBC(PAADMDischgDate)
 if PAADMAdmTime s PAADMAdmTime=..ConvertTimeToODBC(PAADMAdmTime)
 if PAADMDischgTime s PAADMDischgTime=..ConvertTimeToODBC(PAADMDischgTime)
 if TRANSStartDate s TRANSStartDate=..ConvertDateToODBC(TRANSStartDate)
 if TRANSStartTime s TRANSStartTime=..ConvertTimeToCache(TRANSStartTime)
]]></Implementation>
</Method>

<Method name="SWARHRATD1041TransInFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/* TEMPLATE MODIFY: Rename Stored Proc query to <MyStoredProcName> 
 * TEMPLATE MODIFY: Change parameters to match desired stored procedure parameters
 * TEMPLATE MODIFY: Change ROWSPEC list to match desired output column names and column data types */
]]></Content>
</UDLText>

<Query name="SWARHRATD1041TransIn">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Library.Integer,RunDate:%Date,WardId:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAPMINo:%String,PAPMIName:%String,PAPMIName2:%String,PAPMIName3:%String,CTSEXCode:%String,PAADMRowId:%Integer,PAADMAdmNo:%String,PAADMAdmDate:%Date,PAADMAdmTime:%String,PAADMDischgDate:%Date,PAADMDischgTime:%String,WARDCode:%String,ROOMCode:%String,BEDCode:%String,CTPCPDesc:%String,TRANSStartDate:%Date,TRANSStartTime:%String,TRANSFromWardCode:%String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>

<Method name="SWARHRATD1041TransOutClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRATD1041TransOutExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Library.Integer,RunDate:%Date,WardId:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 New Number,String,Date,Time,c,n

 /* TEMPLATE MODIFY: Define and initialise appropriate column variables to describe output rowset columns */
 New PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,CTSEXCode,
 PAADMRowId,PAADMAdmNo,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,
 WARDCode,ROOMCode,BEDCode,CTPCPDesc,TransToWARDCode,TransDate,TransTime
 Set (PAADMRowId) = 0
 Set (PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,CTSEXCode,
 PAADMAdmNo,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,
 WARDCode,ROOMCode,BEDCode,CTPCPDesc,TransToWARDCode,TransDate,TransTime)=""

 s ind=1
 //Convert ODBC dates to cache format
 s RunDate=..ConvertDateToCache(RunDate)
 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 /* TEMPLATE MODIFY: Clean up parameter variables - $zstrip(<variable>,"*CW") strips all control characters and whitespace, "<>W" just strips leading/trailing whitespace */

 /*
  * TEMPLATE MODIFY:
  *		1. Change name of cursor to something more descriptive than MyReportCursor (need to change in 4 places; here, 2x "fetch" expressions and close expression below)
  *		2. Change SQL query to query desired data, passing valid parameters as defined in Query and Execute method arguments.
  *		3. Pass appropriate parameters using :<ParameterVariableName> - eg. :Hospital
  */
 &SQL(DECLARE SWARHRATD1041TransOutCursor CURSOR FOR 
 
 
 select adm.PAADM_AdmNo,
adm.PAADM_PAPMI_DR->PAPMI_No,
adm.PAADM_PAPMI_DR->PAPMI_Name,
adm.PAADM_PAPMI_DR->PAPMI_Name2,
adm.PAADM_PAPMI_DR->PAPMI_Sex_DR->CTSEX_Code,
adm.PAADM_RowId,
adm.PAADM_AdmNo,
adm.PAADM_AdmDate,
adm.PAADM_AdmTime,
adm.PAADM_DischgDate,
adm.PAADM_DischgTime,
adm.PAADM_CurrentWard_DR->WARD_Code,
adm.PAADM_CurrentRoom_DR->ROOM_Code,
adm.PAADM_CurrentBed_DR->BED_Code,
adm.PAADM_AdmDocCodeDR->CTPCP_Desc,
trans1.TRANS_Ward_DR->WARD_Code,
trans1.TRANS_StartDate,
trans1.TRANS_StartTime
from SQLUser.PA_Adm adm left join SQLUser.PA_AdmTransaction trans on adm.PAADM_RowId=trans.TRANS_ParRef
left join SQLUser.PA_AdmTransaction trans1 on (
        trans.TRANS_ParRef=trans1.TRANS_ParRef and
        (trans1.TRANS_StartDate>trans.TRANS_StartDate or (trans1.TRANS_StartDate=trans.TRANS_StartDate and trans1.TRANS_StartTime>trans.TRANS_StartTime))
)
where adm.PAADM_Hospital_DR=:Hospital
and (adm.PAADM_DischgDate is null or adm.PAADM_DischgDate > :RunDate)
and adm.PAADM_Type='I'
and adm.PAADM_VisitStatus <> 'C'
and trans.TRANS_Ward_DR = :WardId
and trans1.TRANS_Ward_DR<>:WardId
and trans1.TRANS_StartDate=:RunDate
group by adm.PAADM_RowId,trans1.TRANS_StartDate,trans1.TRANS_StartTime

 )
 &SQL(OPEN SWARHRATD1041TransOutCursor)
 

 /* TEMPLATE MODIFY: Rename cursor to something moreChange fetch INTO parameter list to match column variable names */
 //FETCH FIRST ROW
 d FetchRowTransOut
  
 while 'SQLCODE{
  
 d FormatDatesTransOut
  
  /* TEMPLATE MODIFY: Build the sort string here from column variables. Convert strings to uppercase ($ZCVT(<field>,"U") and separate with spaces */
 s sort = ind		// don't sort - uncomment this line if you've sorted in the query
 //s sort = $ZCVT(HOSPDesc,"U")_" "_$ZCVT(WARDDesc,"U")_" "_$ZCVT(ROOMCode,"U")_" "_$ZCVT(BEDCode,"U")_" "_$ZCVT(CTRLGDesc,"U")_" "_$ZCVT(PAPERName,"U")_" "_$ZCVT(PAPERName2,"U")_" "_$ZCVT(PAPERName3,"U")_ind
 
 /* TEMPLATE MODIFY: Build the list of fields by placing correct column variable names in the $LB() here. */
 
 	s ^CacheTemp("TRAK",repid,sort)=$LB(PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,CTSEXCode,
 PAADMRowId,PAADMAdmNo,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,
 WARDCode,ROOMCode,BEDCode,CTPCPDesc,TransToWARDCode,TransDate,TransTime)
 s ind=ind+1
 
 
 /* TEMPLATE MODIFY: Change field variables to match row columns - copy FETCH FIRST ROW from above */
 //fetch rows
 d FetchRowTransOut}

 &SQL(CLOSE SWARHRATD1041TransOutCursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRowTransOut
 /* TEMPLATE MODIFY: Rename cursor to something moreChange fetch INTO parameter list to match column variable names */
 &sql(FETCH SWARHRATD1041TransOutCursor INTO :PAPMINo,:PAPMIName,:PAPMIName2,:PAPMIName3,:CTSEXCode,
 :PAADMRowId,:PAADMAdmNo,:PAADMAdmDate,:PAADMAdmTime,:PAADMDischgDate,:PAADMDischgTime,
 :WARDCode,:ROOMCode,:BEDCode,:CTPCPDesc,:TransToWARDCode,:TransDate,:TransTime)
 
 if SQLCODE '= 0 set END = 1
 q

FormatDatesTransOut
 /* TEMPLATE MODIFY: Add an entry to perform a date format for all date/time fields here */
 if PAADMAdmDate s PAADMAdmDate=..ConvertDateToODBC(PAADMAdmDate)
 if PAADMDischgDate s PAADMDischgDate=..ConvertDateToODBC(PAADMDischgDate)
 if PAADMAdmTime s PAADMAdmTime=..ConvertTimeToODBC(PAADMAdmTime)
 if PAADMDischgTime s PAADMDischgTime=..ConvertTimeToODBC(PAADMDischgTime)
 if TransDate s TransDate=..ConvertDateToODBC(TransDate)
 if TransTime s TransTime=..ConvertTimeToODBC(TransTime)
]]></Implementation>
</Method>

<Method name="SWARHRATD1041TransOutFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/* TEMPLATE MODIFY: Rename Stored Proc query to <MyStoredProcName> 
 * TEMPLATE MODIFY: Change parameters to match desired stored procedure parameters
 * TEMPLATE MODIFY: Change ROWSPEC list to match desired output column names and column data types */
]]></Content>
</UDLText>

<Query name="SWARHRATD1041TransOut">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Library.Integer,RunDate:%Date,WardId:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAPMINo:%String,PAPMIName:%String,PAPMIName2:%String,PAPMIName3:%String,CTSEXCode:%String,PAADMRowId:%Integer,PAADMAdmNo:%String,PAADMAdmDate:%Date,PAADMAdmTime:%String,PAADMDischgDate:%Date,PAADMDischgTime:%String,WARDCode:%String,ROOMCode:%String,BEDCode:%String,CTPCPDesc:%String,TransToWARDCode:%String,TransDate:%Date,TransTime:%String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
