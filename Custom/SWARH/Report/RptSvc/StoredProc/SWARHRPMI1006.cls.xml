<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRPMI1006">
<Description><![CDATA[
<pre>
***************************************************************************************************************************************
* Report Code: SWARHRPMI1006
* Report Description: The report displays alerts for patients, grouped by status. SRS filters on Status.
* Menu Caption: Patients Alert List
* Initial Release:  Developer: Michael Welsh
* Modified: 
***************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.RptSvc.StoredProc.Abstract</Super>
<TimeCreated>61579,40584</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRPMI1006.xml#1 $</Default>
</Parameter>

<Method name="SWARHRPMI1006Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer,CreateDate:%Date,Alert:%Integer,Status:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind
 
 // Use $Increment to get the next node
 Set repid=$INCREMENT(^CacheTemp(..#CACHETEMPSUBSCRIPT))
 
 New ALMStatus,ALMMessage,HOSPCode,ALMExpiryDate,ALMOnsetDate, PAPMINo,PAPMIName,PAPMIName2,AlertCode,AlertDesc,ALERTCATDesc,ALMCreateDate,
 ALMClosedFlag,ALEXPDesc
 
 Set (ALMStatus,ALMMessage,HOSPCode,ALMExpiryDate,ALMOnsetDate, PAPMINo,PAPMIName,PAPMIName2,AlertCode,AlertDesc, ALERTCATDesc,ALMCreateDate,
 ALMClosedFlag,ALEXPDesc)=""
 
 Set ind=1, END=0
 
 //Start Monitor (if configured to capture stats)
 Set mon=..MonitorBegin()
 
 Set CreateDate=..ConvertDateToCache(CreateDate)
 
 //Convert ODBC dates to cache format
 &SQL(DECLARE SWARHRPMI1006 CURSOR FOR
	 SELECT
	 	ALM_Status,
 		ALM_Message,
 		ALM_LastUpdateHospital_DR->HOSP_Code,
 		ALM_ExpiryDate,
 		ALM_OnsetDate,
 		ALM_PAPMI_ParRef->PAPMI_No,
 		ALM_PAPMI_ParRef->PAPMI_Name,
 		ALM_PAPMI_ParRef->PAPMI_Name2,
 		ALM_Alert_DR->Alert_Code,
 		ALM_Alert_DR->Alert_Desc,
 		ALM_Alert_DR->ALERT_AlertCategory_DR->ALERTCAT_Desc,
 		ALM_CreateDate,
 		ALM_ClosedFlag,
 		ALM_ExpiryReason_DR->ALEXP_Desc
 	FROM
 		SQLUser.PA_AlertMsg
 	WHERE
 		ALM_LastUpdateHospital_DR = :Hospital
 	AND
 		ALM_CreateDate >= :CreateDate
 	AND
 		(ALM_Alert_DR = :Alert OR (:Alert IS NULL))
 	AND
 		(ALM_Status = :Status OR (:Status IS NULL)))
 	
 &SQL(OPEN SWARHRPMI1006) 
	 
 //FETCH FIRST ROW
 Do FetchRow
 
 WHILE END=0{
	 
	 Do FormatDates,FormatStrings
  	 
  	 Set sort = ind
  	 
  	 Set ^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,sort)=$LISTBUILD(ALMStatus,ALMMessage,HOSPCode,ALMExpiryDate,ALMOnsetDate,PAPMINo
	 	,PAPMIName,PAPMIName2,AlertCode,AlertDesc,ALERTCATDesc,ALMCreateDate,ALMClosedFlag,ALEXPDesc)
	 
	 Set ind=ind+1
	 
	 //fetch rows
	 Do FetchRow
 }
 &SQL(CLOSE SWARHRPMI1006)	 
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$listbuild(0,repid,0)

 Quit $$$OK
 
FetchRow 
 &SQL(Fetch SWARHRPMI1006 INTO :ALMStatus,:ALMMessage,:HOSPCode,:ALMExpiryDate,:ALMOnsetDate, :PAPMINo,:PAPMIName,:PAPMIName2
 	,:AlertCode,:AlertDesc,:ALERTCATDesc,:ALMCreateDate,:ALMClosedFlag,:ALEXPDesc)
 If SQLCODE '= 0 Set END = 1
 Quit
 
FormatDates
 // Convert the dates to ODBC date format
 If ALMExpiryDate Set ALMExpiryDate=..ConvertDateToODBC(ALMExpiryDate)
 If ALMOnsetDate Set ALMOnsetDate=..ConvertDateToODBC(ALMOnsetDate)
 If ALMCreateDate Set ALMCreateDate=..ConvertDateToODBC(ALMCreateDate)
 Quit

FormatTimes
 // Convert the times to ODBC time format
 //If PAADMAdmTime Set PAADMAdmTime=..ConvertTimeToHHMM(PAADMAdmTime) 
 Quit

FormatStrings
 Set ALMMessage=$ZSTRIP(ALMMessage,"*C") //Removes control characters (0-31,127-159)
 Set ALMMessage=$ZSTRIP(ALMMessage,"*",$CHAR(34,35,39,44,46)) //Removes 34-Quotes,35-Hash,39-Single quote,44-Comma,46-Period
]]></Implementation>
</Method>

<Method name="SWARHRPMI1006Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$LIST(QHandle,1)
 Set repid=$LIST(QHandle,2)
 Set ind=$LIST(QHandle,3)

 Set ind=$ORDER(^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,ind)
 }

 // Save QHandle
 Set QHandle=$LISTBUILD(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRPMI1006Close">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$LIST(QHandle,2)

 Kill ^CacheTemp(..#CACHETEMPSUBSCRIPT,repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHRPMI1006">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer,CreateDate:%Date,Alert:%Integer,Status:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="ALMStatus:%String(MAXLEN=255),ALMMessage:%String(MAXLEN=255),HOSPCode:%String(MAXLEN=255),ALMExpiryDate:%Date,ALMOnsetDate:%Date, PAPMINo:%String(MAXLEN=255),PAPMIName:%String(MAXLEN=255),PAPMIName2:%String(MAXLEN=255),AlertCode:%String(MAXLEN=255),AlertDesc:%String(MAXLEN=255),ALERTCATDesc:%String(MAXLEN=255),ALMCreateDate:%Date,ALMClosedFlag:%String(MAXLEN=255),ALEXPDesc:%String(MAXLEN=255)"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
