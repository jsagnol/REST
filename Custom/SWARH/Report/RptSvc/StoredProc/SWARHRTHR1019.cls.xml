<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.RptSvc.StoredProc.SWARHRTHR1019">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARHRTHR1019
* Report Description: Theatre Management List
* Menu Caption: Theatre / Theatre Management List
* Initial release: unknown
* Developer: Zac Newman
* Report Shows: Theatre worklist for date specified
* Report Fields: Theatre, Surgeon, Anaesthetist, Session, URNo, Pat.Name, Sex, Age, Alerts, Adm Time, Pre Op, Op Time, Post OP, Cat, Procedure 
* Modified: 22/08/2013
* Modified: 25/09/2013 - bsharpe   - Altered the where clause to filter on ward code not description.
* Modified: 27/09/2013 - bsharpe   - Changed the where clause to filter on Post Op ward, not Pre Op ward.
* Modified: 10/10/2013 - bsharpe   - Rewrote the query to return the correct data.
* Modified: 20/10/2013 - mwelsh    - Added WL_IntendedWard_DR->Ward_Code AS PostOpWard, GetPreAdmWard to get PreOpWard from PA_AdmTransaction.
* Modified: 07/04/2014 - mwelsh    - Added Session Start & End times to query, replaced AMPM in rpt with session times.
* Modified: 02/06/2016 - rpgladman - Changed alert checking code to use (Custom.SWARH.web.PAAlertMsg).HasActiveAlertsWithoutCategoryTag
*                                    to allow it to exclude "Patient does not have a PCEHR" alerts from registering on the list.
**************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>62768,42962.929032</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/RptSvc/StoredProc/SWARHRTHR1019.xml#1 $</Default>
</Parameter>

<Method name="SWARHRTHR1019QueryClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHRTHR1019QueryExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Library.String,Date:%Date,WardCode:%Library.String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind,END

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 /* TEMPLATE MODIFY: Define and initialise appropriate column variables to describe output rowset columns */
 New PAPMINo,RBOPTimeOper,AMPM,WARDCode,CTSEXGender,PAPERAgeYr,SPPPDesc,Alert,RBOPDateOper,RBOPDateBook,SessStartTime,SessEndTime
 New RBOPResourceDR,RESDesc,CTPCPDesc,Anaesthetist,WLProcedureFreeText,RBOPSequenceNo,RBOPEstimatedTime,PAADMAdmTime,WLPCode,PAPMIRowId,SecondaryWard,ADMCATDesc,FinConCode,PAADMRowId,PostOpWard,PreAdmWard
 Set (PAPMINo,RBOPTimeOper,AMPM,WARDCode,CTSEXGender,PAPERAgeYr,SPPPDesc,Alert,RBOPDateOper,RBOPDateBook,SessStartTime,SessEndTime)=""
 Set (RBOPResourceDR,RESDesc,CTPCPDesc,CTPCPDesc1,WLProcedureFreeText,RBOPSequenceNo,RBOPEstimatedTime,PAADMAdmTime,WLPCode,PAPMIRowId,SecondaryWard,ADMCATDesc,FinConCode,PAADMRowId,PostOpWard,PreAdmWard)=""

 New CurrResourceRESDR, CurrTimeOper, CalcTimeOper, CalcTimeOperFormat, CurrResourceDR
 Set (CurrResourceRESDR, CurrTimeOper, CalcTimeOper, CalcTimeOperFormat, CurrResourceDR) = 0
 
 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()

 s Hospital=$zstrip(Hospital,"*CW")
 //Convert ODBC dates to cache format
 s Date=..ConvertDateToCache(Date)

 &SQL(DECLARE SWARHRTHR1019Cursor CURSOR FOR 
		 SELECT 
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_No,
				RBOP_TimeOper,
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_Name, 
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_Name2,
				RBOP_PAADM_DR->PAADM_CurrentWard_DR->WARD_Code,
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_Sex_DR->CTSEX_Gender,
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_AgeYr,
				RBOP_StatePPP_DR->SPPP_Desc,
				'No' AS Alert,
				RBOP_DateOper, 
				RBOP_DateBook,
				RBOP_Resource_DR, 
				RBOP_Resource_DR->RES_Desc, 
				(RBOP_Surgeon_DR->CTPCP_Desc)As CTPCP_Desc,
				CASE WHEN RBOP_Anaesthetist_DR is null 
				THEN 'NAR'
				ELSE (RBOP_Anaesthetist_DR->CTPCP_Desc) END AS Anaesthetist,
				(RBOP_ProcsOpers) AS WL_ProcedureFreeText,
				RBOP_SequenceNo,
				RBOP_EstimatedTime,
				PA.PAADM_AdmTime,
				WL.WL_WaitListPrior_DR->WLP_Code,
				RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_RowId,
				RBOP_PAADM_DR->PAADM_CurrentWard_DR->WARD_Code As SecondaryWard,
				CASE WHEN RBOP_PAADM_DR->PAADM_AdmCateg_DR->ADMCAT_Code = 3 THEN 'SD'
					WHEN RBOP_PAADM_DR->PAADM_AdmCateg_DR->ADMCAT_Code = 1 THEN 'SD'
					WHEN RBOP_PAADM_DR->PAADM_AdmCateg_DR->ADMCAT_Code = 4 THEN 'O/N'
					ELSE 'Unknown'
				END AS ADMCATDesc,
				RBOP_PAADM_DR->PAADM_RowId,
				WL_IntendedWard_DR->Ward_Code AS PostOpWard
				,RBOP_Appoint_DR->APPT_AS_ParRef->AS_SessStartTime AS SessStartTime
                ,RBOP_Appoint_DR->APPT_AS_ParRef->AS_SessEndTime AS SessEndTime
		FROM SQLUSER.RB_OperatingRoom
			INNER JOIN SQLUser.PA_Adm PA ON (RBOP_PAADM_DR=PAADM_RowID) 
			--LEFT JOIN SQLUser.PA_AlertMsg AM ON (PAADM_PAPMI_DR=ALM_PAPMI_ParRef)
			LEFT JOIN SQLUser.PA_WaitingList WL ON (RB_OperatingRoom.RBOP_Waitlist_DR = WL.WL_RowId)
			
		WHERE RBOP_DateOper = :Date
			AND RBOP_PAADM_DR->PAADM_Hospital_DR = :Hospital
			AND RBOP_Status NOT IN ('X')
			AND (RBOP_PAADM_DR->PAADM_CurrentWard_DR IN (:WardCode) or :WardCode is null)
			
		ORDER BY RBOP_Resource_DR, RBOP_TimeOper, RBOP_SequenceNo
		)
		
 &SQL(OPEN SWARHRTHR1019Cursor)
 
 /* TEMPLATE MODIFY: Rename cursor to something moreChange fetch INTO parameter list to match column variable names */
 //FETCH FIRST ROW
 d FetchRow
  
 while END=0 {
	 
	 d GetPreAdmWard
	   
   	 If (CurrResourceDR '= RBOPResourceDR) {
	 	 Set CurrTimeOper = ""
	 	 Set CurrResourceDR = RBOPResourceDR
 	 }
 	 If (CurrTimeOper '= RBOPTimeOper) {
	 	 Set CalcTimeOper = RBOPTimeOper
	 	 Set CurrTimeOper = RBOPTimeOper
 	 }
 	 
 	 
	 d FormatDates
  	 d FormatTimes
  	 
  	 //s NumAlerts=$$GetNumAlerts(PAPMIRowId)
  	 //s Alert=$$GetAlerts(PAPMIRowId) // DEPRECATED - Replaced with call to ##Class(Custom.SWARH.web.PAAlertMsg).HasActiveAlertsWithoutCategoryTag - rpgladman 2016-06-02
  	 
  	 if ##Class(Custom.SWARH.web.PAAlertMsg).HasActiveAlertsWithoutCategoryTag(PAPMIRowId,"ESA")'=0 {
	 	set Alert="Yes"
  	 } else {
	 	set Alert="No"
  	 }
  	 
	 s sort = ind		// don't sort - uncomment this line if you've sorted in the query
	 //s sort = $ZCVT(HOSPDesc,"U")_" "_$ZCVT(WARDDesc,"U")_" "_$ZCVT(ROOMCode,"U")_" "_$ZCVT(BEDCode,"U")_" "_$ZCVT(CTRLGDesc,"U")_" "_$ZCVT(PAPERName,"U")_" "_$ZCVT(PAPERName2,"U")_" "_$ZCVT(PAPERName3,"U")_ind
 	 //Set CalcTimeOperFormat = ..ConvertTimeToODBC(CalcTimeOper)
 	 Set CalcTimeOperFormat=$ZT(CalcTimeOper,2)
	 s ^CacheTemp("TRAK",repid,sort)=$LB(PAPMINo,RBOPTimeOper,PAPMIName,PAPMIName2,AMPM,WARDCode,CTSEXGender,PAPERAgeYr,SPPPDesc,Alert,RBOPDateOper,RBOPDateBook,RBOPResourceDR,RESDesc,CTPCPDesc,Anaesthetist,WLProcedureFreeText,RBOPSequenceNo,RBOPEstimatedTime,PAADMAdmTime,CalcTimeOperFormat,WLPCode,PAPMIRowId,SecondaryWard,ADMCATDesc,FinConCode,PAADMRowId,PostOpWard,PreAdmWard,SessStartTime,SessEndTime)
	 s ind=ind+1
 
 	 Set CalcTimeOper = CalcTimeOper + (RBOPEstimatedTime * 60)
 	
	 //fetch rows
 	 d FetchRow
 }

 &SQL(CLOSE SWARHRTHR1019Cursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(FETCH SWARHRTHR1019Cursor INTO :PAPMINo,:RBOPTimeOper,:PAPMIName,:PAPMIName2,:WARDCode,:CTSEXGender,:PAPERAgeYr,:SPPPDesc,:Alert,:RBOPDateOper,:RBOPDateBook,:RBOPResourceDR,:RESDesc,:CTPCPDesc,:Anaesthetist,:WLProcedureFreeText,:RBOPSequenceNo,:RBOPEstimatedTime,:PAADMAdmTime,:WLPCode,:PAPMIRowId,:SecondaryWard,:ADMCATDesc,:PAADMRowId,:PostOpWard,:SessStartTime,:SessEndTime)
 if SQLCODE '= 0 set END = 1
 q
 
GetPreAdmWard
 set PreAdmWard = ""
 &sql(SELECT TRANS_Ward_DR->Ward_Code INTO :PreAdmWard FROM SQLUser.PA_AdmTransaction WHERE TRANS_ParRef = :PAADMRowId AND TRANS_TransType_DR->TRANSTYP_Code = 'B')
 Quit 

FormatDates
 /* TEMPLATE MODIFY: Add an entry to perform a date format for all date/time fields here */
 s RBOPDateOper=..ConvertDateToODBC(RBOPDateOper)
 s RBOPDateBook=..ConvertDateToODBC(RBOPDateBook)
 s WLProcedureFreeText = $LISTTOSTRING(WLProcedureFreeText, $CHAR(13)_$CHAR(10))
 s FinConCode =..GetFinDetailsForEpisode(PAADMRowId) 
 //s FinConCode = "Broken"
 q
FormatTimes
 s AMPM = $SELECT(RBOPTimeOper < (12*60*60):"AM",1:"PM")
 //s RBOPTimeOper=..ConvertTimeToODBC(RBOPTimeOper)
 If RBOPTimeOper Set RBOPTimeOper=$ZT(RBOPTimeOper,2)
 //s PAADMAdmTime=..ConvertTimeToODBC(PAADMAdmTime)
 If PAADMAdmTime Set PAADMAdmTime=$ZT(PAADMAdmTime,2)
 If SessStartTime Set SessStartTime=$ZT(SessStartTime,2)
 If SessEndTime Set SessEndTime=$ZT(SessEndTime,2)
 
 q
	/*
GetNumAlerts(PAPMIRowId)
 s numAlerts=0
 s (Childsub, ALMCreateDate, ALMClosedFlag, ALMClosedDate) = ""
 For {
	s Childsub=$O(^PAPER(PAPMIRowId,"ALM",Childsub))
	Quit:(Childsub="")
	s ALMCreateDate=$P(^PAPER(PAPMIRowId,"ALM",Childsub),"^",4)
	s ALMClosedFlag=$P(^PAPER(PAPMIRowId,"ALM",Childsub),"^",7)
	s ALMClosedDate=$P(^PAPER(PAPMIRowId,"ALM",Childsub),"^",15)
	if ((ALMClosedFlag="N") && (ALMCreateDate<=$NOW()) && ((ALMClosedDate="") || (ALMClosedDate>$NOW()))) {
		s numAlerts=numAlerts+1
	}
 }
 q numAlerts
 	
 
GetAlerts(PAPMIRowId) // DEPRECATED - 2016-06-02
  s (Childsub, ALMCreateDate, ALMClosedFlag, ALMClosedDate) = ""
  For {
	s Childsub=$O(^PAPER(PAPMIRowId,"ALM",Childsub))
	Quit:(Childsub="")
	s ALMCreateDate=$P(^PAPER(PAPMIRowId,"ALM",Childsub),"^",4)
	s ALMClosedFlag=$P(^PAPER(PAPMIRowId,"ALM",Childsub),"^",7)
	s ALMClosedDate=$P(^PAPER(PAPMIRowId,"ALM",Childsub),"^",15)
	if ((ALMClosedFlag="N") && (ALMCreateDate<=$NOW()) && ((ALMClosedDate="") || (ALMClosedDate>$NOW()))) {
		s Alert="Yes"
		Quit
	}
  }
  q Alert
	*/
]]></Implementation>
</Method>

<Method name="SWARHRTHR1019QueryFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/* TEMPLATE MODIFY: Rename Stored Proc query to <MyStoredProcName> 
 * TEMPLATE MODIFY: Change parameters to match desired stored procedure parameters
 * TEMPLATE MODIFY: Change ROWSPEC list to match desired output column names and column data types */
]]></Content>
</UDLText>

<Query name="SWARHRTHR1019Query">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Library.String,Date:%Date,WardCode:%Library.String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAPMINo:%Library.String,RBOPTimeOper:%Library.String,PAPMIName:%Library.String,PAPMIName2:%Library.String,AMPM:%Library.String,WARDCode:%Library.String,CTSEXGender:%Library.String,PAPERAgeYr:%Library.Integer,SPPPDesc:%Library.String,Alert:%Library.String,RBOPDateOper:%Library.Date,RBOPDateBook:%Library.Date,RBOPResourceDR:%Library.Integer,RESDesc:%Library.String,CTPCPDesc:%Library.String,Anaesthetist:%Library.String,WLProcedureFreeText:%Library.String,RBOPSequenceNo:%Library.Integer,RBOPEstimatedTime:%Library.Integer,PAADMAdmTime:%Library.String,CalcTimeOperFormat:%Library.String,WLPCode:%Library.Integer,PAPMIRowId:%Library.Integer,SecondaryWard:%Library.String,ADMCATDesc:%Library.String,FinConCode:%Library.String,PAADMRowId:%Library.String,PostOpWard:%Library.String,PreAdmWard:%Library.String,SessStartTime:%Library.String,SessEndTime:%Library.String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
