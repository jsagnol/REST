<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.ZEN.StoredProc.SWARHZNAP1005">
<Description><![CDATA[
<pre>
***************************************************************************************************************************************
* Report Code: SWARHZNAP1005
* Report Description: SWARH SNAP Patient Labels
* Menu Caption: SWARH SNAP Patient Labels
* Initial release: 07/08/15 Developer: Ross Gladman
* Modified: 		
***************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>59388,55236.125</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/ZEN/StoredProc/SWARHZNAP1005.xml#1 $</Default>
</Parameter>

<Method name="SWARHZNAP1005Close">
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$LIST(QHandle,2)
 
 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHZNAP1005Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,PatientID:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$Increment(^CacheTemp("TRAK"))
 
 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
  
 // Build data into ^CacheTemp("TRAK",ReportID)
 New Number,String,Date,Time
 New PAPMINo,PAPMINoBarcode,PAPMIName,PAPMIName2      // NOTE: You cannot have put a * character in a string in the class method so we have to add one here instead
 Set (PAPMINo,PAPMINoBarcode,PAPMIName,PAPMIName2)=""
 Set ind=1, END=0

 &SQL(DECLARE SWARHZNAP1005 CURSOR FOR
   SELECT
     PAPMI_No             As PAPMINo
    ,'*'||PAPMI_No||'*'   As PAPMINoBarcode
    ,PAPMI_Name           As PAPMIName
    ,PAPMI_Name2          As PAPMIName2
    ,PAPMI_Name3          As PAPMIName3
   FROM 
     SQLUser.PA_PatMas
   WHERE 
     PAPMI_RowId = :PatientID
 )
  
 &SQL(OPEN SWARHZNAP1005)
 
 d FetchRow //Fetch first row
  
 while END=0 {
   s sort = ind
	 s ^CacheTemp("TRAK",repid,sort)=$LB(PAPMINo,PAPMINoBarcode,PAPMIName,PAPMIName2,PAPMIName3)
	 s ind=ind+1
 	 d FetchRow //Fetch next row
 }

 &SQL(CLOSE SWARHZNAP1005)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(FETCH SWARHZNAP1005 INTO :PAPMINo,:PAPMINoBarcode,:PAPMIName,:PAPMIName2,:PAPMIName3)
 if SQLCODE '= 0 set END = 1
 q
]]></Implementation>
</Method>

<Method name="SWARHZNAP1005Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row 
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle 
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHZNAP1005">
<Type>%Library.Query</Type>
<FormalSpec>PatientID:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAPMINo:%String,PAPMINoBarcode:%String,PAPMIName:%String,PAPMIName2:%String,PAPMIName3:%String"/>
</Query>
</Class>
</Export>
