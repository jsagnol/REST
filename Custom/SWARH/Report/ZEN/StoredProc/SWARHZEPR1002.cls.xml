<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Report.ZEN.StoredProc.SWARHZEPR1002">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARHZEPR1002
* Report Description: Clinical Notes report returns both HTML and txt notes for the selected parameters.
* Menu Caption: Clinical Notes (New)
* Initial release: 22/09/2016 Developer: Michael Welsh
* Modified:  
**************************************************************************************************************************************
</pre>]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.ZEN.StoredProc.Abstract</Super>
<TimeCreated>62970,48071.923811</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Report/ZEN/StoredProc/SWARHZEPR1002.xml#1 $</Default>
</Parameter>

<Method name="SWARHZEPR1002Execute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,HospitalID:%Integer,PatientUR:%String,DateFrom:%Date,DateTo:%Date,EpisodeID:%Integer,NoteNurseID:%Integer,NoteTypeID:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$INCREMENT(^CacheTemp(..#CACHETEMPSUBSCRIPT))
 
 New PAADMRowId,URNo,EpisodeNo,Surname,GivenName,OtherGivenName,DOB,AdmDate,AdmTime,Hospital,NoteRowID,NoteDate,NoteTime,NoteNurse,NoteCPDesc
 	,UserName,NoteStatus,NoteStatusCode,NoteStatusDesc,NoteType,NoteTypeCode,NoteTypeDesc,NoteCorrection,NoteCorrCode,NoteCorrDesc,NoteHTMLPT
 	,nnNotes,NoteHTMLRT,idTMPOEAnnot,AnnotData,ServerNme,NameSpce
 	
 Set (PAADMRowId,URNo,EpisodeNo,Surname,GivenName,OtherGivenName,DOB,AdmDate,AdmTime,Hospital,NoteRowID,NoteDate,NoteTime,NoteNurse,NoteCPDesc
 	,UserName,NoteStatus,NoteStatusCode,NoteStatusDesc,NoteType,NoteTypeCode,NoteTypeDesc,NoteCorrection,NoteCorrCode,NoteCorrDesc,NoteHTMLPT
 	,nnNotes,NoteHTMLRT,idTMPOEAnnot,AnnotData,ServerNme,NameSpce)=""
 
 If DateFrom Set DateFrom=..ConvertDateToCache(DateFrom)
 If DateTo Set DateTo=..ConvertDateToCache(DateTo)
 
 Set ind=1, END=0
 
 &SQL(DECLARE SWARHZEPR1002 CURSOR FOR
 	SELECT
 		adm.PAADM_RowId AS PAADMRowId
        ,adm.PAADM_PAPMI_DR->PAPMI_No AS URNo
        ,adm.PAADM_AdmNo AS EpisodeNo
        ,adm.PAADM_PAPMI_DR->PAPMI_Name AS Surname
        ,adm.PAADM_PAPMI_DR->PAPMI_Name2 AS GivenName
        ,adm.PAADM_PAPMI_DR->PAPMI_Name3 AS OtherGivenName
        ,adm.PAADM_PAPMI_DR->PAPMI_DOB AS DOB
        ,adm.PAADM_AdmDate AS AdmDate
        ,adm.PAADM_AdmTime AS AdmTime
        ,adm.PAADM_Hospital_DR->HOSP_Desc AS Hospital        
        ,nn.NOT_RowId AS NoteRowID
        ,nn.NOT_Date AS NoteDate
        ,nn.NOT_Time AS NoteTime
        ,nn.NOT_NurseID_DR->CTPCP_Desc AS NoteNurse
        ,nn.NOT_NurseID_DR->CTPCP_CarPrvTp_DR->CTCPT_Desc AS NoteCPDesc
        ,nn.NOT_User_DR->SSUSR_Name AS UserName
        ,nn.NOT_Status_DR AS NoteStatus
        ,nn.NOT_Status_DR->NNS_Code AS NoteStatusCode
        ,nn.NOT_Status_DR->NNS_Desc AS NoteStatusDesc
        ,nn.NOT_ClinNotesType_DR AS NoteType
        ,nn.NOT_ClinNotesType_DR->CNT_Code AS NoteTypeCode
        ,nn.NOT_ClinNotesType_DR->CNT_Desc AS NoteTypeDesc
        ,nn.NOT_ReasonForCorrection_DR AS NoteCorrection
        ,nn.NOT_ReasonForCorrection_DR->ENTERR_Code AS NoteCorrCode
        ,nn.NOT_ReasonForCorrection_DR->ENTERR_Desc AS NoteCorrDesc
        ,nn.NOT_NotesHTMLRichText AS NoteHTMLRT
        ,nn.NOT_NotesHTMLPlainText AS NoteHTMLPT
        ,%external(nn.NOT_Notes) AS nnNotes      
 	FROM
 		SQLUser.PA_Adm adm
 			 JOIN SQLUser.MR_NursingNotes nn ON (nn.NOT_ParRef = adm.PAADM_MainMRADM_DR)
  	WHERE
 		(adm.PAADM_Hospital_DR = :HospitalID)
 	AND
        (adm.PAADM_AdmDate >= :DateFrom OR (:DateFrom IS NULL))
    AND
        (adm.PAADM_AdmDate <= :DateTo OR (:DateTo IS NULL))
	AND
        (adm.PAADM_PAPMI_DR->PAPMI_No = :PatientUR)
    AND
    	(adm.PAADM_RowID = :EpisodeID  OR (:EpisodeID IS NULL))
    AND
    	(nn.NOT_NurseID_DR = :NoteNurseID OR (:NoteNurseID IS NULL))
    AND
    	(nn.NOT_ClinNotesType_DR->CNT_Code = :NoteTypeID OR (:NoteTypeID IS NULL))
    
    ORDER BY
    	nn.NOT_Date Desc, nn.NOT_Time Desc    
 	)
 	
 &SQL(OPEN SWARHZEPR1002)

 //fetch first row
 Do FetchRow
 Set ServerNme = $Get(%request.CgiEnvs("SERVER_NAME"))
 Set NameSpce = $PIECE($namespace,"-")
 While END=0 {
	 
	 Set HTMLNotes=..GetNursingNoteHTMLSource(NoteRowID)
	 Set ANNOTRowId=+$p(HTMLNotes,"annotid='",2)
	 Set (AnnotData,idTMPOEAnnot)=""
	 
	 If ANNOTRowId'=0 {
		 If ANNOTRowId '= "" {
			 Set idTMPOEAnnot=##Class(websys.UI.Annotate.Utils).UIAnnotToReportTMPStream(ANNOTRowId)
		 }
		 If idTMPOEAnnot '="" Set AnnotData=..GetAnnotation(idTMPOEAnnot)
	 }
	 
	 Do FormatDates, FormatTimes, FormatStrings
	 
	 Set sort = ind
	 
	 // build the row
	 Set ^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,sort)=$LISTBUILD(PAADMRowId,URNo,EpisodeNo,Surname,GivenName,OtherGivenName,DOB,AdmDate,AdmTime
	 	,Hospital,NoteRowID,NoteDate,NoteTime,NoteNurse,NoteCPDesc,UserName,NoteStatus,NoteStatusCode,NoteStatusDesc,NoteType,NoteTypeCode
	 	,NoteTypeDesc,NoteCorrection,NoteCorrCode,NoteCorrDesc,NoteHTMLRT,NoteHTMLPT,nnNotes,HTMLNotes,idTMPOEAnnot,AnnotData,ServerNme,NameSpce)
 		
 	 Set ind=ind+1
 	 	 
 	 //fetch rows
 	 Do FetchRow
 	 
 }
 
 &SQL(Close SWARHZEPR1002)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$listbuild(0,repid,0)

 Quit $$$OK
 
FetchRow
 &sql(FETCH SWARHZEPR1002 into :PAADMRowId,:URNo,:EpisodeNo,:Surname,:GivenName,:OtherGivenName,:DOB,:AdmDate,:AdmTime,:Hospital,:NoteRowID
 	,:NoteDate,:NoteTime,:NoteNurse,:NoteCPDesc,:UserName,:NoteStatus,:NoteStatusCode,:NoteStatusDesc,:NoteType,:NoteTypeCode,:NoteTypeDesc
 	,:NoteCorrection,:NoteCorrCode,:NoteCorrDesc,:NoteHTMLRT,:NoteHTMLPT,:nnNotes)
 If SQLCODE '= 0 Set END = 1
 Quit 

FormatDates // Convert the dates to ODBC date format
 If NoteDate Set NoteDate=..ConvertDateToODBC(NoteDate)
 If AdmDate Set AdmDate=..ConvertDateToODBC(AdmDate)
 If DOB Set DOB=..ConvertDateToODBC(DOB)
 Quit
 
FormatTimes // Convert the dates to ODBC date format
 If AdmTime Set AdmTime=..ConvertTimeToHHMM(AdmTime) 
 If NoteTime Set NoteTime=..ConvertTimeToHHMM(NoteTime)
 Quit
 
FormatStrings
 Set nnNotes=$ZSTRIP(nnNotes,"*",$CHAR(34)) //Removes 34-Quotes
 Quit
]]></Implementation>
</Method>

<Method name="SWARHZEPR1002Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$LIST(QHandle,1)
 Set repid=$LIST(QHandle,2)
 Set ind=$LIST(QHandle,3)

 Set ind=$ORDER(^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp(..#CACHETEMPSUBSCRIPT,repid,ind)
 }

 // Save QHandle
 Set QHandle=$LISTBUILD(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHZEPR1002Close">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
  // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$LIST(QHandle,2)

 Kill ^CacheTemp(..#CACHETEMPSUBSCRIPT,repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHZEPR1002">
<Type>%Library.Query</Type>
<FormalSpec>HospitalID:%Integer,PatientUR:%String,DateFrom:%Date,DateTo:%Date,EpisodeID:%Integer,NoteNurse:%Integer,NoteType:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAADMRowId:%Integer,URNo:%String,EpisodeNo:%String,Surname:%String,GivenName:%String,OtherGivenName:%String,DOB:%Date,AdmDate:%Date,AdmTime:%String,Hospital:%String,NoteRowID:%String,NoteDate:%Date,NoteTime:%String,NoteNurse:%String,NoteCPDesc:%String,UserName:%String,NoteStatus:%String,NoteStatusCode:%String,NoteStatusDesc:%String,NoteType:%String,NoteTypeCode:%String,NoteTypeDesc:%String,NoteCorrection:%String,NoteCorrCode:%String,NoteCorrDesc:%String,NoteHTMLRT:%Integer,NoteHTMLPT:%String,nnNotes:%String(MAXLEN=30000),HTMLNotes:%String(MAXLEN=30000),idTMPOEAnnot:%String,AnnotData:%String(MAXLEN=4096),ServerNme:%String,NameSpce:%String"/>
</Query>

<Method name="GetNursingNoteHTMLSource">
<ClassMethod>1</ClassMethod>
<FormalSpec>nursingNoteId:%Library.String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if (nursingNoteId="") quit ""
	s ^zoak=nursingNoteId
	// Load the nursing note object
	set obj = ##Class(User.MRNursingNotes).%OpenId(nursingNoteId)
	quit:'obj ""
	quit:'obj.NOTNotesHTMLRichText ""
	
	// Get the rich text
	set docmentId = obj.NOTNotesHTMLRichText.%Id()
	set document = ##Class(websys.Document).%OpenId(docmentId)
	quit:'document ""
	
	// Get the id of the document stream
	set documentStreamId = ##Class(websys.HTMLRichText).ParseDoc(docmentId,"","","","","","displaystream","")
	quit:'documentStreamId ""
	
	// Get the document stream and its text
	set documentStream = ##Class(websys.TMPStream).%OpenId(documentStreamId)
	set streamText = documentStream.Text
	
	// Store the contents of the stream, line by line
	set readLineStatus = $$$OK
	set output = ""
	while 'streamText.AtEnd	{
		// Read a line, skip lines we fail
		set streamLine = streamText.ReadLine(,.readLineStatus,.eol)
		if '($$$ISOK(readLineStatus)) continue
		
		set output = output_streamLine
	}
	//set output = output_"</div>"
	
	//Remove " from <IMG> tag
	set img=output
	
	set ii=$length(img,"<IMG")
	if ii>1 {
		set output=""
		s img0=$piece(img,"<IMG",1)
		for jj=2:1:ii {
			s img1=$piece(img,"<IMG",jj)
			s tag0=$piece(img1,"/>",1)
			s tag1=$piece(img1,"/>",2,$length(tag0))
			s tag0="<IMG "_$tr(tag0,"""")_" />"_tag1
			s output=$s(output="":img0,1:output)_tag0
		}
	}
	quit output
]]></Implementation>
</Method>

<Method name="GetAnnotation">
<ClassMethod>1</ClassMethod>
<FormalSpec>AnnoId:%Integer</FormalSpec>
<ReturnType>%Stream</ReturnType>
<Implementation><![CDATA[
	New ANTMPdata
	Set ANTMPdata=""
	
	&sql(select text 
	into :ANTMPdata 
	from websys.TMPStream where ID=:AnnoId)
	quit ANTMPdata
]]></Implementation>
</Method>
</Class>
</Export>
