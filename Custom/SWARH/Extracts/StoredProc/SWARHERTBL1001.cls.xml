<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Extracts.StoredProc.SWARHERTBL1001">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARHERTBL1001
* Report Description: ED Data - Roundtable
* Menu Caption: ED Data
* Initial release: 27/08/2013
* Developer: David Cottrill
* Report shows: Extract of Data For Health Roundtable
* Modified: 31/03/2016 - rpgladman - Added stripping of suffix ICD code letters for PresentingDiagnosisICD (S10.55B -> S10.55)
**************************************************************************************************************************************
</pre>
Class for SWARHERTBL1001 Report]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Custom.SWARH.Report.RptSvc.StoredProc.Abstract</Super>
<TimeCreated>60471,58724.96519</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Extracts/StoredProc/SWARHERTBL1001.xml#1 $</Default>
</Parameter>

<Method name="SWARHERTBL1001Close">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid,ind
 Set repid=$li(QHandle,2)

 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHERTBL1001Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer,DateFrom:%Date,DateTo:%Date]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

  // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 New PAADMRowId,HospitalIdentifier,UnitRecordNumber,InPatNo,EDUniqueEventIdentfier,AreaOfResidence,Compensable
 	,EmergencyDepartmentArrivalMode,DateOfPresentation,TimeOfPresentation,DateOfTriage,TimeOfTriage,DateOfServiceCommencement
 	,TimeOfServiceCommencement,ServiceCommencedBy,TriageCategory,PresentingDiagnosisICD,ICDVersion,TypeOfService
 	,ReferralStatusOnArrival,AdmissionStatus,DecisiontoAdmitDate,DecisiontoAdmitTime,ReadyforDepartureDate
 	,ReadyforDepartureTime,EDDepartureStatus,EDDepartureDestination,EDDepartureDestinationDescription,EDDepartureDate
 	,EDDepartureTime,BirthDate,Gender,IndigenousStatus,UDG,URG,MRADMRowId
 
 Set (HospitalIdentifier,UnitRecordNumber,EDUniqueEventIdentfier,AreaOfResidence,DateOfPresentation
 	,TimeOfPresentation,DateOfTriage,TimeOfTriage,DateOfServiceCommencement,TimeOfServiceCommencement,PresentingDiagnosisICD
 	,AdmissionStatus,DecisiontoAdmitDate,DecisiontoAdmitTime,ReadyforDepartureDate,ReadyforDepartureTime,EDDepartureDestination
 	,EDDepartureDestinationDescription,EDDepartureDate,EDDepartureTime,BirthDate,Gender,IndigenousStatus,UDG,URG) = ""
 
 Set (PAADMRowId,InPatNo,Compensable,EmergencyDepartmentArrivalMode,ServiceCommencedBy,TriageCategory,ICDVersion,TypeOfService
 	,ReferralStatusOnArrival,EDDepartureStatus,MRADMRowId) = 0
 
 s ind=1, END=0

 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
 //Convert ODBC dates to cache format
 s DateFrom=..ConvertDateToCache(DateFrom)
 s DateTo=..ConvertDateToCache(DateTo)
 
 &SQL(DECLARE EDDataCursor CURSOR FOR 
	 SELECT
	 	PAADM_RowId,
	 	PAADM_Hospital_DR AS HospitalIdentifier,
	 	PAADM_PAPMI_DR->PAPMI_No AS UnitRecordNumber,
	 	PAADM_InPatNo AS InPatNo,
	 	PAADM_ADMNo AS EDUniqueEventIdentfier,
	 	PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_Zip_DR->CTZIP_Region_DR->CTRG_Code AS AreaOfResidence,
	 	'9' AS Compensable,
	 	CASE PAADM_MainMRADM_DR->MRADM_TransferMeans_DR->TRANSM_Desc 
				WHEN 'Road Ambulance Service' THEN '1'
				WHEN 'Helicopter' THEN '1'
				WHEN 'Air Ambulance' THEN '1'
				WHEN 'Ambulance Service - Private Car - Hospital contracted' THEN '1'
				WHEN 'Ambulance Service - Private Car - MAS/RAV contracted' THEN '1'
				WHEN 'Police vehicle' THEN '2'
				WHEN 'Other - incl Private Car' THEN '8'
				WHEN 'Community / public transport / voluntary drivers' THEN '8'
				ELSE '9'
		END AS EmergencyDepartmentArrivalMode,
		CONVERT(varchar,PAADM_AdmDate,103) AS DateOfPresentation,
		CONVERT(varchar(5),PAADM_AdmTime,108) AS TimeOfPresentation,
		CONVERT(varchar,PAADM_TriageDate,103) AS DateOfTriage,
		CONVERT(varchar(5),PAADM_TriageTime,108) AS TimeOfTriage,
		CONVERT(varchar,PAADM_SeenDate,103) AS DateOfServiceCommencement,
		CONVERT(varchar(5),PAADM_SeenTime,108) AS TimeOfServiceCommencement,
		'9' AS ServiceCommencedBy,
		PAADM_Priority_DR AS TriageCategory,
		'8' AS ICDVersion,
		PAADM_MainMRADM_DR->MRADM_VisitType_DR AS TypeOfService,
		CASE PAADM_RefClinic_DR->CTRFC_Code
			WHEN '1' THEN '1'
			WHEN '2' THEN '2'
			WHEN '4' THEN '2'
			WHEN '6' THEN '4'
			ELSE '5' END AS ReferralStatusOnArrival,
		CASE PAADM_MainMRADM_DR->MRADM_DischClassif_DR->DSCL_Code
			WHEN '18' THEN 'A'
			ELSE 'N' END AS AdmissionStatus,
		CONVERT(varchar,PAADM_InpatBedReqDate,103) AS DecisiontoAdmitDate,
		CONVERT(varchar(5),PAADM_InpatBedReqTime,108) AS DecisiontoAdmitTime,
		CASE PAADM_MainMRADM_DR->MRADM_DischClassif_DR->DSCL_Code
			WHEN '18' THEN CONVERT(varchar,PAADM_DischgDate,103)
			ELSE '' END AS ReadyforDepartureDate,
		CASE PAADM_MainMRADM_DR->MRADM_DischClassif_DR->DSCL_Code
			WHEN '18' THEN $LISTTOSTRING(PAADM_Remark)
			ELSE '' END AS ReadyforDepartureTime,
		CASE PAADM_MainMRADM_DR->MRADM_DischClassif_DR->DSCL_Desc
			WHEN 'Admitted to ward not elsewhere described ' THEN '1'
			WHEN 'Discharge to Home' THEN '2'
			WHEN 'Another hospital campus (excludes for Mental Health and ICU or CCU transfer)' THEN '3'
			WHEN 'Another hospital Campus - Coronary Care Unit' THEN '3'
			WHEN 'Another hospital Campus - Intensive Care Unit' THEN '3'
			WHEN 'Left at Own Risk (without treatment)' THEN '4'
			WHEN 'Left at Own Risk (after treatment started)' THEN '5'
			WHEN 'Died within ED' THEN '6'
			WHEN 'Dead on Arrival' THEN '7'
			WHEN '' THEN '9'
			ELSE 8 END AS EDDepartureStatus,
		CASE PAADM_MainMRADM_DR->MRADM_DischClassif_DR->DSCL_Code
			WHEN '18' THEN '8'
			ELSE '9' END As EDDepartureDestination,
		PAADM_MainMRADM_DR->MRADM_DischClassif_DR->DSCL_Desc AS EDDepartureDestinationDescription,
		CONVERT(varchar,PAADM_DischgDate,103) AS EDDepartureDate,
		CONVERT(varchar(5),PAADM_DischgTime,108) AS EDDepartureTime,
		CONVERT(varchar,PAADM_PAPMI_DR->PAPMI_DOB,103) AS BirthDate,
		PAADM_PAPMI_DR->PAPMI_Sex_DR->CTSEX_Code AS Gender,
		CASE PAADM_PAPMI_DR->PAPMI_IndigStat_DR->INDST_Code
			WHEN '5' THEN '1'
			WHEN '6' THEN '2'
			WHEN '7' THEN '3'
			WHEN '2' THEN '4'
			ELSE '5' END AS IndigenousStatus,
		'99' AS UDG,
		'99' AS URG,
		PAADM_MainMRADM_DR->MRADM_RowId

	 FROM SqlUser.PA_Adm 
	
     WHERE 
     	PAADM_Hospital_DR = :Hospital
     AND
     	PAADM_DischgDate BETWEEN :DateFrom AND :DateTo  
     AND
     	PAADM_VisitStatus <> 'C' 
     AND
     	PAADM_Type = 'E'
     	
	 ORDER BY PAADM_ADMNo
	 )
 &SQL(OPEN EDDataCursor)
 
 //FETCH FIRST ROW
 d FetchRow
  
 while END=0 {
 	 
	 d GetIPEpisodeNo
	 
	 s PresentingDiagnosisICD = ..GetICD10CodeList(MRADMRowId)
	 s PresentingDiagnosisICD = $P(PresentingDiagnosisICD,",")
	 s PresentingDiagnosisICD = $ZSTRIP(PresentingDiagnosisICD,">A") // Strips suffix letters - rpgladman - 2016-03-31
	  	
	 s sort = ind		// don't sort - uncomment this line if you've sorted in the query
	 
	 s ^CacheTemp("TRAK",repid,sort)=$LB(PAADMRowId,HospitalIdentifier,UnitRecordNumber,EpisodeNumber,EDUniqueEventIdentfier
	 	,AreaOfResidence,Compensable,EmergencyDepartmentArrivalMode,DateOfPresentation,TimeOfPresentation,DateOfTriage
	 	,TimeOfTriage,DateOfServiceCommencement,TimeOfServiceCommencement,ServiceCommencedBy,TriageCategory
	 	,PresentingDiagnosisICD,ICDVersion,TypeOfService,ReferralStatusOnArrival,AdmissionStatus,DecisiontoAdmitDate
	 	,DecisiontoAdmitTime,ReadyforDepartureDate,ReadyforDepartureTime,EDDepartureStatus,EDDepartureDestination
	 	,EDDepartureDestinationDescription,EDDepartureDate,EDDepartureTime,BirthDate,Gender,IndigenousStatus,UDG,URG)
 
	 s ind=ind+1
 
	 //fetch rows
	 
	 d FetchRow
 }

 &SQL(CLOSE EDDataCursor)
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FetchRow
 &sql(FETCH EDDataCursor INTO :PAADMRowId,:HospitalIdentifier,:UnitRecordNumber,:InPatNo,:EDUniqueEventIdentfier
 	,:AreaOfResidence,:Compensable,:EmergencyDepartmentArrivalMode,:DateOfPresentation,:TimeOfPresentation,:DateOfTriage
 	,:TimeOfTriage,:DateOfServiceCommencement,:TimeOfServiceCommencement,:ServiceCommencedBy,:TriageCategory
 	,:ICDVersion,:TypeOfService,:ReferralStatusOnArrival,:AdmissionStatus,:DecisiontoAdmitDate
 	,:DecisiontoAdmitTime,:ReadyforDepartureDate,:ReadyforDepartureTime,:EDDepartureStatus,:EDDepartureDestination
 	,:EDDepartureDestinationDescription,:EDDepartureDate,:EDDepartureTime,:BirthDate,:Gender,:IndigenousStatus,:UDG,:URG
 	,:MRADMRowId)
 
 if SQLCODE '= 0 set END = 1
 q
 
GetIPEpisodeNo
 s EpisodeNumber = ""
 If InPatNo {&sql(SELECT PAADM_ADMNo INTO :EpisodeNumber FROM SqlUser.PA_Adm WHERE PAADM_RowId = :InPatNo)}
 q
]]></Implementation>
</Method>

<Method name="SWARHERTBL1001Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
	 Set AtEnd=1
	 Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHERTBL1001">
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer,DateFrom:%Date,DateTo:%Date</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAADMRowId:%Integer,HospitalIdentifier:%String,UnitRecordNumber:%String,EpisodeNumber:%String,EDUniqueEventIdentfier:%String,AreaOfResidence:%String,Compensable:%Integer,EmergencyDepartmentArrivalMode:%Integer,DateOfPresentation:%String,TimeOfPresentation:%String,DateOfTriage:%String,TimeOfTriage:%String,DateOfServiceCommencement:%String,TimeOfServiceCommencement:%String,ServiceCommencedBy:%Integer,TriageCategory:%Integer,PresentingDiagnosisICD:%String,ICDVersion:%Integer,TypeOfService:%Integer,ReferralStatusOnArrival:%Integer,AdmissionStatus:%String,DecisiontoAdmitDate:%String,DecisiontoAdmitTime:%String,ReadyforDepartureDate:%String,ReadyforDepartureTime:%String,EDDepartureStatus:%Integer,EDDepartureDestination:%String,EDDepartureDestinationDescription:%String,EDDepartureDate:%String,EDDepartureTime:%String,BirthDate:%String,Gender:%String,IndigenousStatus:%String,UDG:%String,URG:%String"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
