<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARH.Extracts.SWARHEMENU1001">
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%RegisteredObject</Super>
<TimeCreated>63679,51001.060933</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARH/Extracts/SWARHEMENU1001.xml#1 $</Default>
</Parameter>

<Method name="GroupMenuAccess">
<ClassMethod>1</ClassMethod>
<FormalSpec>GroupID:%Integer</FormalSpec>
<Implementation><![CDATA[
	; Sets the process to LOW and BATCH
	; BATCH uses only 25% of the global buffers
	d SET^%PRIO("LOW,BATCH")
	n GroupDesc,linedata, GroupSettingsId
	s (GroupDesc,linedata, GroupSettingsId)=""
	s repid=$i(^CacheTemp("EXTRACT"))
	s ind=0
	s paths=..GetFilePath("Security")
	i $p(paths,"^",3)'="" w !,$p(paths,"^",3)
	i $g(GroupID)="" w !,"No Security Group ID Parameter."

	i $p(paths,"^",3)="" {
	 	i $g(GroupID)'="" {
		 	s GroupDesc=$p(^SSU("SSGRP",GroupID),"^",1)
		 	s datestr=$replace($zdate($horolog,4),"/","")
		 	s filename=$s($p(paths,"^")'="":$p(paths,"^"),1:$p(paths,"^",2))_GroupDesc_" "_datestr_".csv"
			s file=##class(%File).%New(filename)
			d file.Open("WSN")

			&sql(SELECT ID INTO :GroupSettingsId FROM epr.GroupSettings WHERE GROUPDR=:GroupID)
			
			s GroupSettings=##Class(epr.GroupSettings).%OpenId(GroupSettingsId)
			s MenuList=GroupSettings.MenuListGet()
			for i = 1:1:MenuList.Count() {
				s linedata=""
				if (i=1) d file.WriteLine("ID,Type,Name,Caption,HasParents,ParentID,ParentName,HasSubmenus,Sequence,Comment")
				s ParentMenu=MenuList.GetAt(i).SubMenuOf
				s k=""
				s (MenuID,HasParents,HasSubmenus,ParentID,ParentName,SubmenusList)=""
				For {
					s k = $O(^websys.MenuD(k))
					q:(k="")
					s Name = $LISTGET(^websys.MenuD(k),4)
					if (Name=MenuList.GetAt(i).Name) s MenuID=k
				}
				s MenuType=##class(websys.Menu).GetMenuType(MenuID)
				s HasParents=##class(websys.Menu).HasParentMenus(MenuID)
				s HasSubmenus=##class(websys.Menu).HasSubMenus(MenuID)
				if (HasParents) {
					set rs=##Class(%ResultSet).%New("websys.Menu:FindParentMenus")
					do rs.Execute(MenuID)
					if rs.Next() {
						set ParentName=$get(rs.Data("Name"))
						set ParentID=$get(rs.Data("ID"))
					}
					do rs.%Close()
				}
				
				set ^CacheTemp("EXTRACT", repid, "BYID", MenuID) = $lb(MenuID, MenuType, MenuList.GetAt(i).Name, MenuList.GetAt(i).Caption, HasParents, ParentID, ParentName, HasSubmenus, MenuList.GetAt(i).Sequence,"")
			}
			
			set i = ""
			for  {
				set i = $order(^CacheTemp("EXTRACT", repid, "BYID", i))
				quit:i=""
				
				// Lookup sort fields
				set menu = ^CacheTemp("EXTRACT", repid, "BYID", i)
				
				set type = $lg(menu, 2)
				set seq = $lg(menu, 9)
				if (seq '= "") {
					// Pad sequence numbers out to 8 digits to sort
					// TODO: this limits sequence numbers and IDs to 8 digits, which is not ideal.
					set seq = $$PadNumber(seq)
				} else {
					set seq = "A" // Make null sequence sort after non-null sequences
				}
				set parentid = $lg(menu, 6)
				
				set sort = seq _ " " _ $$PadNumber(i) _ " "
				
				while (parentid '= "") {
					//quit:'$data(^CacheTemp("EXTRACT", repid, "BYID", parentid))
					if ('$data(^CacheTemp("EXTRACT", repid, "BYID", parentid))) {
						s $li(menu,10)="Parent Menu not turned on"
						quit
					}
					set parentmenu = ^CacheTemp("EXTRACT", repid, "BYID", parentid)
					set parentseq = $lg(parentmenu, 9)
					if (parentseq '= "") {
						set parentseq = $$PadNumber(parentseq)
					} else {
						set parentseq = "A" // Make null sequence sort after non-null sequences
					}
					
					set sort = parentseq _ " " _ $$PadNumber(parentid) _ sort
					
					set parentid = $lg(parentmenu, 6) // Repeat for parent's parent
				}
				//continue:parentid'=""	// Exclude children for which there isn't permission granted to the parent
				
				set typesort = $case(type,"SideMenu":1,"HeaderMenu":2,"Component":3,:4)
				set sort = typesort _ sort
				
				set ^CacheTemp("EXTRACT", repid, "SORTED", sort) = menu
			}
			
			set i = ""
			for  {
				set i = $order(^CacheTemp("EXTRACT", repid, "SORTED", i))
				quit:i=""

				set linedata = $LISTTOSTRING(^CacheTemp("EXTRACT", repid, "SORTED", i), ",")
				d file.WriteLine(linedata)
				
			}			
			d file.Close()
	 	}
	}
	k ^CacheTemp("EXTRACT", repid)
	q
PadNumber(number)
	q $extract("00000000",1,8-$length(number))_number
]]></Implementation>
</Method>

<Method name="GetFilePath">
<ClassMethod>1</ClassMethod>
<FormalSpec>filetype:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s (unixpath,winpath,errormsg)=""
	&SQL(SELECT PATH_Path,PATH_UNIXPath INTO :winpath,:unixpath FROM SQLUser.CF_SystemFilePath WHERE %ALPHAUP(PATH_ParRef->FILE_Desc)=%ALPHAUP(:filetype))
	i $e(unixpath,$l(unixpath))'="/",$g(unixpath)'="" s unixpath=unixpath_"/"
	i $e(winpath,$l(winpath))'="\",$g(winpath)'="" s winpath=winpath_"\"
	i unixpath="",winpath="" s errormsg="No filepath defined for "_filetype_" extract."
	
	q unixpath_"^"_winpath_"^"_errormsg
]]></Implementation>
</Method>
</Class>
</Export>
