<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.BHUtilities">
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%RegisteredObject</Super>
<TimeCreated>60200,47250.204012</TimeCreated>

<Method name="GetAdmissionUnit">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>PAADMRowId:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	New repid
 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)

	New AdmissionUnit,AdmissionUnitCode,ADMUNITID
	Set (AdmissionUnit,AdmissionUnitCode)=""
	set (ADMUNITID)=0
	
	&sql(SELECT
	TRANS_CTLOC_DR->CTLOC_Desc,
	TRANS_CTLOC_DR->CTLOC_Code,
	TRANS_CTLOC_DR
	INTO :AdmissionUnit,:AdmissionUnitCode,:ADMUNITID
	FROM SQLUser.PA_AdmTransaction
	WHERE	TRANS_ParRef=:PAADMRowId and trans_transtype_dr=3 AND trans_status_dr<>2
	GROUP BY TRANS_ParRef
	HAVING MIN(TRANS_ChildSub) = TRANS_ChildSub)
	s ^CacheTemp(repid)=$LB(AdmissionUnit,AdmissionUnitCode,ADMUNITID)

	quit repid
]]></Implementation>
</Method>

<Method name="GetAdmissionWard">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>PAADMRowId:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	New repid
 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)

	New AdmissionWard,ADMWARDLocationDR,ADMHOSPDesc,ADMHOSPRowId
	Set (AdmissionWard,ADMHOSPDesc)=""
	set (ADMWARDLocationDR,ADMHOSPRowId)=0
	
	&sql(SELECT
	TRANS_WARD_DR->WARD_Code,
	TRANS_WARD_DR->WARD_LocationDR,
	TRANS_WARD_DR->WARD_LocationDR->CTLOC_Hospital_DR->HOSP_Desc,
 TRANS_WARD_DR->WARD_LocationDR->CTLOC_Hospital_DR
	INTO :AdmissionWard, :ADMWARDLocationDR,:ADMHOSPDesc,:ADMHOSPRowId
	FROM SQLUser.PA_AdmTransaction
	WHERE	TRANS_ParRef=:PAADMRowId and trans_transtype_dr=2 AND trans_status_dr<>2
	GROUP BY TRANS_ParRef
	HAVING MIN(TRANS_ChildSub) = TRANS_ChildSub)
	s ^CacheTemp(repid)=$LB(AdmissionWard,ADMWARDLocationDR,ADMHOSPDesc,ADMHOSPRowId)

	quit repid
]]></Implementation>
</Method>

<Method name="GetCurrentPayor">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>PAADMRowId:%Integer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	New CurrentPayor
	Set CurrentPayor=""
	
	&sql(SELECT
	INS_InsType_DR->INST_Code
	INTO :CurrentPayor 
	FROM SQLUser.PA_AdmInsurance
	WHERE	INS_ParRef=:PAADMRowId
	GROUP BY INS_ParRef
	HAVING MAX(INS_ChildSub) = INS_ChildSub)
	quit CurrentPayor
]]></Implementation>
</Method>

<Method name="GetPrincipalICD">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>MRADMRowId:%Integer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	New PrincipalICD
	Set PrincipalICD=""
	
	&sql(SELECT
	MRDIA_ICDCode_DR->MRCID_Code
 INTO :PrincipalICD
 FROM SQLUser.MR_Diagnos
 WHERE   MRDIA_MRADM_ParRef=:MRADMRowId and MRDIA_ICDCode_DR->MRCID_Code IS NOT NULL
 GROUP BY MRDIA_MRADM_ParRef
 HAVING MIN(mrdia_childsub) = mrdia_childsub)
	quit PrincipalICD
]]></Implementation>
</Method>

<Method name="GetTrackingVolComment">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>RTMAVRowId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	New TrackingVolComment
	Set TrackingVolComment=""
	
	&sql(SELECT
 RTMVT_Comments
 INTO :TrackingVolComment
 FROM SQLUser.RT_MasVol,SQLUser.RT_MVTrans
 WHERE   RTMAV_RowId=RTMVT_RTMAV_ParRef and RTMAV_RowId=:RTMAVRowId and 
 RTMVT_Comments is not null
 GROUP BY RTMVT_RTMAV_ParRef
 HAVING MAX(RTMVT_ChildSub) = RTMVT_ChildSub)
 QUIT TrackingVolComment
]]></Implementation>
</Method>
</Class>
</Export>
