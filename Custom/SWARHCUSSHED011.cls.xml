<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARHCUSSHED011">
<Description>
Wait times per visit type</Description>
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>62350,62018.486894</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARHCUSSHED011.xml#1 $</Default>
</Parameter>

<Method name="SHED011Close">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SHED011Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,DateFrom:%Date,DateTo:%Date,Hospital:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
            
 k ^zbernard 
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 n PAADMRowId,PAADMAdmNo,PAADMAdmDate,PAADMAdmTime,PAADMTriageDate,PAADMTriageTime,
 PAADMDischgDate,PAADMDischgTime,VSTDesc,PAADMPriorityDR,CTACUCode,PAADMSeenDate,PAADMSeenTime,
 CTCPTInternalType,CountSeenDoc,CountSeenNurse,CountSeenOther,HOSPDesc
 s (PAADMRowId,PAADMPriorityDR,CountSeenDoc,CountSeenNurse)=0
 s (PAADMAdmNo,PAADMAdmDate,PAADMAdmTime,PAADMTriageDate,PAADMTriageTime,PAADMDischgDate,PAADMDischgTime,VSTDesc,CTACUCode,PAADMSeenDate,PAADMSeenTime,
 CTCPTInternalType, HOSPDesc)=""

 s ind=1

 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)

 //s ^bernard("2")=(2)

 &sql(declare SHED011 cursor for
 SELECT PAADM_RowId,PAADM_AdmNo,
PAADM_AdmDate,PAADM_AdmTime,PAADM_TriageDate,PAADM_TriageTime,PAADM_DischgDate,PAADM_DischgTime,
PAADM_MainMRADM_DR->MRADM_VisitType_DR->VST_Desc,
PAADM_Priority_DR,
PAADM_Priority_DR->CTACU_Code,
PAADM_SeenDate,PAADM_SeenTime,
PAADM_AdmDocCodeDR->CTPCP_CarPrvTp_DR->CTCPT_InternalType,
(select count(*) from SQLUser.PA_AdmTransaction where TRANS_ParRef=PAADM_RowId and TRANS_CTCP_DR->CTPCP_CarPrvTp_DR->CTCPT_InternalType='DOCTOR' and TRANS_Status_DR<>2) as CountSeenDoc,
(select count(*) from SQLUser.PA_AdmTransaction where TRANS_ParRef=PAADM_RowId and TRANS_CTCP_DR->CTPCP_CarPrvTp_DR->CTCPT_InternalType='NURSE' and TRANS_Status_DR<>2) as CountSeenNurse,
(select count(*) from SQLUSer.PA_AdmTransaction where TRANS_ParRef=PAADM_RowId and TRANS_CTCP_DR->CTPCP_CarPrvTp_DR->CTCPT_InternalType is null and TRANS_CTCP_DR->CTPCP_CarPrvTp_DR->CTCPT_Code is not null and TRANS_Status_DR<>2) as CountSeenOther,
HOSP_Desc
FROM SQLUser.PA_Adm
inner join SQLUser.CT_Hospital on PAADM_Hospital_DR=HOSP_RowId
WHERE PAADM_DischgDate between :DateFrom and :DateTo
AND PAADM_VisitStatus<>'C'
AND PAADM_Hospital_DR=:Hospital
AND PAADM_Type='E')
 &sql(open SHED011)
 
 // AND PAADM_SeenDate is not null
 //fetch first row
 &sql(fetch SHED011 into :PAADMRowId,:PAADMAdmNo,:PAADMAdmDate,:PAADMAdmTime,:PAADMTriageDate,:PAADMTriageTime,:PAADMDischgDate,:PAADMDischgTime,
 :VSTDesc,:PAADMPriorityDR,:CTACUCode,:PAADMSeenDate,:PAADMSeenTime,
 :CTCPTInternalType,:CountSeenDoc,:CountSeenNurse,:CountSeenOther,:HOSPDesc)

 while 'SQLCODE{
 d FormatDates
 d FormatTimes

 // build the row
 Set ^CacheTemp(repid,ind)=$LB(PAADMRowId,PAADMAdmNo,PAADMAdmDate,PAADMAdmTime,PAADMTriageDate,PAADMTriageTime,PAADMDischgDate,PAADMDischgTime,
 VSTDesc,PAADMPriorityDR,CTACUCode,PAADMSeenDate,PAADMSeenTime,
 CTCPTInternalType,CountSeenDoc,CountSeenNurse,CountSeenOther,HOSPDesc)
 s ind=ind+1
 //fetch rows
 &sql(fetch SHED011 into :PAADMRowId,:PAADMAdmNo,:PAADMAdmDate,:PAADMAdmTime,:PAADMTriageDate,:PAADMTriageTime,:PAADMDischgDate,:PAADMDischgTime,
 :VSTDesc,:PAADMPriorityDR,:CTACUCode,:PAADMSeenDate,:PAADMSeenTime,
 :CTCPTInternalType,:CountSeenDoc,:CountSeenNurse,:CountSeenOther,:HOSPDesc)
 }

 //s ^zBernard("3")=(3)
 &sql(close SHED011)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 //s ^zBernard("4")=(4)
 Quit $$$OK


FormatDates
 // Convert the dates to ODBC date format
 If PAADMAdmDate Set PAADMAdmDate=$ZD(PAADMAdmDate,3)
 If PAADMDischgDate Set PAADMDischgDate=$ZD(PAADMDischgDate,3)
 If PAADMSeenDate Set PAADMSeenDate=$ZD(PAADMSeenDate,3)
 If PAADMTriageDate Set PAADMTriageDate=$ZD(PAADMTriageDate,3)

 //s ^zBernard("5")=(5)
 Quit

FormatTimes
 // Convert the times to ODBC time format
 If PAADMAdmTime Set PAADMAdmTime=$ZT(PAADMAdmTime,2)
 If PAADMDischgTime Set PAADMDischgTime=$ZT(PAADMDischgTime,2)
 If PAADMSeenTime Set PAADMSeenTime=$ZT(PAADMSeenTime,2)
 If PAADMTriageTime Set PAADMTriageTime=$ZT(PAADMTriageTime,2)
 Quit
]]></Implementation>
</Method>

<Method name="SHED011Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {        // if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {         // fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SHED011">
<Description>
GHA List reports Stored Procedure
It expects 2 parameter of type date and will return a list of records:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time</Description>
<Type>%Library.Query</Type>
<FormalSpec>DateFrom:%Date,DateTo:%Date,Hospital:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAADMRowId:%Integer,PAADMAdmNo:%String(MAXLEN=255),PAADMAdmDate:%String(MAXLEN=255),PAADMAdmTime:%String(MAXLEN=255),PAADMTriageDate:%String(MAXLEN=255),PAADMTriageTime:%String(MAXLEN=255),PAADMDischgDate:%String(MAXLEN=255),PAADMDischgTime:%String(MAXLEN=255),VSTDesc:%String(MAXLEN=255),PAADMPriorityDR:%Integer,CTACUCode:%String(MAXLEN=255),PAADMSeenDate:%String(MAXLEN=255),PAADMSeenTime:%String(MAXLEN=255),CTCPTInternalType:%String(MAXLEN=255),CountSeenDoc:%Integer,CountSeenNurse:%Integer,CountSeenOther:%Integer,HOSPDesc:%String(MAXLEN=255)"/>
</Query>
</Class>
</Export>
