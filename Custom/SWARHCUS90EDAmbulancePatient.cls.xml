<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARHCUS90EDAmbulancePatient">
<Description>
ED Ambulance Patients</Description>
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>61776,35697.493727</TimeCreated>

<Method name="EDAmbulancePatientClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="EDAmbulancePatientExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,DateFrom:%Date,DateTo:%Date,Hospital:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 k ^zbernard	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 n PAADMRowID,OEORDRowId,PAADMADMNo,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,PAPMINo,PAPMIName,PAPMIName2,HOSPRowId,HOSPDesc,MRADMAmbulanceCase,TRANSMDesc,TRANSMRowId
 s (PAADMRowID,OEORDRowId,HOSPRowId,TRANSMRowId)=0
 s (PAADMADMNo,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,PAPMINo,PAPMIName,PAPMIName2,HOSPDesc,MRADMAmbulanceCase,TRANSMDesc)=""

  
 s ind=1

 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)

 //s ^bernard("2")=(2)
 
 &sql(declare EDAmbulancePatient cursor for
 
 SELECT DISTINCT
 	PAADM_RowID,
 	OEORD_RowId,
 	PAADM_ADMNo,
 	PAADM_AdmDate,
 	PAADM_AdmTime,
 	PAADM_DischgDate,
 	PAADM_DischgTime,
 	PA_Adm.PAADM_PAPMI_DR->PAPMI_No,
 	PA_Adm.PAADM_PAPMI_DR->PAPMI_Name,
 	PA_Adm.PAADM_PAPMI_DR->PAPMI_Name2,
 	PA_Adm.PAADM_Hospital_DR->HOSP_RowId,
 	PA_Adm.PAADM_Hospital_DR->HOSP_Desc,
 	PA_Adm.PAADM_MainMRADM_DR->MRADM_AmbulanceCase,
 	PA_Adm.PAADM_MainMRADM_DR->MRADM_TransferMeans_DR->TRANSM_Desc,
 	PA_Adm.PAADM_MainMRADM_DR->MRADM_TransferMeans_DR->TRANSM_RowId
 	
 FROM
 	SQLUser.PA_Adm, SQLUser.OE_Order
 	
 WHERE
 	PA_Adm.PAADM_RowID = OE_Order.OEORD_Adm_DR
 	AND	PA_Adm.PAADM_AdmDate between :DateFrom and :DateTo
 	AND PA_Adm.PAADM_Hospital_DR->HOSP_RowId = :Hospital
 	AND PA_Adm.PAADM_Type = 'E' 
 	AND PA_Adm.PAADM_MainMRADM_DR->MRADM_TransferMeans_DR->TRANSM_Code in ('1','3','10','11')
 		       		
)
 &sql(open EDAmbulancePatient)

  //fetch first row 
 &sql(fetch EDAmbulancePatient into :PAADMRowID,:OEORDRowId,:PAADMADMNo,:PAADMAdmDate,:PAADMAdmTime,:PAADMDischgDate,:PAADMDischgTime,:PAPMINo,:PAPMIName,:PAPMIName2,:HOSPRowId,:HOSPDesc,:MRADMAmbulanceCase,:TRANSMDesc,:TRANSMRowId
 )	

 while 'SQLCODE{
 
 d FormatDates
 d FormatTimes

 // build the row
 Set ^CacheTemp(repid,ind)=$LB(PAADMRowID,OEORDRowId,PAADMADMNo,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,PAPMINo,PAPMIName,PAPMIName2,HOSPRowId,HOSPDesc,MRADMAmbulanceCase,TRANSMDesc,TRANSMRowId)
 s ind=ind+1
 //fetch rows
 &sql(fetch EDAmbulancePatient into :PAADMRowID,:OEORDRowId,:PAADMADMNo,:PAADMAdmDate,:PAADMAdmTime,:PAADMDischgDate,:PAADMDischgTime,:PAPMINo,:PAPMIName,:PAPMIName2,:HOSPRowId,:HOSPDesc,:MRADMAmbulanceCase,:TRANSMDesc,:TRANSMRowId)
 }

 //s ^zBernard("3")=(3)
 &sql(close EDAmbulancePatient)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 //s ^zBernard("4")=(4)

 Quit $$$OK


FormatDates
 // Convert the dates to ODBC date format
 If PAADMAdmDate Set PAADMAdmDate=$ZD(PAADMAdmDate,3)
 If PAADMDischgDate Set PAADMDischgDate=$ZD(PAADMDischgDate,3)
 Quit

FormatTimes
 // Convert the times to ODBC time format
 If PAADMAdmTime Set PAADMAdmTime=$ZT(PAADMAdmTime,1)
 If PAADMDischgTime Set PAADMDischgTime=$ZT(PAADMDischgTime,1)
 Quit
]]></Implementation>
</Method>

<Method name="EDAmbulancePatientFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)

 Quit $$$OK
]]></Implementation>
</Method>

<Query name="EDAmbulancePatient">
<Description>
GHA List reports Stored Procedure
It expects 2 parameter of type date and will return a list of records:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time</Description>
<Type>%Library.Query</Type>
<FormalSpec>DateFrom:%Date,DateTo:%Date,Hospital:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAADMRowID:%Integer,OEORDRowId:%Integer,PAADMADMNo:%String(MAXLEN=255),PAADMAdmDate:%Date,PAADMAdmTime:%Time,PAADMDischgDate:%Date,PAADMDischgTime:%Time,PAPMINo:%String(MAXLEN=255),PAPMIName:%String(MAXLEN=255),PAPMIName2:%String(MAXLEN=255),HOSPRowId:%Integer,HOSPDesc:%String(MAXLEN=255),MRADMAmbulanceCase:%String(MAXLEN=255),TRANSMDesc:%String(MAXLEN=255),TRANSMRowId:%Integer"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
