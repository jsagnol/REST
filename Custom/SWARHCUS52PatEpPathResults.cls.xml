<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARHCUS52PatEpPathResults">
<Description>
Modified 04/12/2015 - PH: add PAPMIName3</Description>
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>62067,51199.999007</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARHCUS52PatEpPathResults.xml#1 $</Default>
</Parameter>

<Method name="PatEpPathResultsClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="PatEpPathResultsExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,DateFrom:%Date,DateTo:%Date,Hospital:%Integer,PatientID:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 k ^zbernard	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 n HOSPRowId,HOSPDesc,PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,PAPMIRowId,PAADMRowId,PAADMADMNo,OEORDDate,TRRowId,TRCreateDate,TRRowId,SECText,SECParRef
 s (HOSPRowId,PAPMIRowId,PAADMRowId,TRRowId)=0
 s (HOSPDesc)=""
 s (PAPMINo,PAADMADMNo,PAPMIName,PAPMIName2,PAPMIName3,OEORDDate,TRCreateDate,SECText,SECParRef)=""
 s ind=1
 
 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)
 
  //s ^bernard("2")=(2)
 
 &sql(declare PatEpPathResults cursor for
 
 SELECT  
 PAADM_Hospital_DR-> HOSP_Desc, 
 PAPMI_No, 
 PAPMI_Name, 
 PAPMI_Name2,
 PAPMI_Name3,
 PAADM_AdmNo,
 OEORD_Date, 
 TR_RowId,
 TR_DateCreated, 
 SEC_Text,
 SEC_ParRef
 
 FROM SQLUser.PA_Adm, SQLUser.OE_Order, SQLUser.OE_TextResult, SQLUser.OE_TextResultSection, SQLUser.PA_PatMas
 
 WHERE
        (PA_Adm.PAADM_Hospital_DR=:Hospital)
        AND PAADM_RowId=OEORD_Adm_DR and OEORD_RowId=*TR_OEORD_DR and TR_RowId=*SEC_ParRef and PAADM_PAPMI_DR=PAPMI_RowId
        AND PAPMI_RowId=:PatientID
        AND PA_Adm.PAADM_AdmDate between :DateFrom and :DateTo
		AND TR_RowId is not null
)
 &sql(open PatEpPathResults)

  //fetch first row 
 &sql(fetch PatEpPathResults into :HOSPDesc,:PAPMINo,:PAPMIName,:PAPMIName2,:PAPMIName3,:PAADMAdmNo,:OEORDDate,:TRRowId,:TRCreateDate,:SECText,:SECParRef
 )

 while 'SQLCODE{
 
 d FormatDates

 // build the row
 Set ^CacheTemp(repid,ind)=$LB(HOSPDesc,PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,PAADMAdmNo,OEORDDate,TRRowId,TRCreateDate,SECText,SECParRef)
 s ind=ind+1
 //fetch rows
 &sql(fetch PatEpPathResults into :HOSPDesc,:PAPMINo,:PAPMIName,:PAPMIName2,:PAPMIName3,:PAADMAdmNo,:OEORDDate,:TRRowId,:TRCreateDate,:SECText,:SECParRef)
 }

 //s ^zBernard("3")=(3)
 &sql(close PatEpPathResults)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 //s ^zBernard("4")=(4)

 Quit $$$OK


FormatDates
 // Convert the dates to ODBC date format
 If OEORDDate Set OEORDDate=$ZD(OEORDDate,4)
 If TRCreateDate Set TRCreateDate=$ZD(TRCreateDate,4)
 Quit
]]></Implementation>
</Method>

<Method name="PatEpPathResultsFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)

 Quit $$$OK
]]></Implementation>
</Method>

<Query name="PatEpPathResults">
<Description>
GHA List reports Stored Procedure
It expects 2 parameter of type date and will return a list of records:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time</Description>
<Type>%Library.Query</Type>
<FormalSpec>DateFrom:%Date,DateTo:%Date,Hospital:%Integer,PatientID:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="HOSPDesc:%String(MAXLEN=255),PAPMINo:%String(MAXLEN=255),PAPMIName:%String(MAXLEN=255),PAPMIName2:%String(MAXLEN=255),PAPMIName3:%String(MAXLEN=255),PAADMAdmNo:%String(MAXLEN=255),OEORDDate:%String(MAXLEN=255),TRRowId:%Integer,TRCreateDate:%String(MAXLEN=255),SECText:%String(MAXLEN=255), SECParRef:%String(MAXLEN=255)"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
