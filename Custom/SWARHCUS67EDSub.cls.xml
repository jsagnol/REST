<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARHCUS67EDSub">
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>61712,69017.422153</TimeCreated>

<Method name="EDSubClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="EDSubExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,PatientRowId:%Integer,AdmRowId:%Integer,MRAdmRowId:%Integer,DateFrom:%Date,DateTo:%Date]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 k ^zbernard	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 n AUDRowId,AUDDate,AUDTime,AUDTableRowId,AUDUserDR,SSUSRGivenName,SSUSRSurname,FLDFieldNo,FLDOldValue,FLDValue,OldDate,NewDate,OldTriageCat,NewTriageCat,OldDepartStat,NewDepartStat
 s (AUDRowId,AUDUserDR)=0
 s (AUDDate,AUDTime,AUDTableRowId,SSUSRGivenName,SSUSRSurname,FLDFieldNo,FLDOldValue,FLDValue,OldDate,NewDate,OldTriageCat,NewTriageCat,OldDepartStat,NewDepartStat)=""
 s ind=1

 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)

 //s ^bernard("2")=(2)
 
 &sql(declare EDSub cursor for
 
 SELECT
 AUD_RowId,AUD_Date,AUD_Time,AUD_TableRowId,AUD_User_DR,
 SSUSR_GivenName,SSUSR_Surname,
 FLD_FieldNo,FLD_OldValue,FLD_Value
 FROM SQLUSER.SS_AuditTrail,SQLUSER.SS_AuditTrailFields,SQLUSER.SS_User
 WHERE AUD_PAPMI_DR=:PatientRowId
and (AUD_TableRowId =:AdmRowId or AUD_TableRowId=:MRAdmRowId)
and AUD_Action='U'
and AUD_Date between :DateFrom and :DateTo
and FLD_ParRef=AUD_RowId
and (
FLD_FieldNo='PAADM_DischgDate' 
or FLD_FieldNo='PAADM_DischgTime'
or FLD_FieldNo='PAADM_AdmDate'
or FLD_FieldNo='PAADM_AdmTime'
or FLD_FieldNo='PAADM_TriageDate'
or FLD_FieldNo='PAADM_TriageTime'
or FLD_FieldNo='PAADM_Priority_DR'
or FLD_FieldNo='MRADM_DischClassif_DR'
or FLD_FieldNo='PAADM_SeenDate'
or FLD_FieldNo='PAADM_SeenTime'
)
and SSUSR_RowId=AUD_User_DR
)
 &sql(open EDSub)

  //fetch first row 
 &sql(fetch EDSub into :AUDRowId,:AUDDate,:AUDTime,:AUDTableRowId,:AUDUserDR,:SSUSRGivenName,:SSUSRSurname,:FLDFieldNo,:FLDOldValue,:FLDValue
 )

 while 'SQLCODE{
 
 d FormatDates
 d FormatTimes
 d GetTriageCat
 d GetDepartStat

 // build the row
 Set ^CacheTemp(repid,ind)=$LB(AUDRowId,AUDDate,AUDTime,AUDTableRowId,AUDUserDR,SSUSRGivenName,SSUSRSurname,FLDFieldNo,FLDOldValue,FLDValue,OldDate,NewDate,OldTime,NewTime,OldTriageCat,NewTriageCat,OldDepartStat,NewDepartStat)
 s ind=ind+1
 //fetch rows
 &sql(fetch EDSub into :AUDRowId,:AUDDate,:AUDTime,:AUDTableRowId,:AUDUserDR,:SSUSRGivenName,:SSUSRSurname,:FLDFieldNo,:FLDOldValue,:FLDValue)
 }

 //s ^zBernard("3")=(3)
 &sql(close EDSub)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 //s ^zBernard("4")=(4)

 Quit $$$OK


FormatDates
 // Convert the dates to ODBC date format
 If AUDDate set AUDDate=$ZD(AUDDate,4)
 If (FLDFieldNo="PAADM_DischgDate" || FLDFieldNo="PAADM_AdmDate" || FLDFieldNo="PAADM_TriageDate") && FLDOldValue
 	set OldDate = $ZD(FLDOldValue,4)
 If (FLDFieldNo="PAADM_DischgDate"  || FLDFieldNo="PAADM_AdmDate" || FLDFieldNo="PAADM_TriageDate") && FLDValue
 	set NewDate = $ZD(FLDValue,4)
 Quit
 
FormatTimes
 // Convert the times to ODBC time format
 If AUDTime set AUDTime=$ZTIME(AUDTime,3)
 If (FLDFieldNo="PAADM_DischgTime" || FLDFieldNo="PAADM_AdmTime" || FLDFieldNo="PAADM_TriageTime") && FLDOldValue
 	set OldTime = $ZTIME(FLDOldValue,3)
 If (FLDFieldNo="PAADM_DischgTime" || FLDFieldNo="PAADM_AdmTime" || FLDFieldNo="PAADM_TriageTime") && FLDValue
 	set NewTime = $ZTIME(FLDValue,3)
 Quit
 
GetTriageCat
 If (FLDFieldNo="PAADM_Priority_DR" && FLDOldValue)
  	&sql(select CTACU_Desc into :OldTriageCat from sqluser.CT_Acuity
  where CTACU_RowId=:FLDOldValue)
 If (FLDFieldNo="PAADM_Priority_DR" && FLDValue)
   &sql(select CTACU_Desc into :NewTriageCat from sqluser.CT_Acuity
  where CTACU_RowId=:FLDValue)
 Quit
 
GetDepartStat
 If (FLDFieldNo="MRADM_DischClassif_DR" && FLDOldValue)
  	&sql(select DSCL_Desc into :OldDepartStat from sqluser.PAC_DischClassification
  where DSCL_RowId=:FLDOldValue)
  If (FLDFieldNo="MRADM_DischClassif_DR" && FLDValue)
  	&sql(select DSCL_Desc into :NewDepartStat from sqluser.PAC_DischClassification
  where DSCL_RowId=:FLDValue)
]]></Implementation>
</Method>

<Method name="EDSubFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)

 Quit $$$OK
]]></Implementation>
</Method>

<Query name="EDSub">
<Description>
GHA List reports Stored Procedure
It expects 2 parameter of type date and will return a list of records:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time</Description>
<Type>%Library.Query</Type>
<FormalSpec>PatientRowId:%Integer,AdmRowId:%Integer,MRAdmRowId:%Integer,DateFrom:%Date,DateTo:%Date</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="AUDRowId:%Integer,AUDDate:%String(MAXLEN=255),AUDTime:%String(MAXLEN=255),AUDTableRowId:%String(MAXLEN=255),AUDUserDR:%Integer,SSUSRGivenName:%String(MAXLEN=255),SSUSRSurname:%String(MAXLEN=255),FLDFieldNo:%String(MAXLEN=255),FLDOldValue:%String(MAXLEN=255),FLDValue:%String(MAXLEN=255),OldDate:%String(MAXLEN=255),NewDate:%String(MAXLEN=255),OldTime:%String(MAXLEN=255),NewTime:%String(MAXLEN=255),OldTriageCat:%String(MAXLEN=255),NewTriageCat:%String(MAXLEN=255),OldDepartStat:%String(MAXLEN=255),NewDepartStat:%String(MAXLEN=255)"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
