<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.CCRLoad">
<Abstract>1</Abstract>
<Super>%RegisteredObject,XML.Element</Super>
<TimeCreated>62605,51394.714</TimeCreated>

<Method name="ImportBaseline">
<ClassMethod>1</ClassMethod>
<FormalSpec>path:%String,logname:%String,type:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	k ^zCCRLoad,^LoadItem,^LoadGUID,^MissingGUID,^zlastpass
	
	; Setup types to reapply elements
	i type=1 s path=path_"User\ARCAlias\"		;Apply last as bill sub group dependancies exist
	i type=2 s path=path_"User\BLCDRGTariff\"
	i type=3 s path=path_"epr\GroupSettings\"
	
	; Load directory into memory
	k ^zCCR("STATS")
	d ..LoadDir(path,"/name=guid/displayerror=1/force=0/displaylog=1")
	
    w !,$$$GetSimpleMessage("%Compiler","LoadOk")_$zdt($h)_" - All files loaded...Begining import into namespace "_$NAMESPACE
	
	; Load elements into namespace
	d ..LoadItems(path,"/name=guid/displayerror=1/force=0/displaylog=1")
 	
 	; Create log of imported items
 	d ..CreateLog(path,logname)
 	q 1
]]></Implementation>
</Method>

<Method name="CreateLog">
<ClassMethod>1</ClassMethod>
<FormalSpec>path:%String,logname:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	s file=##class(%File).%New(path_"baseline - "_logname_".csv")
 	d file.Open("NWS")
 	s x=0
 	f {
	 	s x=$o(^zCCRLoad(x))
	 	q:x=""
	 	d file.WriteLine(x_","_$tr($tr(^zCCRLoad(x),$c(9),","),$c(13,10)," "))
 	}
	d file.Close()

	; Write stats to csv file
 	s file1=##class(%File).%New(path_"baseline - Directory Counts.csv")
 	s file2=##class(%File).%New(path_"baseline - File List.csv")

 	d file1.Open("NWS")
 	d file2.Open("NWS")
 	
 	d file1.WriteLine("Element Directory,No. XML Files")
 	d file2.WriteLine("Element File,Loaded")

	s (dir,total,notloaded,loaded)=0
	f {
		s dir=$o(^zCCR("STATS","DIRFILECOUNT",dir))
		q:dir=""
		d file1.WriteLine(dir_","_$g(^zCCR("STATS","DIRFILECOUNT",dir)))
		s total=total+$g(^zCCR("STATS","DIRFILECOUNT",dir))

		s fn=0
		f {
			s fn=$o(^zCCR("STATS","FILES",dir,fn))
			q:fn=""
			d file2.WriteLine(fn_","_$g(^zCCR("STATS","FILES",dir,fn)))
			i $g(^zCCR("STATS","FILES",dir,fn))=0 s notloaded=$i(notloaded)
			i $g(^zCCR("STATS","FILES",dir,fn))=1 s loaded=$i(loaded)
		}

	}
	d file1.WriteLine("Total,"_total)
	d file2.WriteLine("Loaded,"_loaded)
	d file2.WriteLine("Not Loaded,"_notloaded)
	
	d file1.Close()
	d file2.Close()

 	q 1
]]></Implementation>
</Method>

<Method name="RemoveDeletes">
<ClassMethod>1</ClassMethod>
<FormalSpec>check:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	i $g(check)="" s check=0
	s del="2C2F9BB5-D958-4052-8EF6-9815B6BBF5FA,_COMPONENT||Kweb.RBResource:LookUpByLocation||ListUDF,websys.TranslationLookup"
	s del=del_"^7B0D7567-2BB2-4410-B073-D276BBED9A5C,_COMPONENT||Kweb.RBResource:LookUpByLocation||ListRowClass,websys.TranslationLookup"
	s del=del_"^45D90828-0038-4F3C-A93D-4C3DD91BC13E,_COMPONENT||Kweb.RBResource:LookUpOpRes||ListUDF,websys.TranslationLookup"
	s del=del_"^12EE86C0-A58D-421B-8E8B-6C6541A29823,_COMPONENT||Kweb.RBResource:LookUpOpRes||ListRowClass,websys.TranslationLookup"
	s del=del_"^72DDCCF9-820A-4A2F-B4CA-1135B00B35C1,_COMPONENT||Kweb.ORCEquipment:LookUpEquipWithChildT||ListUDF,websys.TranslationLookup"
	s del=del_"^A1E08F7C-7D72-4EF5-8258-68C5433F37D0,_COMPONENT||Kweb.ORCEquipment:LookUpEquipWithChildT||ListRowClass,websys.TranslationLookup"
	s del=del_"^7CAA41F0-EBF0-4F25-8E55-15319DEB88B2,34,epr.WorklistItemParams"
	s del=del_"^624EA753-239F-4FFB-BF09-F9C2110BCFB3,33,epr.WorklistItemParams"
	s del=del_"^B76E86FF-4578-4731-AD7D-0E647FC6A548,_COMPONENT||Kweb.CTLoc:LookUpLoc||ListUDF,websys.TranslationLookup"
	s del=del_"^872F161F-9FAB-419F-9B3B-FABD70D7BEC3,_COMPONENT||Kweb.CTLoc:LookUpLoc||ListRowClass,websys.TranslationLookup"
	s del=del_"^AA379837-C383-4819-A8BF-6FE07BAD8560,2249,websys.Preferences"
	s del=del_"^AA2563DB-2505-498A-9945-A9E3CD41DF5B,1||Kweb.CTLoc:LookUpLoc||1,websys.TranslationLookup"
	s del=del_"^88BA2064-636F-4732-8498-930E3A2426D8,1||Kweb.CTLoc:LookUpLoc||3,websys.TranslationLookup"
	s del=del_"^85AAE011-95B1-4544-A06D-FE87388535EB,1||Kweb.CTLoc:LookUpLoc||5,websys.TranslationLookup"
	s del=del_"^BD509DC5-F3DE-460B-AF00-683285F72F7F,_COMPONENT||Kweb.ORCEquipment:LookUpEquipment||ListUDF,websys.TranslationLookup"
	s del=del_"^8DE4F614-60ED-4DE9-A830-D158C58E2053,_COMPONENT||Kweb.ORCEquipment:LookUpEquipment||ListRowClass,websys.TranslationLookup"
	s del=del_"^1865BCD0-DF97-4984-BFD8-BB92D2846666,CONTEXTREGION1||251W50134POA,websys.TranslationContext"
	s del=del_"^705646BC-7A9F-4872-83D0-A7BA408AEE98,1734,websys.Preferences"
	s del=del_"^7619C410-0548-4AFF-9DD3-0331DE8845A6,CONTEXTREGION1||48W50103,websys.TranslationContext"
	s del=del_"^2386B863-4C7E-4DB7-9759-D082E06F051E,1896,websys.Preferences"
	s del=del_"^B2914A9F-CA08-40AA-98A6-3914053280DD,763,websys.Preferences"
	s del=del_"^4DB84FEB-9A65-4E11-A968-5F894B1F1B95,762,websys.Preferences"
	s del=del_"^813CE817-F7DC-426E-A138-F706C8E45633,623,websys.Preferences"
	s del=del_"^EFE8CAD7-5EAB-481E-813C-E961476D7045,60,websys.Preferences"
	s del=del_"^16EACA59-9F35-4AD8-ADE7-9CE92933BD02,61,websys.Preferences"
	s del=del_"^8D2D9ABE-8B6C-4F98-8A82-AABDB6F07813,657,websys.Preferences"
	s del=del_"^D46B48D1-5B85-42D6-B602-E457965098CB,CONTEXT||398R318,websys.TranslationContext"
	s del=del_"^27366F5F-84A5-4186-BE97-6AEE40B6926B,CONTEXT1||398R318,websys.TranslationContext"
	s del=del_"^FAA24F93-90BF-44BC-A6FE-1E0F62976248,1510,websys.Preferences"
	s del=del_"^4272830E-E4DC-44FB-AB37-582509B1D881,807,websys.Preferences"
	s del=del_"^9967E5C0-EDD6-4667-B0EC-BE93178C518C,1007,websys.Preferences"
	s del=del_"^93FB7D98-0BD5-42CF-8F67-56F43EC79DF5,62,websys.Report"
	s del=del_"^6EB370B1-3EE2-4B6C-A2F2-B781FD14D977,796,websys.Preferences"
	s del=del_"^384EBF9A-86E8-4983-9177-307A735E4F2F,875,websys.Preferences"
	s del=del_"^C7085A20-6F3D-4001-B7BF-AD6A9B5E6BFE,CONTEXT||398R317,websys.TranslationContext"
	s del=del_"^EDE56FD1-ABC2-457A-B3B3-4E4BF1F8F663,CONTEXT1||398R317,websys.TranslationContext"
	s del=del_"^5A305CA5-E78F-4D77-BEA5-071561F59E45,1509,websys.Preferences"
	s del=del_"^7435FCE9-33BB-44D8-94AC-79356EDBC358,_COMPONENT||Kweb.RBResource:LookUpByPartialCareProv||ListUDF,websys.TranslationLookup"
	s del=del_"^B09AB1EA-4E8D-4B75-B46E-A4F45C4B5046,_COMPONENT||Kweb.RBResource:LookUpByPartialCareProv||ListRowClass,websys.TranslationLookup"
	s del=del_"^7034FC30-3E46-4724-8DDB-82DCC6FC8B70,CONTEXT||251W50152PI,websys.TranslationContext"
	s del=del_"^AC4B58E8-1309-4DC7-ABE6-ECAFE1018002,CONTEXT1||251W50152PI,websys.TranslationContext"
	s del=del_"^37F62DC2-9496-4058-99CC-3170A25DBFF1,2396,websys.Preferences"
	s del=del_"^3E84F3C2-1F13-47B3-934C-993C4DAE2072,75,websys.Preferences"

	f x=1:1:$l(del,"^") {
		s element=$p(del,"^",x)
		i $g(element)'="" {
			s guid=$p(element,",")
			s id=$p(element,",",2)
			s table=$p(element,",",3)
			; If guid exists then delete item
			i $d(^OBJ.GUID(0,guid)) {
				s id=$lg(^OBJ.GUID(0,guid),2)
				i check=1 {
					s rs=##class(%ResultSet).%New()
					d rs.Prepare("DELETE FROM "_table_" WHERE ID='"_id_"'")
					s sc=rs.Execute()
					w !,"Deleted: "_guid_" Status: "_$system.OBJ.DisplayError(sc)
					d rs.Close()
				}
				i check=0 w !,guid_":"_id_":"_table
			}
		}
	}
	q 1
]]></Implementation>
</Method>

<Method name="LoadItems">
<Description>
Load all elements from XML files in a directory.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[dir:%Library.String="",qspec:%Library.String="",&errorlog:%Library.String,recurse:%Library.Boolean=1,&loaded:%Library.String,listonly:%Library.Boolean=0,&selectedlist:%Library.String,header:%Library.Boolean=1]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
    Set sc=..qualifierParse("Element",.qspec,.qstruct) If $$$ISERR(sc) Do DecomposeStatus^%occSystem(sc,.errorlog,.qstruct) Quit sc
    Set displaylog=$$$qualifierGetValue(qstruct,"displaylog")
    Set displayerror=$$$qualifierGetValue(qstruct,"displayerror")
    If header {
        $$$InitErrorNums
        s zh=$zh
        w !,$$$GetSimpleMessage("%Compiler","LoadStart")_$zdt($h)_" Importing XML files to namespace "_$NAMESPACE
    }
  
    s itemdesc=$o(^LoadItem(""))
    while itemdesc'="" {
	    s loaded=##class(%GlobalCharacterStream).%New()
	    Set rc=..Load(itemdesc,.qspec,.errorlog,.loaded,.listonly,.selectedlist,,0)
        #; Error ignored to allow other objects to be loaded.
        If $$$ISERR(rc) {
            s ^zCCRLoad($i(^zCCRLoad))=$SYSTEM.OBJ.DisplayError(rc)
        } else {
	        k ^LoadItem(itemdesc)
        }
        ;w !,itemdesc_":"_$SYSTEM.OBJ.DisplayError(rc)
    	
    	s originalFILE="",loaded1=0,exit=0
    	while $o(^zlastpass(originalFILE))'="" {
	    	i loaded1=1 s exit=1
	    	s originalFILE=$o(^zlastpass(originalFILE))
	    	i originalFILE'="" {
		    	// Get missing GUID
		    	s missingGUID=$o(^zlastpass(originalFILE,""))
		    	s originalGUID=$p($p(originalFILE,"\",$l(originalFILE,"\")),".")
		    	
		    	// Get location of missing GUID
			    s missingFILE=$g(^LoadGUID(missingGUID))
			    i missingFILE'="" {
				    // Load missing file
				    s loaded=##class(%GlobalCharacterStream).%New()
					s rc=..Load(missingFILE,.qspec,.errorlog,.loaded,.listonly,.selectedlist,,0)
					
					If $$$ISERR(rc) {
			            s ^zCCRLoad($i(^zCCRLoad))=$SYSTEM.OBJ.DisplayError(rc)
			        }
					
			        // Process original file if GUID is no longer missing
			        i '$d(^MissingGUID(missingGUID)) {
						k ^LoadItem(missingFILE)
						;k ^zlastpass(missingFILE)

					    s loaded=##class(%GlobalCharacterStream).%New()
						s rc=..Load(originalFILE,.qspec,.errorlog,.loaded,.listonly,.selectedlist,,0)

						If $$$ISERR(rc) {
							s ^zCCRLoad($i(^zCCRLoad))=$SYSTEM.OBJ.DisplayError(rc)
						}
						
						i '$d(^MissingGUID(originalGUID)) {
							k ^LoadItem(originalFILE)
							;k ^zlastpass(originalFILE)
							
							; if we process at least one record the allow the check to process a second pass
							s loaded1=1
						}
			        }
			    }
			    i '$d(^MissingGUID(originalGUID)),$g(missingFILE)'="" {
				    k ^LoadItem(missingFILE)
				    k ^zlastpass(missingFILE)
			    }
			    i '$d(^MissingGUID(missingGUID)),$g(originalFILE)'="" {
				    k ^LoadItem(originalFILE)
				    k ^zlastpass(originalFILE)
			    }
	    	}
	    	; check if w need to do a second pass
	    	i $o(^zlastpass(""))'="",loaded1=1,exit=0 s originalFILE=""
    	}
	    i $TLEVEL>0 TCOMMIT
    	s itemdesc=$o(^LoadItem(itemdesc))
    }
		/*
        s processedfile=$o(^zlastpass(""))
        while processedfile'="" {
		    s missingfile=$o(^zlastpass(processedfile,""))
		    while missingfile'="" {
			    s loadmissing=$g(^LoadGUID(missingfile))
			    i loadmissing'="" {
				    // Load missing file 
				    w !,"Load Missing: "_loadmissing
				    s loaded=##class(%GlobalCharacterStream).%New()
					s rc=..Load(loadmissing,.qspec,.errorlog,.loaded,.listonly,.selectedlist,,0)
					
					; If missing loaded then try reload item
					If $$$ISERR(rc) {
			            s ^zCCRLoad($i(^zCCRLoad))=$SYSTEM.OBJ.DisplayError(rc)
			        }
			    }
			    s missingfile=$o(^zlastpass(processedfile,missingfile))
		    }
		    w !,"Load processed: "_processedfile
		    s loaded=##class(%GlobalCharacterStream).%New()
			s rc=..Load(processedfile,.qspec,.errorlog,.loaded,.listonly,.selectedlist,,0)
			If $$$ISERR(rc) {
				s ^zCCRLoad($i(^zCCRLoad))=$SYSTEM.OBJ.DisplayError(rc)
			} else {
				k ^LoadItem(itemdesc)
				k ^zlastpass(processedfile)
			}
		    s processedfile=$o(^zlastpass(processedfile))
	    }
	    */
    
    If displaylog,header {
        Set zh=$zh-zh,zh=$fnumber(zh,"",$select(zh>100:1,zh>10:2,1:3))
        If $$$ErrorNum=0 {
            Write $char(13,10)_$$$FormatMessage(,"%Compiler","LoadOk",,zh)
        } Else {
            Write $char(13,10)_$$$FormatMessage(,"%Compiler","LoadErrors",,$$$ErrorNum,zh)
        }
    }
    Quit sc
]]></Implementation>
</Method>

<Method name="LoadDir">
<Description>
Load all elements from XML files in a directory.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[dir:%Library.String="",qspec:%Library.String="",&errorlog:%Library.String,recurse:%Library.Boolean=1,&loaded:%Library.String,listonly:%Library.Boolean=0,&selectedlist:%Library.String,header:%Library.Boolean=1]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	If dir = "" Quit $$$OK
    s dir=$zstrip(dir,"*CW")
    Set sc=..qualifierParse("Element",.qspec,.qstruct) If $$$ISERR(sc) Do DecomposeStatus^%occSystem(sc,.errorlog,.qstruct) Quit sc
    Set displaylog=$$$qualifierGetValue(qstruct,"displaylog")
    Set displayerror=$$$qualifierGetValue(qstruct,"displayerror")
    If header {
	    $$$InitErrorNums
        s zh=$zh
        w !,$$$GetSimpleMessage("%Compiler","LoadStart")_$zdt($horolog)_" - Reading in all files in directory "_dir
    }
    s loaded=##class(%GlobalCharacterStream).%New()
    Set resultset=##class(%ResultSet).%New("%File:FileSet")
    Set sc=resultset.%Execute(dir,"*.xml","",1)
    If $$$ISERR(sc) Do $System.Status.DecomposeStatus(sc,.errorlog) Quit sc
    While resultset.Next() {
        If resultset.Data("Type")="D" {
            Set:recurse dir(resultset.Data("ItemName"))=resultset.Data("Name")
        } Else {
	        // Count all xml files being loaded
	        s ^zCCR("STATS","FILECOUNT")=$i(^zCCR("STATS","FILECOUNT"))
	        s itemfilename=$p(##class(%File).GetFilename(resultset.Data("Name")),".")
	        s itemdirname=##class(%File).GetDirectory(resultset.Data("Name"))
	        
	        // Count the number of files per directory
	        s ^zCCR("STATS","FILES",itemdirname,resultset.Data("Name"))=0
	        i '$d(^zCCR("STATS","DIRFILECOUNT",itemdirname)) {
		        s ^zCCR("STATS","DIRCOUNT")=$i(^zCCR("STATS","DIRCOUNT"))
		        w !,"Loading directory to process list: "_itemdirname
	        }
	        s ^zCCR("STATS","DIRFILECOUNT",itemdirname)=$i(^zCCR("STATS","DIRFILECOUNT",itemdirname))
	        
	        s ^LoadItem(resultset.Data("Name"))=""
	        s ^LoadGUID($p(##class(%File).GetFilename(resultset.Data("Name")),"."))=resultset.Data("Name")
        }
    }
    
    #; Do not quit after error to allow further directories to be processed.
    If $$$ISERR(sc) Do $System.Status.DecomposeStatus(sc,.errorlog)
    
    Set subdir=$order(dir(""),1,directory)
    While subdir'="" {
        Set rc = ..LoadDir(directory,.qspec,.errorlog,1,.loaded,.listonly,.selectedlist,0)
        If $$$ISERR(rc) {
            s ^zCCRLoad($i(^zCCRLoad))=$SYSTEM.OBJ.DisplayError(rc)
        }
        Set subdir=$order(dir(subdir),1,directory)
    }
    Quit sc
]]></Implementation>
</Method>

<Method name="Load">
<Description><![CDATA[
Load a file from disk into Cache.
<p>Load elements from the file <var>file</var>. Returns an stream of elements it loaded in <var>loaded</var>, 
You may give it a list of files to load
via a single subscripted array. If you pass <var>listonly</var> as true then it will not
load anything but just list the elements that exist in the files that you supply it.<br>
If <var>selecteditems</var> is defined then this will contain a single subscripted array
of items to load. It will only load items that are in this list from the file/s
provided, so this provides a way to limit which items get loaded.<br>
<var>qspec</var> is a list of qualifiers which can be displayed with 'Do ##class(XML.Element).ShowQualifiers()']]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&filename:%String="",qspec:%String="",&errorlog:%String,&loaded:%String,listonly:%Boolean,&selecteditems:%String,displayname:%String,header:%Boolean=1,charset:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #; %xmlconfigitem used to track objects being loaded via XML.Element.
    #; During this process ChangeControl events will not be passed on
    #; by the standard TC.ChangeControl.Base class.
    #; % variable name used so that it is available during object events
    #; and classes can act appropriately for element exchange.
    #;
    #; DAH 07/10/2011
    #; %objGUID not used anymore, should be removed after next full build.
    #;
    #; %objlasterror keeps the most recent object error encountered during
    #; the load process.
    New %xmlconfigitem, %objGUID, %objlasterror
    Set sc=$$$OK,fileStatus=$$$OK,rc=$$$OK,listonly=+$g(listonly)
    Do ..normalizeElements(.selecteditems),..normalizeElements(.filename)
    
    #; If we are just listing the items in here then ignore the selected items list
    If listonly Kill selecteditems
    Set sc=..qualifierParse("Element",.qspec,.qstruct) If $$$ISERR(sc) Do DecomposeStatus^%occSystem(sc,.errorlog,.qstruct) Quit sc
    
    If '$data(filename) Set sc=$$$ERROR($$$FileNameRequired) Do DecomposeStatus^%occSystem(sc,.errorlog,.qstruct) Quit sc
    Set force=$$$qualifierGetValue(qstruct,"force")
    Set display=$$$qualifierGetValue(qstruct,"displaylog")
    Set loadguids=$$$qualifierGetValue(qstruct,"loadguids")
    Set %xmlconfigitem=$$$qualifierGetValue(qstruct,"bypassccr")
    If header $$$InitErrorNums
    Set zh=$zh
    If display,header Write !,$$$GetSimpleMessage("%Compiler","LoadStart")_$zdt($horolog)
    #; Unless the 'force' qualifier is used the load will be treated as a single transaction.
    #; If there is an error during the load then the whole transaction will be rolled back.
    If 'listonly,'force TStart
    Set reader=##class(XML.Reader).%New()
    #; Support multiple passes to ensure references between objects are maintained.
    Merge thispass=filename

    For pass=1:1 {
        Set file = ""
        For {
            Set file=$order(thispass(file)) Quit:file=""
            If '##class(%File).Exists(file) {
                Set fileStatus=$$$ERROR($$$FileDoesNotExist,file)
            } Else {
                #; Reset the list of GUIDs that do not exist.
                Kill unknown
                Do reader.OpenFile(file)
                While reader.Next(.obj,.rc,,.qstruct,.unknownref) {
                    i '$IsObject(obj) q
                    i obj.%Extends("%Library.Persistent") {
                        s oid=obj.%Oid()
                        m unknown=unknownref
                        #; During ListOnly new items do not have an ObjectIdentity.  They may be identified by their GUID instead of id.
                        #; Note: Both the GUID and id are checked in case the item was referenced by GUID for the first pass because an
                        #;        id did not exist.  During the second pass an id may exist but the id is not included in selecteditems.
                        Set item = $$$oidCompose(obj.GUID,obj.%ClassName(1))
                        If '$data(selecteditems)||(oid'=""&&($data(selecteditems(oid))))||(item'=""&&($data(selecteditems(item)))) {
                            If obj.GUID'="" {
                                #; Track element objects being loaded.
                                #; Objects are removed once they have been saved.
                                Set ^||%xmlconfigitem(obj.GUID)=obj
                            }
                            If 'listonly {
	                        	#; Check for orphaned GUID if Change Control is not enabled
                        		#; This is due existing GUID not deleted if CCR is not enabled.
                        		i $g(^SYS("ChangeControlClass"))="" {
	                        		d ..KillOrphanedGUID(obj)
                        		}
                                If loadguids {
                                    If obj.%Id()'="" {
                                        Set oid = obj.%Oid()
                                        #; The GUID will not be updated if there is an existing GUID assigned.
                                        #; The force qualifier indicates the GUID from the XML should override an existing GUID.
                                        If force,$d(^OBJ.GUID(1,oid),guid) {
                                            Kill ^OBJ.GUID(0,guid)
                                            Kill ^OBJ.GUID(1,oid)
                                        }
                                        If '$d(^OBJ.GUID(1,oid)) {
                                            Set guid = obj.%GUIDSet(oid, obj.GUID)
                                            If display Write !, "Loaded GUID: ", $$$oidClassName(oid), $c(9), $$$oidPrimary(oid), $c(9), ..GetName(oid, obj.%GUID(oid), .qstruct)
                                        }
                                    }
                                } Else {
                                      ;k ^zlastpass(file)
                                  #; Do not proceed with unresolved references unless the force qualifier is used.
                                    #; Note: When a set of elements both define and referece the same GUID it must be correlated twice.
                                    #;       The first pass will save the object with it's GUID and the second will match the GUID
                                    #;       reference in the child elements or properties.
                                    If 'force {
                                        #; Compare the GUIDs that defined by this element against the list of
                                        #; GUIDs that are referenced but do not exist on this system.
                                        #; The %Save will not proceed if there are any missing references.
                                        Set missing = 0, guid = ""
                                        For {
                                            Set guid = $Order(unknown(guid))
                                            If guid = "" Quit
                                            
                                            if ..FindGUID(obj,guid) {
	                                        	k unknown(guid)
                                            }
                                            else {
	                                            m ^zlastpass(file)=unknown
	                                           	s missing = 1
                                            }
                                            #; Do not check the rest of 'unknown'.
                                            If missing Quit
                                        }
                                        #; A missing GUID has been found.
                                        #; The object will not be saved until the reference can be resolved.
                                        If missing Quit
                                    }
                                    s UPLOAD=1
                                    s rc=obj.%Save()
                                    ;s namespace=$NAMESPACE
                                    ;zn "%SYS"
                                    ;d ##class(SYS.Lock).DeleteAllLocks($j)
                                    ;zn namespace
                                    Set oid=obj.%Oid()
                                    If oid'="" Set ^||SavedObj(oid)=""
                                    If $$$ISERR(rc) {
                                        If '$Data(unknown) {
                                            Set rc=$System.Status.AppendStatus($$$ERROR($$$GeneralError,"Unable to save element $lb("_$s(obj.%Oid()'="":$lts(obj.%Oid()),1:""""","""_obj.%ClassName(1)_"""")_"), "_obj.GUID),rc)
	                	                    w !,$System.Status.GetErrorText(rc)
                                        } Else {
                                            #; Incomplete element could not be saved.  The save can fail if the missing reference is a required property.
                                            #; This is not treated as an error.  Subsequent passes may be able to load the element since the missing
                                            #; reference is defined in one of the files being processed.
                                            If display {
                                                Write !, "WARNING: Initial load failed.  ", obj.%ClassName(1), $c(9), $$$oidPrimary(oid), $c(9), ..GetName(oid, obj.GUID, .qstruct)
                                                Write !, $c(9), $System.Status.GetOneStatusText(rc)
                                            }
                                            Set rc = $$$OK
                                            $$$DecErrorNum
                                        }
                                        Quit                                    
                                    }
                                    If obj.GUID'="" {
	                                    k ^MissingGUID(obj.GUID)
	                                    ; Record loaded items
	                                    s reffile=$o(filename(""))
	                                    i file'="" s ^zCCR("STATS","FILES",##class(%File).GetDirectory(reffile),reffile)=1
	                                    
                                        #; Remove element that has been saved.
                                        Kill ^||%xmlconfigitem(obj.GUID)
                                    }
                                    
                                    #; When there are still unknown GUIDs display an alternate
                                    #; message indicating another pass will be performed
                                    #; to resolve GUID references included in this element. (Primed element ...)
                                    #; Note: This scenario only occurs when a set of files both
                                    #;       define and reference the same GUID and thus two
                                    #;       passes are required for the correlation to work.
                                    If display {
	                                    w !,$Select('$Data(unknown):"Loaded",1:"Primed")_" element: "_$$$oidClassName(oid)_$c(9)_$$$oidPrimary(oid)_$c(9)_..GetName(oid, obj.%GUID(oid), .qstruct)
	                                    s ^zCCRLoad($i(^zCCRLoad))=$Select('$Data(unknown):"Loaded",1:"Primed")_" element: "_$$$oidClassName(oid)_$c(9)_$$$oidPrimary(oid)_$c(9)_..GetName(oid, obj.%GUID(oid), .qstruct)
                                    }
                                }
                            } Else {
                                #; When running list only, instead of relying upon the object
                                #; load to match GUIDs we need to check for GUIDs that would
                                #; have been loaded.
                                Kill tmp
                                Merge tmp = unknown
                                Kill unknown
                                Set guid = ""
                                For {
                                    Set guid = $Order(tmp(guid))
                                    If guid = "" Quit
                                    If guid'="",'$d(^||%xmlconfigitem(guid)) {
	                                    if '..FindGUID(obj,guid) {
		                                    s unknown(guid) = ""
		                                    ;w !,"Unknown: "_guid
	                                    }
                                    }
                                }
                                #; If there are any unresolved references remaining the object
                                #; would not be saved unless the force qualifier is used.
                                If 'force,$Data(unknown) Quit
                                #; No save performed but display details if available.
                                If display {
                                    Write !, "Listed element: "
                                    If oid = "" {
                                        Write obj.%ClassName(1), $c(9), "%New()", $c(9), ..GetName(oid, obj.GUID, .qstruct)
                                    } Else {
                                        Write $$$oidClassName(oid), $c(9), $$$oidPrimary(oid), $c(9), ..GetName(oid, obj.GUID, .qstruct)
                                    }
                                }
                            }
                            #; During ListOnly new items do not have an ObjectIdentity.
                            #; Instead they are identified by their GUID.
                            Set item = $Select(oid'="":oid,1:$$$oidCompose(obj.GUID,obj.%ClassName(1)))
                            If item'="" {
                                Do loaded.WriteLine($lb(item,file))
                            }
                        }
                    } Else {
                        If 'force {
                            #; Validate non-persistent classes.
                            #; XML.Information uses this process to confirm class version information.
                            Set rc=$System.Status.AppendStatus(obj.%ValidateObject(),rc)
              				s ^zCCRLoad($i(^zCCRLoad))=$System.Status.GetErrorText(rc)
                        }
                    }
                    ;Set fileStatus=$$$ADDSC(fileStatus,rc)
                    Set rc=$$$OK
                }
                //This rc is returned from XML.Reader:Next Loop.
                If $$$ISERR(rc) {
                    #; Increment the error count for errors returned from XML.Reader:Next.
                    $$$IncErrorNum
                    ;Set fileStatus=$$$ADDSC(rc,fileStatus)
                    if display s ^zCCRLoad($i(^zCCRLoad))=$System.Status.GetErrorText(rc)
                    Quit
                }
                
                #; If there are GUID references that were unable to be resolved
                #; add this file to the list to be reprocessed in another pass.
                If $Data(unknown) {
                    Merge nextpass(file)=unknown
                }
            }

            If $$$ISERR(fileStatus) {
                #; Add an error including the file name to identify which file has encountered the problem.
                Set fileStatus=$$$EMBEDSC($$$ERROR($$$GeneralError, "Unable to load file "_file),fileStatus)
                ;Do DecomposeStatus^%occSystem(fileStatus,.errorlog,.qstruct)
                ;Set sc=$$$ADDSC(sc,fileStatus)
                s ^zCCRLoad($i(^zCCRLoad))=fileStatus
                Set fileStatus=$$$OK
            }
        }
        
        #; Check to see whether another pass is required.
        If '$d(nextpass) Quit
        
        #; After the second pass check to see whether another pass will help.
        If pass > 1 {
            Set rc = $$$OK, file = "", continue = 0
            
            #; Check for files that have been successfully loaded without unresolved GUID references.
            For  {
                Set file = $order(thispass(file))
                If file = "" Quit
                
                If '$d(nextpass(file)) {
                    #; An element has successfully been loaded during this pass.
                    #; Therefore subsequent passes of other files may refer to GUIDs defined by this element.
                    
                    #; Disregard missing GUID details because another pass will be performed.
                    Set continue = 1
                    Quit
                }
            }
            
            If 'continue {
                #; All files from this pass are marked for inclusion in the next pass and
                #; therefore the next pass will have the same results as this pass.
                #;
                #; Build a list of the missing GUIDs per file and stop processing.
                Set file = ""
                For  {
                    Set file = $order(nextpass(file))
                    If file = "" Quit
                    
                    #; Note: Maximum %Status description length is 1023 and GUIDs are 36 characters.
                    #;       When there are too many GUIDs to be included in a status an ellipse of
                    #;       3 characters is used.
                    #Define DisplayMaximum ##expression(1023 - 36 - 3)
                    Set guid = "", errorText = ""
                    For {
                        Set guid = $Order(nextpass(file,guid))
                        If guid = "" Quit
                        
                        #; If the error text does not have space for another GUID append an ellipse.
                        If $Length(errorText) > $$$DisplayMaximum {
                            Set errorText = errorText_"..."
                            Quit
                        }
                        s ^MissingGUID(guid)=""
                        If errorText = "" {
                            Set errorText = "GUID reference(s) missing from "_file_"; "_guid
                        } Else {
                            Set errorText = errorText_", "_guid
                        }
                    }
                    ;Set rc = $$$ADDSC(rc, $$$ERROR($$$GeneralError,errorText))
                }
                
                #; Note: $$$ERROR will increment the error count.
                ;Do DecomposeStatus^%occSystem(rc,.errorlog,.qstruct)
                ;Set sc=$$$ADDSC(sc,rc)
                if display s ^zCCRLoad($i(^zCCRLoad))=errorText
                Quit
            }
        }
        If $$$ISERR(rc) s ^zCCRLoad($i(^zCCRLoad))=$SYSTEM.OBJ.DisplayError(rc)
        If $$$ISERR(rc) Quit
        
        #; Initialise next pass.
        Kill thispass
        Merge thispass = nextpass
        Kill nextpass
        m ^zlastpass=thispass
    }
    
    If $$$ISERR(sc),$$$ErrorNum=0 $$$IncErrorNum
    
    If display,header {
        Set zh=$zh-zh,zh=$fnumber(zh,"",$select(zh>100:1,zh>10:2,1:3))
        If $$$ErrorNum=0 {
            Write $char(13,10)_$$$FormatMessage(,"%Compiler","LoadOk",,zh)
        } Else {
            Write $char(13,10)_$$$FormatMessage(,"%Compiler","LoadErrors",,$$$ErrorNum,zh)
        }
    }
    If header,$$$ISOK(sc),$$$ErrorNum'=0 {
        If $get(%objlasterror)'="",$$$ISERR(%objlasterror) {
            Set sc=$$$EMBEDERROR(%objlasterror,$$$ErrorDetected)
        } Else {
            Set sc=$$$ERROR($$$ErrorDetected)
        }
        Do DecomposeStatus^%occSystem(sc,.errorlog,.qstruct)
    }
    If 'listonly,'force {
        If $$$ISOK(sc) {
            TCommit
        } Else {
            TRollBack 1
            d ..KillOrphanedGlobal()
            If display Write !, "Transaction rolled back"
        }
    }
    k ^||%xmlconfigitem
    k ^||SavedObj
    Quit sc
]]></Implementation>
</Method>

<Method name="FindGUID">
<ClassMethod>1</ClassMethod>
<FormalSpec>obj:%RegisteredObject,guid:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    #Define cardinality(%classname,%propertyname) $$$defMemberKeyGet(%classname,$$$cCLASSproperty,%propertyname,$$$cPROPcardinality)
    s found=0
    
    if obj.GUID'="",obj.GUID=guid
	{
		s found=1
	}
	
	if 'found {
    	s classname=obj.%ClassName(1)
    	s propertyname=""
    	For
    	{
	        s propertyname=$$$defMemberNext(classname,$$$cCLASSproperty,propertyname)
        	q:propertyname=""
        	if $$$cardinality(classname,propertyname)=$$$cPROPCARDINALITYCHILDREN
        	{
		        x ("(obj,relObj) s relObj=obj."_propertyname,obj,.relChildObj)
	        	if relChildObj
	        	{
			        for i=1:1:relChildObj.Count()
		        	{
				        s childObj=relChildObj.GetAt(i)
			        	s found=..FindGUID(childObj,guid)
			      		q:found
		        	}
	        	}
        	}
        	q:found
    	}
	}    
    q found
]]></Implementation>
</Method>
</Class>
</Export>
