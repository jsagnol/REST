<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.AUXX.Report.ZEN.StoredProc.SCTTConsumerConsToShare">
<Description>
Report Name: Confidential Referral Coversheet
Report Code: AUXX.SCTT0001
TRC Number: 152012</Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Report.Abstract</Super>
<TimeCreated>62970,48071.923811</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/AUXX/Report/ZEN/StoredProc/SCTTConsumerConsToShare.xml#1 $</Default>
</Parameter>

<Method name="ConsentClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	// Clean up by purging the temporary node in ^CacheTemp global
	New repid
	Set repid=$LIST(QHandle,2)

	//Start Monitor (if configured to capture stats)
	i mon Do ..MonitorEnd(mon)

	Kill ^CacheTemp("TRAK",repid)

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ConsentExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,EpisodeID:%Library.String,ReferralID:%Library.String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	// Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp("TRAK") global. 
	// We use ^CacheTemp global because CACHETEMP is a memory resident database
	New repid,ind

	// Use $Increment to get the next node and clean up
	Set repid=$Increment(^CacheTemp("TRAK"))
	
	//Start Monitor (if configured to capture stats)
	s mon=..MonitorBegin()
	
	s adm=EpisodeID
	
	s (ClientName,DOB,Sex,UR,ServiceType,ReferralTo,TypeInfo,Consumer,AuthRepo,Q1,Q2,Q3,Q4,ConsumerName,Clinician,Position,creationdate,Witness)=""
	s PageTitle="Consumer Consent to Share Information"
	s PageDesc="To record freely given informed consumer consent to share their information with a specific agency/ies for a specific purpose/s."_$c(13,10)_$c(13,10)
	s PageSideText="Consumer Consent to Share Information"
	s admobj=##class(User.PAAdm).%OpenId(adm)
	i admobj,ReferralID {
		s pat=$p($g(^PAADM(adm)),"^")
		
		s patobj=##class(User.PAPatMas).%OpenId(pat)
		i patobj {
			s ClientName=patobj.PAPMIName_", "_patobj.PAPMIName2
			s DOB=patobj.PAPMIDOB
			i DOB s DOB=$zd(DOB,4,,4)
			s Sex=patobj.PAPMISexDR.CTSEXDesc
			s UR=patobj.PAPMINo
			k patobj
		}
		
		s RefToType=$p($g(^PA("DISSUM",ReferralID)),"^",22)
		i $p($p(RefToType,"&",$l(RefToType,"&")),"|")="REF" s refdocid=$p($p(RefToType,"&",$l(RefToType,"&")),"|",2),qid=$p($p(RefToType,"&",$l(RefToType,"&")),"|",3)
		i $p($p(RefToType,"&",$l(RefToType,"&")),"|")="NG" s ngid=$p($p(RefToType,"&",$l(RefToType,"&")),"|",2),qid=$p($p(RefToType,"&",$l(RefToType,"&")),"|",3)
		
		s qobj=##class(questionnaire.QAUXXSCTTR).%OpenId(qid)
		i qobj {
			s ServiceType=##class(websys.CustomTypeItem).GetDescriptionFromCode("ServiceType",qobj.Q33)
			s ReferralTo=qobj.Q24.GetAt(1)
			s TypeInfo=""
			f x=1:1:qobj.Q28.Count() {
				i TypeInfo'="" s TypeInfo=TypeInfo_$c(13,10)_qobj.Q28.GetAt(x)
				i TypeInfo="" s TypeInfo=qobj.Q28.GetAt(x)
			}
			
			k qobj
		}
		s dsobj=##class(User.PADischargeSummary).%OpenId(ReferralID)
		i dsobj {
			s Consumer=$s(dsobj.DISCheckBox1="Y":"Y",1:"N")
			s AuthRepo=$s(dsobj.DISCheckBox2="Y":"Y",1:"N")
			s Q1=$s(dsobj.DISCheckBox3="Y":"X",1:" ")
			s Q2=$s(dsobj.DISCheckBox4="Y":"X",1:" ")
			s Q3=$s(dsobj.DISCheckBox5="Y":"X",1:" ")
			s Q4=$s(dsobj.DISCheckBox6="Y":"X",1:" ")
			s Witness=dsobj.DISTextBox1
			s creationdate=dsobj.DISCreateDate
			i creationdate s creationdate=$zd(creationdate,4,,4)
			s Method=dsobj.DISReferCategoryDR.REFCATCode
			i Method="V" { s VerbalDate=$s(dsobj.DISCreateDate'="":$zd(dsobj.DISCreateDate,4,,4),1:"    /    /   ") } else { s VerbalDate="    /    /   " }
			i Method="W" { s WrittenDate=$s(dsobj.DISCreateDate'="":$zd(dsobj.DISCreateDate,4,,4),1:"    /    /   ") } else { s WrittenDate="    /    /   " }
			
			
			k dsobj
		}
		s patobj=##class(User.PAPatMas).%OpenId(pat)
		i patobj {
			s ConsumerName=patobj.PAPMIName_", "_patobj.PAPMIName2
			k patobj
		}
		s Clinician=admobj.PAADMAdmDocCodeDR.CTPCPDesc
		s Position=admobj.PAADMAdmDocCodeDR.CTPCPSpecDR.CTSPCDesc

		s ind=$i(ind)
		s ^CacheTemp("TRAK",repid,ind)=$lb("CCSI",PageTitle,PageDesc,PageSideText,ClientName,DOB,Sex,UR,ind,ServiceType,ReferralTo,TypeInfo,Consumer,AuthRepo,Q1,Q2,Q3,Q4,ConsumerName,Clinician,Position,"Referral",creationdate,Witness,VerbalDate,WrittenDate)


		f x=1:1:7 {
			i ind<7 {
				s ind=$i(ind)
				s ^CacheTemp("TRAK",repid,ind)=$lb("CCSI",PageTitle,PageDesc,PageSideText,ClientName,DOB,Sex,UR,ind,$c(13,10),"","",Consumer,AuthRepo,Q1,Q2,Q3,Q4,ConsumerName,Clinician,Position,"",creationdate,Witness,VerbalDate,WrittenDate)
			}
		}
		k admobj
	}

	// Build QHandle (AtEnd,ReportID,Index)
	Set QHandle=$LISTBUILD(0,repid,0)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ConsentFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the 
^CacheTemp("TRAK" global and return this row to the Report writer</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	// This fetch method should never have to change. 
	// repid - Report ID
	// ind   - sequence index which represents each row
	New repid,ind

	// Restore QHandle
	Set AtEnd=$LI(QHandle,1)
	Set repid=$LI(QHandle,2)
	Set ind=$LI(QHandle,3)

	Set ind=$order(^CacheTemp("TRAK",repid,ind))
	If ind="" {	// if there are no more rows, finish fetching
		Set AtEnd=1
		Set Row=""
	} else {	// fetch row
		Set Row=^CacheTemp("TRAK",repid,ind)
	}

	// Save QHandle
	Set QHandle=$lb(AtEnd,repid,ind)
	Quit $$$OK
]]></Implementation>
</Method>

<Query name="Consent">
<Description>
This is the Stored Procedure Template. For Sample use only.
It expects one parameter of type integer and will return 4 fields:
Field1 - Integer
Field2 - String
Field3 - Date
Field4 - Time</Description>
<Type>%Library.Query</Type>
<FormalSpec>EpisodeID:%Library.String,ReferralID:%Library.String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="FormCode:%String,PageTitle:%String,PageDesc:%String,PageSideText:%String,ClientName:%String,DOB:%String,Sex:%String,UR:%String,ind,ServiceType:%String,ReferralTo:%String,TypeInfo:%String,Consumer:%String,AuthRepo:%String,Q1:%String,Q2:%String,Q3:%String,Q4:%String,ConsumerName:%String,Clinician:%String,Position:%String,Purpose:%String,creationdate:%String,Witness:%String,VerbalDate:%String,WrittenDate:%String"/>
</Query>
</Class>
</Export>
