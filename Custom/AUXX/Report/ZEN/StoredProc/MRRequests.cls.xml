<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.AUXX.Report.ZEN.StoredProc.MRRequests">
<ProcedureBlock>0</ProcedureBlock>
<Super>Report.Abstract</Super>
<TimeCreated>62143,52497.244502</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/AUXX/Report/ZEN/StoredProc/MRRequests.xml#1 $</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Report Name: Trak Medical Record Request List <br>

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Report Code: Trak.MED0009 <br>

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Logtrak Number: 80757 <br>

]]></Content>
</UDLText>

<Method name="GetRequestRecordsClose">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 
 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)
 
 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetRequestRecordsExecute">
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,DateFrom:%Date,DateTo:%Date,Hospital:%String,Reason:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[

 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 
  //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
 
  Set repid=$I(^CacheTemp("TRAK"))

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n,END,NEXT
 n READesc,PAPMINo,PAPMIName,CurrentLoc,PAPMIName2,RTMAVVolDesc,SSUSRInitials,RTREQReqTelNo,RTMAVDateArrived,CTPCPCode,CTLOCCode,CurrentLoc,RTREVStatus,RTREQDate,HOSPDesc,RTREQRowId,RTREQTransDate,RTREQComments,PAADMAdmNo
 s (READesc,PAPMINo,RTREQDate,PAPMIName,PAPMIName2,RTMAVVolDesc,SSUSRInitials,RTREQReqTelNo,RTMAVDateArrived,CTPCPCode,CTLOCCode,RTREVStatus,HOSPDesc,RTREQRowId,RTREQTransDate,RTREQComments,PAADMAdmNo)=""
 s (END,NEXT)=0
 s ind=1

 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)

 i $g(Hospital)'="" s Hospital=$zstrip(Hospital,"*WC")
 i $g(Reason)'="" s Reason=$zstrip(Reason,"*WC")

 &sql(declare RTReq cursor for
 SELECT 
 RTREQ_RowId
 FROM    SQLUser . RT_Request 
 WHERE  
 RTREQ_TransDate between :DateFrom and :DateTo
 AND (({fn CONCAT( ',', {fn CONCAT((:Reason),',')})} [ {fn CONCAT( ',', {fn CONCAT((RTREQ_ReqReason_DR->REA_RowId),',')})}) OR (:Reason IS NULL))
 AND (({fn CONCAT( ',', {fn CONCAT((:Hospital),',')})} [ {fn CONCAT( ',', {fn CONCAT((RTREQ_ReqLoc_DR->CTLOC_Hospital_DR->HOSP_RowId),',')})}) OR (:Hospital IS NULL))
 order by RTREQ_rowid)
 &sql(open RTReq)

 //fetch first row
 &sql(fetch RTReq into :RTREQRowId)
 i SQLCODE s END=1
 i 'END d GetRec

 while 'END{	
	i 'NEXT {
 // build the row
 d FormatDates
 Set ^CacheTemp("TRAK",repid,HOSPDesc_READesc_RTREQDate_PAPMINo_ind)=$LB(READesc,PAPMINo,PAPMIName,PAPMIName2,RTMAVVolDesc,SSUSRInitials,RTREQReqTelNo,RTMAVDateArrived,CTPCPCode,CTLOCCode,CurrentLoc,RTREVStatus,RTREQDate,HOSPDesc,RTREQRowId,RTREQTransDate,RTREQComments,PAADMAdmNo)
 s ind=ind+1
	} 
	 
	s NEXT=0 	
 //fetch rows
 &sql(fetch RTReq into :RTREQRowId)
 i SQLCODE s END=1
 d GetRec
 }

 s ^zBernard("3")=(3)
 &sql(close RTReq)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 s ^zBernard("4")=(4)
 Quit $$$OK

GetRec
 s NEXT=0
 &sql(
 SELECT 
RTREQ_ReqReason_DR->REA_Desc,
PAPMI_No,
PAPMI_Name,
PAPMI_Name2,
RTREV_MasVol_DR->RTMAV_VolDesc,
RTREQ_ReqUser_DR->SSUSR_Initials,
RTREQ_ReqTelNo,
RTREV_MasVol_DR->RTMAV_DateArrived,
RTREQ_Doctor_DR->CTPCP_Code,
RTREQ_ReqLoc_DR->CTLOC_Code,
RTREV_MasVol_DR->RTMAV_CurrentLoc_Dr->CTLOC_Code,
RTREV_Status,
RTREQ_Date,
RTREQ_ReqLoc_DR->CTLOC_Hospital_DR->HOSP_Desc,
RTREQ_RowId,
RTREQ_TransDate,
RTREQ_Comments,
RTREQ_PAADM_dR->PAADM_AdmNo
 INTO 
:READesc,
:PAPMINo,
:PAPMIName,
:PAPMIName2,
:RTMAVVolDesc,
:SSUSRInitials,
:RTREQReqTelNo,
:RTMAVDateArrived,
:CTPCPCode,
:CTLOCCode,
:CurrentLoc,
:RTREVStatus,
:RTREQDate,
:HOSPDesc,
:RTREQRowId,
:RTREQTransDate,
:RTREQComments,
:PAADMAdmNo
 FROM    SQLUser . RT_Request, SQLUser . RT_ReqVol, 
 SQLUser . RT_Master, sqluser . PA_Patmas
 WHERE 
 RTREQ_RowId=:RTREQRowId and
 RTREQ_RowId=RTREV_RTREQ_ParRef and 
 RTREQ_MRNo_DR=RTMAS_RowId and RTMAS_PATNO_DR=PAPMI_RowId
 )
 s RTREVStatus=##class(websys.StandardTypeItem).GetDescriptionFromCode("RTREVStatus",RTREVStatus)
 s RTREQComments=$ZSTRIP(RTREQComments,"*C")
 i SQLCODE s NEXT=1
 q

FormatDates
 // Convert the dates to ODBC date format
 If RTREQTransDate Set RTREQTransDate=..ConvertDateToODBC(RTREQTransDate)
 If RTMAVDateArrived Set RTMAVDateArrived=..ConvertDateToODBC(RTMAVDateArrived)
 If RTREQDate Set RTREQDate=..ConvertDateToODBC(RTREQDate)
 Quit
]]></Implementation>
</Method>

<Method name="GetRequestRecordsFetch">
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="GetRequestRecords">
<Type>%Library.Query</Type>
<FormalSpec>DateFrom:%Date,DateTo:%Date,Hospital:%String,Reason:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="READesc:%String(MAXLEN=255),PAPMINo:%String(MAXLEN=255),PAPMIName:%String(MAXLEN=255),PAPMIName2:%String(MAXLEN=255),RTMAVVolDesc:%String(MAXLEN=255),SSUSRInitials:%String(MAXLEN=255),RTREQReqTelNo:%String(MAXLEN=255),RTMAVDateArrived:%Date,CTPCPCode:%String(MAXLEN=255),CTLOCCode:%String(MAXLEN=255),CurrentLoc:%String,RTREVStatus:%String(MAXLEN=255),RTREQDate:%Date,HOSPDesc:%String(MAXLEN=255),RTREQRowId:%String(MAXLEN=255),RTREQTransDate:%Date,RTREQComments:%String(MAXLEN=999),PAADMAdmNo:%String"/>
</Query>

<Query name="LookUpByMRReqReason">
<Type>%Library.SQLQuery</Type>
<FormalSpec>var:%String,activedate:%Library.Date</FormalSpec>
<SqlQuery><![CDATA[SELECT REA_Desc,REA_RowId,REA_Code
FROM SQLUser.RTC_Reason_Request
WHERE ((%UPPER REA_Desc %STARTSWITH %UPPER :val) OR (%UPPER REA_Code %STARTSWITH %UPPER :val))
AND ((REA_DateFrom <= :activedate) OR (REA_DateFrom IS NULL) OR (:activedate IS NULL))
AND ((REA_DateTo >= :activedate) OR (REA_DateTo IS NULL) OR (:activedate IS NULL))]]></SqlQuery>
<Parameter name="CONTAINID" value="2"/>
<Parameter name="ROWSPEC" value="Description:%String,HIDDEN:%String,Code:%String"/>
</Query>

<Method name="LookUpByMRReqReasonBroker">
<ClassMethod>1</ClassMethod>
<FormalSpec>itmjs:%Library.String="",itmjsex:%Library.String="",var:%Library.String="",activedate:%Library.Date=""</FormalSpec>
<Implementation><![CDATA[
 n id,code,desc
 s (id,code,desc)=""
 &SQL(SELECT DISTINCT
 REA_Desc,REA_RowId,REA_Code
 INTO :desc,:id,:code
 FROM  SQLUser.RTC_Reason_Request
 WHERE ((%ALPHAUP REA_Desc = %ALPHAUP :var) OR (%ALPHAUP REA_Code = %ALPHAUP :var))
 AND ((REA_DateFrom <= :activedate) OR (REA_DateFrom IS NULL) OR (:activedate IS NULL))
 AND ((REA_DateTo >= :activedate) OR (REA_DateTo IS NULL) OR (:activedate IS NULL)))
 ;
 i SQLCODE s desc=var q 0
 s retval=itmjs_"('"_$ZCVT(desc,"O","JS")_"');"
 i itmjsex'="""" s retval=retval_itmjsex_"('"_$ZCVT(desc,"O","JS")_"^"_id_"^"_$ZCVT(code,"O","JS")_"');"
 &javascript<#(retval)#>
 q 1
]]></Implementation>
</Method>
</Class>
</Export>
