<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.AUXX.Report.ZEN.StoredProc.ApptArriveSeen">
<ProcedureBlock>0</ProcedureBlock>
<Super>Report.Abstract</Super>
<TimeCreated>61017,50238.867465</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/AUXX/Report/ZEN/StoredProc/ApptArriveSeen.xml#1 $</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Report Name: Appointment Arrival - Seen Times

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Report Code: AUXX.BKG.0001 <br>

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Logauxx Number: 72215

]]></Content>
</UDLText>

<Method name="ApptArriveSeenClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 
 //Close Monitor (if configured to capture stats)
 	i mon Do ..MonitorEnd(mon)
 
 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="ApptArriveSeenExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,DateFrom:%Date,DateTo:%Date,Hospital:%String,Location:%String,CareProvider:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))

 //If Performance Stats Flag is checked in Config Mgr store initial values for performance monitor
 //Start Monitor (if configured to capture stats)
 	s mon=..MonitorBegin()
 	
 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 n HOSPRowId,CTLOCRowId,CTPCPRowId,ASDate,PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,HOSPDesc,APPTRowId,ctloccode,CTLOCDesc,RESDesc,ASSessStartTime,APPTArrivalTime,APPTSeenTime,DateVar,TimeVar,Variance,LatestBkArTime
 s (HOSPRowId,CTLOCRowId,DateVar,TimeVar,Variance,LatestBkArTime,SessTime,ArrivalTime,SeenTime)=0
 s (CTPCPRowId,ASDate,PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,HOSPDesc,APPTRowId,ctloccode,CTLOCDesc,RESDesc,ASSessStartTime,APPTArrivalTime,APPTSeenTime)=""

 i $g(Hospital)'="" s Hospital=$zstrip(Hospital,"*WC")
 i $g(Location)'="" s Location=$zstrip(Location,"*WC")
 i $g(CareProvider)'="" s CareProvider=$zstrip(CareProvider,"*WC")

  //Convert ODBC dates to cache format
 s DateFrom=..ConvertDateToCache(DateFrom)
 s DateTo=..ConvertDateToCache(DateTo)

 s ind=1

 &sql(declare ApptArrivalSeenByTime cursor for
 SELECT
 RES_CTLOC_DR->CTLOC_Hospital_DR,
 RES_CTLOC_DR,
 RES_CTPCP_DR,
 AS_Date,
 PAPMI_No,
 PAPMI_Name,
 PAPMI_Name2,
 PAPMI_Name3,
 RES_CTLOC_DR->CTLOC_Hospital_DR->HOSP_Desc,
 APPT_RowId, 
 RES_CTLOC_DR->ctloc_code,
 RES_CTLOC_DR->ctloc_Desc,
 RES_Desc,
 AS_SessStartTime,
 APPT_ArrivalTime,
 APPT_SeenTime,
 {fn TRUNCATE(AS_SessStartTime/60,0)},
 {fn TRUNCATE(APPT_ArrivalTime/60,0)},
 {fn TRUNCATE(APPT_SeenTime/60,0)},
 (appt_seendate-as_date)*1440
 From
 SQLUser.PA_patmas,
 SQLUser.rb_resource,
 SQLUser.rb_apptschedule,
 SQLUser.rb_appointment
 where res_type='Care Provider' and
 res_rowid=as_res_parref and
 as_rowid=appt_as_parref and
 appt_papmi_dr=papmi_rowid and
 appt_status in ('A','D') and 
 as_date between :DateFrom and :DateTo
 AND (({fn CONCAT( ',', {fn CONCAT((:Hospital),',')})} [ {fn CONCAT( ',', {fn CONCAT((RES_CTLOC_DR->CTLOC_Hospital_DR->HOSP_RowId),',')})}) OR (:Hospital IS NULL))
 AND (({fn CONCAT( ',', {fn CONCAT((:Location),',')})} [ {fn CONCAT( ',', {fn CONCAT((RES_CTLOC_DR->CTLOC_ROWID),',')})}) OR (:Location IS NULL))
 AND (({fn CONCAT( ',', {fn CONCAT((:CareProvider),',')})} [ {fn CONCAT( ',', {fn CONCAT((RES_CTPCP_DR->CTPCP_RowId),',')})}) OR (:CareProvider IS NULL))
 )
 &sql(open ApptArrivalSeenByTime)

 //fetch first row
 &sql(fetch ApptArrivalSeenByTime into :HOSPRowId,:CTLOCRowId,:CTPCPRowId,:ASDate,:PAPMINo,:PAPMIName,:PAPMIName2,:PAPMIName3,:HOSPDesc,:APPTRowId,:ctloccode,:CTLOCDesc,:RESDesc,:ASSessStartTime,:APPTArrivalTime,:APPTSeenTime,:SessTime,:ArrivalTime,:SeenTime,:DateVar)

 while 'SQLCODE{
	 
 d FormatDates
 d FormatTimes
 i SessTime>ArrivalTime s LatestBkArTime=SessTime 
 i SessTime<=ArrivalTime s LatestBkArTime=ArrivalTime 
 i SeenTime="" s Variance=0
 i SeenTime'="" s Variance=DateVar+(SeenTime-LatestBkArTime)
 // build the row
 Set ^CacheTemp("TRAK",repid,$ZCVT(HOSPDesc,"U")_" "_$ZCVT(CTLOCDesc,"U")_" "_$ZCVT(RESDesc,"U")_" "_PAPMINo_ind)=$LB(HOSPRowId,CTLOCRowId,CTPCPRowId,ASDate,PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,HOSPDesc,APPTRowId,ctloccode,CTLOCDesc,RESDesc,ASSessStartTime,APPTArrivalTime,APPTSeenTime,SessTime,ArrivalTime,SeenTime,DateVar,LatestBkArTime,Variance)
 s ind=ind+1
 //fetch rows
 &sql(fetch ApptArrivalSeenByTime into :HOSPRowId,:CTLOCRowId,:CTPCPRowId,:ASDate,:PAPMINo,:PAPMIName,:PAPMIName2,:PAPMIName3,:HOSPDesc,:APPTRowId,:ctloccode,:CTLOCDesc,:RESDesc,:ASSessStartTime,:APPTArrivalTime,:APPTSeenTime,:SessTime,:ArrivalTime,:SeenTime,:DateVar)}

 &sql(close ApptArrivalSeenByTime)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK

FormatDates
 // Convert the dates to ODBC date format
 If ASDate Set ASDate=..ConvertDateToODBC(ASDate)
 Quit
  
FormatTimes
 // Convert the dates to ODBC date format
 If ASSessStartTime Set ASSessStartTime=..ConvertTimeToODBC(ASSessStartTime)
 If APPTArrivalTime Set APPTArrivalTime=..ConvertTimeToODBC(APPTArrivalTime)
 If APPTSeenTime Set APPTSeenTime=..ConvertTimeToODBC(APPTSeenTime)
 ;if LatestBkArTime set LatestBkArTime=..ConvertTimeToCache(LatestBkArTime)
 Quit
]]></Implementation>
</Method>

<Method name="ApptArriveSeenFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="ApptArriveSeen">
<Type>%Library.Query</Type>
<FormalSpec>DateFrom:%Date,DateTo:%Date,Hospital:%String,Location:%String,CareProvider:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="HOSPRowId:%Integer,CTLOCRowId:%Integer,CTPCPRowId:%String,ASDate:%Date,PAPMINo:%String(MAXLEN=255),PAPMIName:%String(MAXLEN=255),PAPMIName2:%String(MAXLEN=255),PAPMIName3:%String(MAXLEN=255),HOSPDesc:%String(MAXLEN=255),APPTRowId:%String,ctloccode:%String(MAXLEN=255),CTLOCDesc:%String(MAXLEN=255),RESDesc:%String,ASSessStartTime:%String,APPTArrivalTime:%String,APPTSeenTime:%String,SessTime:%Integer,ArrivalTime:%Integer,SeenTime:%Integer,DateVar:%Integer,LatestBkArTime:%Integer,Variance:%Integer"/>
</Query>
</Class>
</Export>
