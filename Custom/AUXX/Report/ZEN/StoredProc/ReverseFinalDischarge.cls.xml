<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.AUXX.Report.ZEN.StoredProc.ReverseFinalDischarge">
<ProcedureBlock>0</ProcedureBlock>
<Super>Report.Abstract</Super>
<TimeCreated>60037,42057.955865</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/AUXX/Report/ZEN/StoredProc/ReverseFinalDischarge.xml#1 $</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Report Name: Reverse Final Discharge <br>

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Report Code: AUXX.ATD0018 <br>

]]></Content>
</UDLText>

<Method name="ReverseFinalDischargeClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 
    //Close Monitor (if configured to capture stats)
 	i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="ReverseFinalDischargeExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,FromDate:%Library.Date,ToDate:%Library.Date,Hospital:%Library.String,Location:%Library.String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind, END, END2

 // Use $Increment to get the next node
 set repid=$I(^CacheTemp("TRAK"))
 
  //Start Monitor (if configured to capture stats)
 	s mon=..MonitorBegin()
 
 // Build data into ^CacheTemp("TRAK",ReportID)
 // e.g. Set ^CacheTemp("TRAK",ReportID,Index)=$LB(f1,f2,f3)
 new HOSPRowId,HOSPDesc,SIGNFRowId,SIGNFDesc
 new PAADMRowId,PAADMAdmNo,PAPMIRowId,PAPMIName,PAPMIName2,PAPMIName3
 new OrigDischargeDate,OrigDischargeTime,OrigDischargeUserName,OrigDischargeUserID
 new AmendDischargeDate,AmendDischargeTime,AmendDischargeUserID,AmendDischargeUserName
 new MRADMReasonForRevFinDischDR,RFDDesc,DateReversed,AUDDate,AUDTime,AUDRowIdReversal
 new AUDTable,AUDTableRowId,AUDRowIdOrigDischarge,AUDRowIdAmendDischarge
 new AUDRowIdOrigDischargeCount,AUDRowIdAmendDischargeCount,FLDParRef
 new PAPMINo,WARDID,WARDCode,WARDDesc,CTLOCRowId,CTLOCCode,CTLOCDesc
  	 
 Set (HOSPRowId,HOSPDesc,SIGNFRowId,SIGNFDesc,PAADMRowId,PAADMAdmNo,PAADMRowId,PAPMIRowId,PAPMIName,PAPMIName2,PAPMIName3,OrigDischargeDate,OrigDischargeTime,OrigDischargeUserName,OrigDischargeUserID,AmendDischargeDate,AmendDischargeTime,AmendDischargeUserID,AmendDischargeUserName,MRADMReasonForRevFinDischDR,RFDDesc,DateReversed,AUDDate,AUDTime,AUDRowIdReversal,AUDTable,AUDTableRowId,AUDRowIdOrigDischarge,AUDRowIdAmendDischarge,AUDRowIdOrigDischargeCount,AUDRowIdAmendDischargeCount,FLDParRef,PAPMINo,WARDID,WARDCode,WARDDesc,CTLOCRowId,CTLOCCode,CTLOCDesc) = ""
 
 set ind=1, END = 0, END2 = 0
 
 Set FromDate=..ConvertDateToCache(FromDate)
 Set ToDate=..ConvertDateToCache(ToDate)

 
 // Strip white space/control chars from blank HospitalID, CampusID variables
 
 set Hospital = $ZSTRIP(Hospital,"*WC")
 set Location = $ZSTRIP(Location,"*WC")
 
 f date=FromDate:1:ToDate d
 . s aud=0 f  s aud=$o(^AUD(0,"TableDate",$$ALPHAUP^SSUTIL4("PA_Adm"),date,aud)) q:aud=""  d
 . . s admid=$p($g(^AUD(aud)),"^",2)
 . . i $g(admid)'="" d
 . . . i $p($g(^PAADM(admid)),"^",2)="I" d
 . . . . s fld=0 f  s fld=$o(^AUD(aud,"FLD",fld)) q:fld=""  d
 . . . . . i $p($g(^AUD(aud,"FLD",fld)),"^")="PAADM_VisitStatus" d
 . . . . . . i $p($g(^AUD(aud,"FLD",fld)),"^",2)="D",$$CO5^at1728(aud_"||"_fld)="A" d
 . . . . . . . i Location'="",Hospital'="" d
 . . . . . . . . i (","_Location_",")[$p($g(^PAADM(admid)),"^",4),(","_Hospital_",")[$p($g(^PAADM(admid,2)),"^",85) d GetReversedDischarges
 . . . . . . . i Location="",Hospital'="" d
 . . . . . . . . i (","_Hospital_",")[$p($g(^PAADM(admid,2)),"^",85) d GetReversedDischarges
 . . . . . . . i Location'="",Hospital="" d
 . . . . . . . . i (","_Location_",")[$p($g(^PAADM(admid)),"^",4) d GetReversedDischarges
 . . . . . . . i Location="",Hospital="" d
 . . . . . . . . d GetReversedDischarges
 
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$LISTBUILD(0,repid,0)
 Quit $$$OK 
  
 
 //Get all discharge reversals
GetReversedDischarges
 s obj=##class(User.PAAdm).%OpenId(admid)
 i obj d
 . s PAPMINo=obj.PAADMPAPMIDR.PAPMINo
 . i obj.PAADMHospitalDR d
 . . s HOSPRowId=obj.PAADMHospitalDR.%Id()
 . . s HOSPDesc=obj.PAADMHospitalDR.HOSPDesc
 . i obj.PAADMDepCodeDR d
 . . i obj.PAADMDepCodeDR.CTLOCSignifFacilityDR d
 . . . s SIGNFRowId=obj.PAADMDepCodeDR.CTLOCSignifFacilityDR.%Id()
 . . . s SIGNFDesc=obj.PAADMDepCodeDR.CTLOCSignifFacilityDR.SIGNFDesc
 . s PAADMRowId=admid
 . s PAADMAdmNo=obj.PAADMADMNo
 . s PAPMIRowId=obj.PAADMPAPMIDR.%Id()
 . s PAPMIName=obj.PAADMPAPMIDR.PAPMIName
 . s PAPMIName2=obj.PAADMPAPMIDR.PAPMIName2
 . s PAPMIName3=obj.PAADMPAPMIDR.PAPMIName3
 . s AUDRowIdReversal=aud
 . s AUDTableRowId=$p($g(^AUD(aud)),"^")
 . s AUDDate=date
 . s AUDTime=$p($g(^AUD(aud)),"^",5)
 . i obj.PAADMCurrentWardDR d
 . . s WARDID=obj.PAADMCurrentWardDR.%Id()
 . . s WARDCode=obj.PAADMCurrentWardDR.WARDCode
 . . s WARDDesc=obj.PAADMCurrentWardDR.WARDDesc
 . i obj.PAADMDepCodeDR d
 . . s CTLOCRowId=obj.PAADMDepCodeDR.%Id()
 . . s CTLOCCode=obj.PAADMDepCodeDR.CTLOCCode
 . . s CTLOCDesc=obj.PAADMDepCodeDR.CTLOCDesc
 . d obj.%Close() 
 . ;
 . ; Get Previous discharge details
 . s (AUDRowIdOrigDischarge,OrigDischargeDate,OrigDischargeTime,OrigDischargeUserID,OrigDischargeUserName,RFDDesc)=""
 . s pass=0
 . s mradm=$p($g(^PAADM(admid)),"^",61)
 . s admdate=$p($g(^PAADM(admid)),"^",6) 
 . s d=admdate-1 f  s d=$o(^AUD(0,"TableRow",$$ALPHAUP^SSUTIL4("PA_Adm"),admid,d)) q:d=""  d
 . . q:d>date
 . . s a1=aud f  s a1=$o(^AUD(0,"TableRow",$$ALPHAUP^SSUTIL4("PA_Adm"),admid,d,a1),-1) q:a1=""  d
 . . . q:pass=1 
 . . . s f1=0 f  s f1=$o(^AUD(a1,"FLD",f1)) q:f1=""  d
 . . . . i $p($g(^AUD(a1,"FLD",f1)),"^")="PAADM_VisitStatus" d
 . . . . . i $p($g(^AUD(a1,"FLD",f1)),"^",2)="A",$$CO5^at1728(a1_"||"_f1)="D" d
 . . . . . . s pass=1
 . . . . i $p($g(^AUD(a1,"FLD",f1)),"^")="PAADM_DischgDate" s OrigDischargeDate=$$CO5^at1728(a1_"||"_f1)
 . . . . i $p($g(^AUD(a1,"FLD",f1)),"^")="PAADM_DischgTime" s OrigDischargeTime=$$CO5^at1728(a1_"||"_f1)
 . . . . s OrigDischargeUserID=$p($g(^AUD(a1)),"^",7)
 . . . . i $g(OrigDischargeUserID)'="" s OrigDischargeUserName=$p($g(^SSU("SSUSR",OrigDischargeUserID)),"^",2),OrigDischargeUserID=$p($g(^SSU("SSUSR",OrigDischargeUserID)),"^")
 . . s a2=aud f  s a2=$o(^AUD(0,"TableRow",$$ALPHAUP^SSUTIL4("MR_Adm"),mradm,d,a2),-1) q:a2=""  d
 . . . s f1=0 f  s f1=$o(^AUD(a2,"FLD",f1)) q:f1=""  d
 . . . . i $p($g(^AUD(a2,"FLD",f1)),"^")="MRADM_ReasonForRevFinDisch_DR",$p($g(^AUD(a2,"FLD",f1)),"^",2)="" d
 . . . . . i (AUDTime+10)>=$p($g(^AUD(a2)),"^",5),(AUDTime-10)<=$p($g(^AUD(a2)),"^",5) d
 . . . . . . s RFDRowId=$$CO5^at1728(a2_"||"_f1)
 . . . . . . i $g(RFDRowId)'="" s RFDDesc=$p($g(^PAC("RFD",RFDRowId)),"^",2)
 . . i pass=0 s (AUDRowIdOrigDischarge,OrigDischargeDate,OrigDischargeTime,OrigDischargeUserID,OrigDischargeUserName,RFDDesc)=""
 . . ;
 . . ; Get New discharge details
 . . s (AUDRowIdAmendDischarge,AmendDischargeDate,AmendDischargeTime,AmendDischargeUserID,AmendDischargeUserName)=""
 . . s a1=aud f  s a1=$o(^AUD(0,"TableRow",$$ALPHAUP^SSUTIL4("PA_Adm"),admid,d,a1)) q:a1=""  d
 . . . s f1=0 f  s f1=$o(^AUD(a1,"FLD",f1)) q:f1=""  d
 . . . . i $p($g(^AUD(a1,"FLD",f1)),"^")="PAADM_VisitStatus" d
 . . . . . i $p($g(^AUD(a1,"FLD",f1)),"^",2)="A",$$CO5^at1728(a1_"||"_f1)="D" d
 . . . . . . s pass=1
 . . . . i $p($g(^AUD(a1,"FLD",f1)),"^")="PAADM_DischgDate" s AmendDischargeDate=$$CO5^at1728(a1_"||"_f1)
 . . . . i $p($g(^AUD(a1,"FLD",f1)),"^")="PAADM_DischgTime" s AmendDischargeTime=$$CO5^at1728(a1_"||"_f1)
 . . . . s AmendDischargeUserID=$p($g(^AUD(a1)),"^",7)
 . . . . i $g(AmendDischargeUserID)'="" s AmendDischargeUserName=$p($g(^SSU("SSUSR",AmendDischargeUserID)),"^",2),AmendDischargeUserID=$p($g(^SSU("SSUSR",AmendDischargeUserID)),"^")

 /*
 . s f1=0 f  s f1=$o(^AUD(aud,"FLD",f1)) q:f1=""  d
 . . i $p($g(^AUD(aud,"FLD",f1)),"^")="PAADM_DischgDate" s AmendDischargeDate=$$CO5^at1728(aud_"||"_f1)
 . . i $p($g(^AUD(aud,"FLD",f1)),"^")="PAADM_DischgTime" s AmendDischargeTime=$$CO5^at1728(aud_"||"_f1)
 . . s AmendDischargeUserID=$p($g(^AUD(aud)),"^",7)
 . . i $g(AmendDischargeUserID)'="" s AmendDischargeUserName=$p($g(^SSU("SSUSR",AmendDischargeUserID)),"^",2),AmendDischargeUserID=$p($g(^SSU("SSUSR",AmendDischargeUserID)),"^")
 */
 d FormatDates
 d FormatTimes
 d BuildRow
 q

 /*
 &sql(declare ReverseFinalDischarge cursor for
 select distinct
 	%EXACT(paadm_papmi_dr->papmi_no),
    paadm_currentward_dr->WARD_LocationDR->CTLOC_Hospital_DR->HOSP_RowId,
    paadm_currentward_dr->WARD_LocationDR->CTLOC_Hospital_DR->HOSP_Desc,
    paadm_currentward_dr->WARD_LocationDR->CTLOC_SignifFacility_DR->SIGNF_RowId,
    paadm_currentward_dr->WARD_LocationDR->CTLOC_SignifFacility_DR->SIGNF_Desc,
    paadm_rowid,
    paadm_admno,
    paadm_papmi_dr->papmi_rowid,
    paadm_papmi_dr->papmi_name,
    paadm_papmi_dr->papmi_name2,
    paadm_papmi_dr->papmi_name3,
    aud_rowid,
    aud_tablerowid,
    aud_date,
    aud_time,
    PAADM_CurrentWard_DR,
	PAADM_CurrentWard_DR->WARD_Code,
	PAADM_CurrentWard_DR->WARD_Desc,
	PAADM_DepCode_DR,
	PAADM_DepCode_DR->CTLOC_Code,
	PAADM_DepCode_DR->CTLOC_Desc
FROM SQLUSER.ss_audittrail, SQLUSER.ss_audittrailfields, SQLUSER.pa_adm
WHERE aud_rowid = fld_parref
AND aud_tablerowid = paadm_rowid
AND paadm_type = 'I'
AND aud_table = 'PA_Adm'
AND fld_fieldno = 'PAADM_VisitStatus'
AND fld_oldvalue = 'D'
AND fld_value = 'A'
AND (({fn CONCAT( ',', {fn CONCAT((:Hospital),',')})} [ {fn CONCAT( ',', {fn CONCAT((paadm_currentward_dr->WARD_LocationDR->ctloc_hospital_dr->hosp_rowid),',')})}) OR (:Hospital IS NULL))
AND (({fn CONCAT( ',', {fn CONCAT((:Location),',')})} [ {fn CONCAT( ',', {fn CONCAT((PAADM_DepCode_DR->ctloc_rowid),',')})}) OR (:Location IS NULL)) 
)
 		
 &sql(open ReverseFinalDischarge)
 
 do FetchReversedDischarges
 
 while END = 0
 {
	 do CheckRecord
	 do FetchReversedDischarges	 
 }
 
 &sql(close ReverseFinalDischarge)
 quit


CheckRecord
 if AUDDate >= FromDate
	{ if AUDDate <= ToDate
	  {
		 set (AUDRowIdOrigDischarge,OrigDischargeDate,OrigDischargeTime,OrigDischargeUserID,OrigDischargeUserName,RFDDesc)=""
	 	 set AUDRowIdOrigDischargeCount = 0
	 	 do GetPrevDischargeCheck
	 	 set (AUDRowIdAmendDischarge,AmendDischargeDate,AmendDischargeTime,AmendDischargeUserID,AmendDischargeUserName)=""
	 	 set AUDRowIdAmendDischargeCount = 0
	 	 do GetNewDischargesCheck
	 	 do FormatDates
	 	 do FormatTimes
	 	 do BuildRow
	 }
	}
	Quit


FetchReversedDischarges
 //fetch rows into cursor
  &sql(fetch ReverseFinalDischarge 
 		INTO 
 		:PAPMINo,:HOSPRowId,:HOSPDesc,:SIGNFRowId,:SIGNFDesc,
     	:PAADMRowId,:PAADMAdmNo,:PAPMIRowId,:PAPMIName,:PAPMIName2,
 	 	:PAPMIName3,:AUDRowIdReversal,:AUDTableRowId,:AUDDate,
 	 	:AUDTime,:WARDID,:WARDCode,:WARDDesc,:CTLOCRowId,
 	 	:CTLOCCode,:CTLOCDesc
 	 	)

 if SQLCODE '= 0 set END = 1

 Quit

 //Get details of discharge that was reversed
GetPrevDischargeCheck
  &sql(	select count(aud_rowid), max(aud_rowid)
		INTO :AUDRowIdOrigDischargeCount, :AUDRowIdOrigDischarge 
		FROM SQLUSER.ss_audittrail, SQLUSER.ss_audittrailfields
		where aud_rowid = fld_parref
		and aud_tablerowid = :AUDTableRowId
		and aud_table = 'PA_Adm'
		and fld_fieldno = 'PAADM_VisitStatus'
		and fld_oldvalue = 'A'
		and fld_value = 'D'
		and aud_rowid < :AUDRowIdReversal)
 
 if AUDRowIdOrigDischargeCount '= 0
 {
	 do GetOriginalDischDate
	 do GetOriginalDischTime
	 do GetOrigUserDetails
	 do GetOriginalDischargeReason
 }
 
 quit

GetOriginalDischDate
 &sql(select FLD_Value
 			INTO :OrigDischargeDate
 			FROM SQLUSER.ss_audittrailfields
 			WHERE FLD_ParRef = :AUDRowIdOrigDischarge
 			and FLD_FieldNo = 'PAADM_DischgDate'
      )
  Quit

GetOriginalDischTime
 &sql(select FLD_Value
 			INTO :OrigDischargeTime
 			FROM SQLUSER.ss_audittrailfields
 			WHERE FLD_ParRef = :AUDRowIdOrigDischarge
 			and FLD_FieldNo = 'PAADM_DischgTime'
      )

 Quit
 
GetOrigUserDetails
  &sql(select AUD_User_DR->SSUSR_Initials,
  			AUD_User_DR->SSUSR_Name
 			INTO :OrigDischargeUserID,:OrigDischargeUserName
 			FROM SQLUSER.ss_audittrail
 			WHERE AUD_RowId = :AUDRowIdOrigDischarge
 		)

 Quit
 
GetOriginalDischargeReason
  &sql(select RFD_Desc
  			INTO :RFDDesc
 			from SQLUSER.PAC_ReasonForReverseFinDisch
            where RFD_RowID = (
            	select FLD_Value
            	FROM SQLUSER.ss_audittrailfields, SQLUSER.ss_audittrail
            	where FLD_ParRef = AUD_RowID
            	and AUD_Date = :AUDDate
            	and AUD_Time between (:AUDTime-10) and (:AUDTime+10)
            	and FLD_FieldNo = 'MRADM_ReasonForRevFinDisch_DR'
            	and aud_tablerowid = (
                	select paadm_mainmradm_dr
                	from SQLUSER.pa_adm
                	where paadm_rowid = :PAADMRowId
                	)
            	)
 		)
 		
 
 Quit

 //Get all new discharges for discharges previously reversed
GetNewDischargesCheck
  &sql(	select count(aud_rowid), min(aud_rowid)
		INTO :AUDRowIdAmendDischargeCount, :AUDRowIdAmendDischarge 
		FROM SQLUSER.ss_audittrail, SQLUSER.ss_audittrailfields
		where aud_rowid = fld_parref
		and aud_tablerowid = :AUDTableRowId
		and aud_table = 'PA_Adm'
		and fld_fieldno = 'PAADM_VisitStatus'
		and fld_oldvalue = 'A'
		and fld_value = 'D'
		and aud_rowid > :AUDRowIdReversal)
 
 if AUDRowIdAmendDischargeCount '= 0
 {
	 do GetNewDischDate
	 do GetNewDischTime
	 do GetNewUserDetails
 }
 
 quit

 
GetNewDischDate
 &sql(select FLD_Value
 			INTO :AmendDischargeDate
 			FROM SQLUSER.ss_audittrailfields
 			WHERE FLD_ParRef = :AUDRowIdAmendDischarge
 			and FLD_FieldNo = 'PAADM_DischgDate'
      )

 Quit


GetNewDischTime
 &sql(select FLD_Value
 			INTO :AmendDischargeTime
 			FROM SQLUSER.ss_audittrailfields
 			WHERE FLD_ParRef = :AUDRowIdAmendDischarge
 			and FLD_FieldNo = 'PAADM_DischgTime'
      )

 Quit

GetNewUserDetails
  &sql(select AUD_User_DR->SSUSR_Initials,
  			AUD_User_DR->SSUSR_Name
 			INTO :AmendDischargeUserID,:AmendDischargeUserName
 			FROM SQLUSER.ss_audittrail
 			WHERE AUD_RowId = :AUDRowIdAmendDischarge
 		)

 Quit
 */
FormatDates
 // Convert the dates to ODBC date format
 If OrigDischargeDate '= "" Set OrigDischargeDate=..ConvertDateToODBC(OrigDischargeDate)
 If AmendDischargeDate '= "" Set AmendDischargeDate=..ConvertDateToODBC(AmendDischargeDate)
 If AUDDate '= "" Set AUDDate=..ConvertDateToODBC(AUDDate)
 
 Quit 

FormatTimes
 // Convert the times to ODBC time format..O
 If OrigDischargeTime Set OrigDischargeTime=..ConvertTimeToODBC(OrigDischargeTime)
 If AmendDischargeTime Set AmendDischargeTime=..ConvertTimeToODBC(AmendDischargeTime)
 If AUDTime Set AUDTime=..ConvertTimeToODBC(AUDTime)

 Quit

BuildRow
 // build the row
 Set ^CacheTemp("TRAK",repid,$ZCVT(HOSPDesc,"U")_" "_$ZCVT(CTLOCDesc,"U")_" "_OrigDischargeDate_" "_$ZCVT(PAPMIName,"U")_" "_$ZCVT(PAPMIName2,"U")_" "_$ZCVT(PAPMIName3,"U")_ind)=$LISTBUILD(HOSPRowId,HOSPDesc,SIGNFRowId,SIGNFDesc,PAADMRowId,PAADMAdmNo,PAPMIName,PAPMIName2,PAPMIName3,AUDDate,OrigDischargeDate,OrigDischargeTime,OrigDischargeUserID,OrigDischargeUserName,AmendDischargeDate,AmendDischargeTime,AmendDischargeUserID,AmendDischargeUserName,RFDDesc,PAPMINo,WARDID,WARDCode,WARDDesc,CTLOCRowId,CTLOCCode,CTLOCDesc)
 Set ind=ind+1
 quit
]]></Implementation>
</Method>

<Method name="ReverseFinalDischargeFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="ReverseFinalDischarge">
<Type>%Library.Query</Type>
<FormalSpec>FromDate:%Library.Date,ToDate:%Library.Date,Hospital:%Library.String,Location:%Library.String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="HOSPRowId:%String,HOSPDesc:%String,SIGNFRowId:%String,SIGNFDesc:%String,PAADMRowId:%String,PAADMAdmNo:%String,PAPMIName:%String,PAPMIName2:%String,PAPMIName3:%String,AUDDate:%Date,OrigDischargeDate:%Date,OrigDischargeTime:%String,OrigDischargeUserID:%String,OrigDischargeUserName:%String,AmendDischargeDate:%Date,AmendDischargeTime:%String,AmendDischargeUserID:%String,AmendDischargeUserName:%String,RFDDesc:%String,PAPMINo:%Library.String,WARDID:%Library.String,WARDCode:%Library.String,WARDDesc:%Library.String,CTLOCRowId:%Library.String,CTLOCCode:%Library.String,CTLOCDesc:%Library.String"/>
</Query>
</Class>
</Export>
