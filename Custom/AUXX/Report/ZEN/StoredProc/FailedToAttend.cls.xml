<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.AUXX.Report.ZEN.StoredProc.FailedToAttend">
<ProcedureBlock>0</ProcedureBlock>
<Super>Report.Abstract</Super>
<TimeCreated>59388,55236.125</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/AUXX/Report/ZEN/StoredProc/FailedToAttend.xml#1 $</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Report Name: Failed To Attend <br>

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Report Code: AUXX.BKG0004 <br>

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Logauxx Number: 72218<br>

]]></Content>
</UDLText>

<Method name="FailedToAttendClose">
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 
 //Close Monitor (if configured to capture stats)
 	i mon Do ..MonitorEnd(mon)
 
 Kill ^CacheTemp("TRAK",repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="FailedToAttendExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,DateFrom:%Date,DateTo:%Date,Hospital:%String,Location:%String,CareProvider:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp("TRAK"))
 
 //If Performance Stats Flag is checked in Config Mgr store initial values for performance monitor
 //Start Monitor (if configured to capture stats)
 	s mon=..MonitorBegin()
 	
 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 n APPTRowId,PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,REFPRIDesc,RNSDesc,RESDesc,ASDate,RESCTLOCDR,CTLOCCode,CTLOCDesc,HospRowId,HospCode,HospDesc,ASSessStartTime,SERRowId,SERDesc
 s (APPTRowId,PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,REFPRIDesc,RNSDesc,RESDesc,ASDate,CTLOCCode,CTLOCDesc,HospCode,HospDesc,ASSessStartTime,SERDesc)=""
 s (RESCTLOCDR,HospRowId,SERRowId)=0
 s ind=1
 
 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)
 
 // Strip white space/control chars from blank variables
 i $g(Hospital)'="" s Hospital=$ZSTRIP(Hospital,"*WC")
 i $g(Location)'="" s Location=$ZSTRIP(Location,"*WC")
 i $g(CareProvider)'="" s CareProvider=$ZSTRIP(CareProvider,"*WC")
 
 &sql(declare GetFTAppointments cursor for
SELECT
%EXACT(APPT_RowId),
APPT_PAPMI_DR->PAPMI_No,
APPT_PAPMI_DR->PAPMI_Name,
APPT_PAPMI_DR->PAPMI_Name2,
APPT_PAPMI_DR->PAPMI_Name3,
APPT_Adm_DR->PAADM_ReferralPriority_DR->REFPRI_Desc,
APPT_ReasonNotShow->RNS_Desc,
RES_Desc,
AS_Date,
RES_CTLOC_DR,
RES_CTLOC_DR->CTLOC_Code,
RES_CTLOC_DR->CTLOC_Desc,
RES_CTLOC_DR->CTLOC_Hospital_DR->Hosp_RowId,
RES_CTLOC_DR->CTLOC_Hospital_DR->Hosp_Code,
RES_CTLOC_DR->CTLOC_Hospital_DR->Hosp_Desc,
AS_SessStartTime,
APPT_RBCServ_DR->Ser_RowId,
APPT_RBCServ_DR->Ser_Desc
FROM sqluser.RB_Appointment, sqluser.RB_Resource, sqluser.RB_ApptSchedule 
WHERE RES_RowId = AS_RES_ParRef 
AND AS_RowId = APPT_AS_ParRef  
AND AS_Date between :DateFrom and :DateTo  
AND APPT_Status = 'N' 
AND (({fn CONCAT( ',', {fn CONCAT((:Hospital),',')})} [ {fn CONCAT( ',', {fn CONCAT((RES_CTLOC_DR->CTLOC_Hospital_DR->HOSP_RowId),',')})}) OR (:Hospital IS NULL)) 
AND (({fn CONCAT( ',', {fn CONCAT((:Location),',')})} [ {fn CONCAT( ',', {fn CONCAT((RES_CTLOC_DR->CTLOC_RowId),',')})}) OR (:Location IS NULL)) 
AND (({fn CONCAT( ',', {fn CONCAT((:CareProvider),',')})} [ {fn CONCAT( ',', {fn CONCAT((RES_CTPCP_DR->CTPCP_RowId),',')})}) OR (:CareProvider IS NULL))
)
  &sql(open GetFTAppointments)


 //fetch first row
 &sql(fetch GetFTAppointments into :APPTRowId,:PAPMINo,:PAPMIName,:PAPMIName2,:PAPMIName3,:REFPRIDesc,:RNSDesc,:RESDesc,:ASDate,:RESCTLOCDR,:CTLOCCode,:CTLOCDesc,:HospRowId,:HospCode,:HospDesc,:ASSessStartTime,:SERRowId,:SERDesc)

 while 'SQLCODE{

 //s RNSDesc=##class(websys.Conversions).ListLogicalToHtml(RNSDesc,$char(10,13))


 d FormatDates
 d FormatTimes
 
 // build the row
 Set ^CacheTemp("TRAK",repid,$ZCVT(HospDesc,"U")_" "_$ZCVT(CTLOCDesc,"U")_" "_$ZCVT(RESDesc,"U")_" "_ASDate_" "_ASSessStartTime_ind)=$LB(APPTRowId,PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,REFPRIDesc,RNSDesc,RESDesc,ASDate,RESCTLOCDR,CTLOCCode,CTLOCDesc,HospRowId,HospCode,HospDesc,ASSessStartTime,SERRowId,SERDesc)
 s ind=ind+1
 //fetch rows
 &sql(fetch GetFTAppointments into :APPTRowId,:PAPMINo,:PAPMIName,:PAPMIName2,:PAPMIName3,:REFPRIDesc,:RNSDesc,:RESDesc,:ASDate,:RESCTLOCDR,:CTLOCCode,:CTLOCDesc,:HospRowId,:HospCode,:HospDesc,:ASSessStartTime,:SERRowId,:SERDesc)}

 &sql(close GetFTAppointments)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

  Quit $$$OK

FormatDates
 // Convert the dates to ODBC date format
 If ASDate Set ASDate=..ConvertDateToODBC(ASDate)
 Quit

FormatTimes
 // Convert the times to ODBC time format
 If ASSessStartTime Set ASSessStartTime=..ConvertTimeToODBC(ASSessStartTime)
 Quit
]]></Implementation>
</Method>

<Method name="FailedToAttendFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="FailedToAttend">
<Type>%Library.Query</Type>
<FormalSpec>DateFrom:%Date,DateTo:%Date,Hospital:%String,Location:%String,CareProvider:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="APPTRowId:%String(MAXLEN=255),PAPMINo:%String(MAXLEN=255),PAPMIName:%String(MAXLEN=255),PAPMIName2:%String(MAXLEN=255),PAPMIName3:%String(MAXLEN=255),REFPRIDesc:%String,RNSDesc:%String(MAXLEN=999),RESDesc:%String(MAXLEN=255),ASDate:%Date,RESCTLOCDR:%Integer,CTLOCCode:%String(MAXLEN=255),CTLOCDesc:%String(MAXLEN=255),HospRowId:%Integer,HospCode:%String(MAXLEN=255),HospDesc:%String(MAXLEN=255),ASSessStartTime:%String(MAXLEN=255),SERRowId:%Integer,SERDesc:%String(MAXLEN=255)"/>
</Query>
</Class>
</Export>
