<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.AUXX.Report.ZEN.StoredProc.SCTTPsychosocial">
<Description>
Report Name: Confidential Referral Coversheet
Report Code: AUXX.SCTT0001
TRC Number: 152012</Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>Report.Abstract</Super>
<TimeCreated>62970,48071.923811</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/AUXX/Report/ZEN/StoredProc/SCTTPsychosocial.xml#1 $</Default>
</Parameter>

<Method name="PsychClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	// Clean up by purging the temporary node in ^CacheTemp global
	New repid
	Set repid=$LIST(QHandle,2)

	//Start Monitor (if configured to capture stats)
	i mon Do ..MonitorEnd(mon)

	Kill ^CacheTemp("TRAK",repid)

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="PsychExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,EpisodeID:%Library.String,ReferralID:%Library.String,ID:%Library.String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	// Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp("TRAK") global. 
	// We use ^CacheTemp global because CACHETEMP is a memory resident database
	New repid,ind

	// Use $Increment to get the next node and clean up
	Set repid=$Increment(^CacheTemp("TRAK"))
	
	//Start Monitor (if configured to capture stats)
	s mon=..MonitorBegin()
	
	i $g(ReferralID)'="" s ReferralID=$zstrip(ReferralID,"*CW")
	i $g(ID)'="" s ID=$zstrip(ID,"*CW")
	
	
	s (ClientName,DOB,Sex,UR,qid,Available,AvailableCode,Comments,Tired,Nervous,Calm,Hopeless,Restless,Sit,Depressed,Effort,Sad,Worthless,K10,ReferralTo)=""
	
	s adm=EpisodeID
	
	s PageTitle="Profile: Psychosocial"
	s PageDesc="To assist workers/practitioners to screen for consumer's psychosocial needs."_$c(13,10)_$c(13,10)_$c(13,10)_$c(13,10)_$c(13,10)
	s PageSideText="Psychosocial"
	i adm {
		s pat=$p($g(^PAADM(adm)),"^")

		s patobj=##class(User.PAPatMas).%OpenId(pat)
		i patobj {
			s ClientName=patobj.PAPMIName_", "_patobj.PAPMIName2
			s DOB=patobj.PAPMIDOB
			i DOB s DOB=$zd(DOB,4,,4)
			s Sex=patobj.PAPMISexDR.CTSEXDesc
			s UR=patobj.PAPMINo
			k patobj
		}
		
		i ReferralID'="" {
			s quescode=0
			f {
				s quescode=$o(^PA("DISSUM",ReferralID,"DET",0,"QuestCode1",quescode))
				q:quescode=""
				s quesid=0
				f {
					s quesid=$o(^PA("DISSUM",ReferralID,"DET",0,"QuestCode1",quescode,quesid))
					q:quesid=""
					i quescode="QAUXXSCTTPS" s qid=quesid
				}
			}
		} else {
			s qid=ID
		}
		
		i qid {
			s qobj=##class(questionnaire.QAUXXSCTTPS).%OpenId(qid)
			i qobj {
				s AvailableCode=qobj.Q01
				s Available=##class(Custom.AUXX.Report.ZEN.StoredProc.SCTTReport).GetQuesAnswerDesc("AUXXSCTTPS","01",AvailableCode)
				s Comments=..GetTextArea(qobj,"02")
				s Comments=" Comment on personal and social support, including social isolation,  family and personal relationships and friendship groups "_$c(13,10)_Comments_$c(13,10)_$c(13,10)_$c(13,10)

				s Tired=qobj.Q03
				s Nervous=qobj.Q04
				s Calm=qobj.Q05
				s Hopeless=qobj.Q06
				s Restless=qobj.Q07
				s Sit=qobj.Q08
				s Depressed=qobj.Q09
				s Effort=qobj.Q10
				s Sad=qobj.Q11
				s Worthless=qobj.Q12
				s K10=qobj.Q13
				s ReferralTo=..GetTextArea(qobj,"14")
				s ReferralTo=" Referral Recommended To: "_$c(13,10)_ReferralTo_" "_$c(13,10)_$c(13,10)
				
				k qobj
				s ind=$i(ind)
				s ^CacheTemp("TRAK",repid,ind)=$lb("P",PageTitle,PageDesc,PageSideText,ClientName,DOB,Sex,UR,qid,Available,AvailableCode,Comments,Tired,Nervous,Calm,Hopeless,Restless,Sit,Depressed,Effort,Sad,Worthless,K10,ReferralTo)
			}
		}
	}

	// Build QHandle (AtEnd,ReportID,Index)
	Set QHandle=$LISTBUILD(0,repid,0)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="PsychFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the 
^CacheTemp("TRAK" global and return this row to the Report writer</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	// This fetch method should never have to change. 
	// repid - Report ID
	// ind   - sequence index which represents each row
	New repid,ind

	// Restore QHandle
	Set AtEnd=$LI(QHandle,1)
	Set repid=$LI(QHandle,2)
	Set ind=$LI(QHandle,3)

	Set ind=$order(^CacheTemp("TRAK",repid,ind))
	If ind="" {	// if there are no more rows, finish fetching
		Set AtEnd=1
		Set Row=""
	} else {	// fetch row
		Set Row=^CacheTemp("TRAK",repid,ind)
	}

	// Save QHandle
	Set QHandle=$lb(AtEnd,repid,ind)
	Quit $$$OK
]]></Implementation>
</Method>

<Query name="Psych">
<Description>
This is the Stored Procedure Template. For Sample use only.
It expects one parameter of type integer and will return 4 fields:
Field1 - Integer
Field2 - String
Field3 - Date
Field4 - Time</Description>
<Type>%Library.Query</Type>
<FormalSpec>EpisodeID:%Library.String,ReferralID:%Library.String,ID:%Library.String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="FormCode:%String,PageTitle:%String,PageDesc:%String,PageSideText:%String,ClientName:%String,DOB:%String,Sex:%String,UR:%String,qid:%String,Available:%String,AvailableCode:%String,Comments:%String,Tired:%String,Nervous:%String,Calm:%String,Hopeless:%String,Restless:%String,Sit:%String,Depressed:%String,Effort:%String,Sad:%String,Worthless:%String,K10:%String,ReferralTo:%String"/>
</Query>

<Method name="GetTextArea">
<ClassMethod>1</ClassMethod>
<FormalSpec>obj:%CacheObject,num:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s text=""
	f z=1:1:$METHOD($PROPERTY(obj,"Q"_num),"Count") {
		i text'="" s text=text_$c(13,10)_$METHOD($PROPERTY(obj,"Q"_num),"GetAt",z)
		i text="" s text=$METHOD($PROPERTY(obj,"Q"_num),"GetAt",z)
	}
	q text
]]></Implementation>
</Method>
</Class>
</Export>
