<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARHCUS83AwaitingTheatre">
<Description>
Awaiting Theatre</Description>
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>61622,53965.929275</TimeCreated>

<Method name="AwaitingTheatreClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="AwaitingTheatreExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 k ^zbernard	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 n PAPERAgeYr,PAADMAdmDate,PAPMINo,PAPMIName,PAPMIName2,PAADMAdmTime,ROOMDesc,BEDCode,PAPERDob,CTSEXDesc,ROOMCode,HOSPDesc,HOSPRowId,WARDDesc, PAADMType,PAADMHospChaplainVisitReq,PAADMChaplainName,PAADMRefOrgAddress,PAADMChaplainPhone,PAADMChaplainChurchAddress,PAADMDateHCPreceived 
 s (PAPERAgeYr,HOSPRowID)=0
 s (PAADMAdmDate,PAPMINo,PAPMIName,PAPMIName2,PAADMAdmTime,ROOMDesc,BEDCode,PAPERDob,CTSEXDesc,ROOMCode,HOSPDesc,WARDDesc,PAADMType,PAADMHospChaplainVisitReq,PAADMChaplainName,PAADMRefOrgAddress,PAADMChaplainPhone,PAADMChaplainChurchAddress,PAADMDateHCPreceived)=""
 
  
 s ind=1
 
 &sql(declare AwaitingTheatre cursor for 

SELECT
        PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_AgeYr,
        PAADM_AdmDate,
        PAADM_PAPMI_DR->PAPMI_No,
        PAADM_PAPMI_DR->PAPMI_Name,
        PAADM_PAPMI_DR->PAPMI_Name2,
        PAADM_AdmTime,
        PAADM_CurrentRoom_DR->ROOM_Desc,
        PAADM_CurrentBed_DR->BED_Code,
        PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_Dob,
        PAADM_PAPMI_DR->PAPMI_Sex_DR->CTSEX_Desc,
        PAADM_CurrentRoom_DR->ROOM_Code,
        PAADM_Hospital_DR->HOSP_Desc,
        PAADM_Hospital_DR->HOSP_RowId,
        PAADM_CurrentWard_DR->WARD_Desc,
        PAADM_Type,
        PAADM_HospChaplainVisitReq,
        PAADM_ChaplainName,
        substr(PAADM_RefOrgAddress,3),
        PAADM_ChaplainPhone,
        substr(PAADM_ChaplainChurchAddress,3),
        PAADM_DateHCPreceived
 FROM   SQLUser.PA_Adm
 WHERE  PAADM_Hospital_DR=:Hospital
        AND PA_Adm.PAADM_Type='I'
        AND PA_Adm.PAADM_HospChaplainVisitReq='Y'
 )
 
 &sql(open AwaitingTheatre)

  //fetch first row 
 &sql(fetch AwaitingTheatre into :PAPERAgeYr,:PAADMAdmDate,:PAPMINo,:PAPMIName,:PAPMIName2,:PAADMAdmTime,:ROOMDesc,:BEDCode,:PAPERDob,:CTSEXDesc,:ROOMCode,:HOSPDesc,:HOSPRowId,:WARDDesc,:PAADMType,:PAADMHospChaplainVisitReq,:PAADMChaplainName,:PAADMRefOrgAddress,:PAADMChaplainPhone,:PAADMChaplainChurchAddress,:PAADMDateHCPreceived 
 )

 while 'SQLCODE{
 
 d FormatDates
 d FormatTimes
 //s PAADMChaplainChurchAddress=$zstrip(PAADMChaplainChurchAddress,"*C")
 //s PAADMRefOrgAddress=$zstrip(PAADMRefOrgAddress,"*C")
 // build the row
 Set ^CacheTemp(repid,ind)=$LB(PAPERAgeYr,PAADMAdmDate,PAPMINo,PAPMIName,PAPMIName2,PAADMAdmTime,ROOMDesc,BEDCode,PAPERDob,CTSEXDesc,ROOMCode,HOSPDesc,HOSPRowId,WARDDesc,PAADMType,PAADMHospChaplainVisitReq,PAADMChaplainName,PAADMRefOrgAddress,PAADMChaplainPhone,PAADMChaplainChurchAddress,PAADMDateHCPreceived)
 s ind=ind+1
 //fetch rows
 &sql(fetch AwaitingTheatre into :PAPERAgeYr,:PAADMAdmDate,:PAPMINo,:PAPMIName,:PAPMIName2,:PAADMAdmTime,:ROOMDesc,:BEDCode,:PAPERDob,:CTSEXDesc,:ROOMCode,:HOSPDesc,:HOSPRowId,:WARDDesc,:PAADMType,:PAADMHospChaplainVisitReq,:PAADMChaplainName,:PAADMRefOrgAddress,:PAADMChaplainPhone,:PAADMChaplainChurchAddress,:PAADMDateHCPreceived)
 }

 &sql(close AwaitingTheatre)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK


FormatDates
 // Convert the dates to ODBC date format
 If PAADMAdmDate Set PAADMAdmDate=$ZD(PAADMAdmDate,3)
 If PAPERDob Set PAPERDob=$ZD(PAPERDob,3)
 If PAADMDateHCPreceived Set PAADMDateHCPreceived=$ZD(PAADMDateHCPreceived,3)
 Quit

FormatTimes
 // Convert the times to ODBC time format
 If PAADMAdmTime Set PAADMAdmTime=$ZT(PAADMAdmTime,1)
 Quit
]]></Implementation>
</Method>

<Method name="AwaitingTheatreFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)

 Quit $$$OK
]]></Implementation>
</Method>

<Query name="AwaitingTheatre">
<Description>
GHA List reports Stored Procedure
It expects 2 parameter of type date and will return a list of records:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time</Description>
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAPERAgeYr:%Integer,PAADMAdmDate:%Date,PAPMINo:%String(MAXLEN=255),PAPMIName:%String(MAXLEN=255),PAPMIName2:%String(MAXLEN=255),PAADMAdmTime:%Time,ROOMDesc:%String(MAXLEN=255),BEDCode:%String(MAXLEN=255),PAPERDob:%Date,CTSEXDesc:%String(MAXLEN=255),ROOMCode:%String(MAXLEN=255),HOSPDesc:%String(MAXLEN=255),HOSPRowID:%Integer,WARDDesc:%String(MAXLEN=255),PAADMType:%String(MAXLEN=255),PAADMHospChaplainVisitReq:%String(MAXLEN=255),PAADMChaplainName:%String(MAXLEN=255),PAADMRefOrgAddress:%String(MAXLEN=255),PAADMChaplainPhone:%String(MAXLEN=255),PAADMChaplainChurchAddress:%String(MAXLEN=255),PAADMDateHCPreceived:%Date"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
