<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARHMTED019">
<Description>
SWARH LOS Report Stored Proc</Description>
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>61221,1746.994125</TimeCreated>

<Method name="FarmReportClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="FarmReportExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,DateFrom:%Date,DateTo:%Date,Hospital:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 k ^zbernard	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 n PAADMAdmDate,PAADMDischgDate,PAADMADMNo,PAPMINo,MRCIDDesc,PAPERAgeYr,HOSPRowId,HOSPDesc,DSCLCode,DSCLDesc
 s (HOSPRowId)=0
 s (PAADMAdmDate,PAADMDischgDate,PAADMADMNo,PAPMINo,MRCIDDesc,PAPERAgeYr,HOSPDesc,DSCLCode,DSCLDesc)=""

 s ind=1

 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)

 //s ^bernard("2")=(2)

 &sql(declare FarmReport cursor for
 SELECT 
 PAADM_AdmDate,
 PAADM_DischgDate,
 PAADM_ADMNo,   
 PAADM_PAPMI_DR->PAPMI_No,
 MRDIA_ICDCode_DR->MRCID_Desc,
 PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_AgeYr,
 PAADM_CurrentWard_DR->WARD_LocationDR->CTLOC_HOspital_DR->HOSP_RowId,
 PAADM_CurrentWard_DR->WARD_LocationDR->CTLOC_HOspital_DR->HOSP_Desc,
 PAADM_MainMRADM_DR->MRADM_DischClassif_DR->DSCL_Code,
 PAADM_MainMRADM_DR->MRADM_DischClassif_DR->DSCL_Desc
 FROM    SQLUser . PA_Adm, SQLUser . MR_Diagnos
 WHERE  PAADM_MainMRADM_DR=*MRDIA_MRADM_ParRef and 
 PAADM_DischgDate between :DateFrom and :DateTo and 
 PAADM_CurrentWard_DR->WARD_LocationDR->CTLOC_HOspital_DR->HOSP_RowId=:Hospital
 and PAADM_Type='E' and 
 PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_SEX_DR->CTSEX_Code='M' and 
 PAADM_PlaceofInj_DR->PLINJ_Code='F' and 
 PAADM_VisitStatus<>'C'
 order by MRDIA_ChildSub ASC)
 &sql(open FarmReport)


 //fetch first row
 &sql(fetch FarmReport into :PAADMAdmDate,:PAADMDischgDate,:PAADMADMNo,:PAPMINo,:MRCIDDesc,:PAPERAgeYr,:HOSPRowId,:HOSPDesc,:DSCLCode,:DSCLDesc)

 while 'SQLCODE{
 d FormatDates
 d FormatTimes

 // build the row
 Set ^CacheTemp(repid,ind)=$LB(PAADMAdmDate,PAADMDischgDate,PAADMADMNo,PAPMINo,MRCIDDesc,PAPERAgeYr,HOSPRowId,HOSPDesc,DSCLCode,DSCLDesc)
 s ind=ind+1
 //fetch rows
 &sql(fetch FarmReport into :PAADMAdmDate,:PAADMDischgDate,:PAADMADMNo,:PAPMINo,:MRCIDDesc,:PAPERAgeYr,:HOSPRowId,:HOSPDesc,:DSCLCode,:DSCLDesc)
 }

 //s ^zBernard("3")=(3)
 &sql(close FarmReport)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 //s ^zBernard("4")=(4)
 Quit $$$OK


FormatDates
 // Convert the dates to ODBC date format
 If PAADMAdmDate Set PAADMAdmDate=$ZD(PAADMAdmDate,3)
 If PAADMDischgDate Set PAADMDischgDate=$ZD(PAADMDischgDate,3)

 //s ^zBernard("5")=(5)
 Quit

FormatTimes
 // Convert the times to ODBC time format
 Quit
]]></Implementation>
</Method>

<Method name="FarmReportFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="FarmReport">
<Description>
SWARH LOS Report Stored Proc
It expects 2 parameter of type ADMIT date and will return a list of records:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time</Description>
<Type>%Library.Query</Type>
<FormalSpec>DateFrom:%Date,DateTo:%Date,Hospital:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAADMAdmDate:%Date,PAADMDischgDate:%Date,PAADMADMNo:%String(MAXLEN=255),PAPMINo:%String(MAXLEN=255),MRCIDDesc:%String(MAXLEN=255),PAPERAgeYr:%String(MAXLEN=255),HOSPRowId:%Integer,HOSPDesc:%String(MAXLEN=255),DSCLCode:%String(MAXLEN=255),DSCLDesc:%String(MAXLEN=255)"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
