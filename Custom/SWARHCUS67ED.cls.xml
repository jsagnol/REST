<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARHCUS67ED">
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>61712,68992.298012</TimeCreated>

<Method name="EDClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="EDExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,DateFrom:%Date,DateTo:%Date,Hospital:%Integer,URList:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 k ^zbernard	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 n HOSPRowId,HOSPDesc,PAPMINo,PAPMIRowId,PAADMRowId,PAADMADMNo,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,
 PAADMCreateDate,PAADMUpdateDate,PAADMUpdateTime,SSUSRGivenName,SSUSRSurname,PAADMTriageDate,PAADMTriageTime,TriageCat,PAADMMainMRADMDR,DepartStat,
 ClinicianType,PAADMSeenDate,PAADMSeenTime,PractFSeenDate,PractFSeenTime,PAADMCreateTime,PAADMCreateUser
 s (HOSPRowId,PAPMIRowId,PAADMRowId)=0
 s (HOSPDesc)=""
 s (PAPMINo,PAADMADMNo,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,PAADMCreateDate,PAADMUpdateDate,PAADMUpdateTime,SSUSRGivenName,SSUSRSurname,PAADMTriageDate,PAADMTriageTime,
 TriageCat,PAADMMainMRADMDR,DepartStat,ClinicianType,PAADMSeenDate,PAADMSeenTime,PractFSeenDate,PractFSeenTime,
 PAADMCreateTime,PAADMCreateUser)=""
 s ind=1
 n firstUR
 n secondUR
 s firstUR=$piece(URList,",",1)
 s secondUR=$piece(URList,",",2)

 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)

 //s ^bernard("2")=(2)
 
 &sql(declare ED cursor for
 
 SELECT distinct
 		CT_Hospital.HOSP_RowId,
 		CT_Hospital.HOSP_Desc,
        PAPMI_No,PAPMI_RowId,
        PAADM_RowId,PAADM_ADMNo,PAADM_AdmDate,PAADM_AdmTime,PAADM_DischgDate,PAADM_DischgTime,PAADM_CreateDate,PAADM_UpdateDate,PAADM_UpdateTime,
        SSUSR_GivenName,SSUSR_Surname,
        PAADM_TriageDate,PAADM_TriageTime,
        PAADM_Priority_DR->CTACU_Desc,
      	PAADM_MainMRADM_DR,
        PAADM_MainMRADM_DR->MRADM_DischClassif_DR->DSCL_Desc,
        CTCPT_InternalType,PAADM_SeenDate,PAADM_SeenTime,
        PAADM2_PractFSeenDate,PAADM2_PractFSeenTime,
        PAADM_CreateTime,PAADM_CreateUser
 FROM
        SQLUser.PA_PatMas,
        SQLUser.PA_Adm,
        SQLUSer.CT_Hospital,
        SQLUser.PAC_Ward,
        SQLUser.SS_User,
        SQLUser.CT_CareProv,
        SQLUser.CT_CarPrvTp,
        SQLUser.PA_Adm2
 WHERE
        (PA_Adm.PAADM_Hospital_DR=:Hospital)
        AND (PA_Adm.PAADM_Hospital_DR=CT_Hospital.HOSP_RowId)
        AND (PA_Adm.PAADM_CurrentWard_DR=PAC_Ward.WARD_RowID)
        AND PA_ADM.PAADM_VisitStatus <> 'C'
        AND PA_ADM.PAADM_Type = 'E'
        AND PAADM_AdmDate between :DateFrom AND :DateTo
        AND PAC_Ward.WARD_Code='ED'
        AND PAADM2_RowId=PAADM_RowId
        AND PAADM_PAPMI_DR=PAPMI_RowId
        AND PAADM_AdmDocCodeDR=*CTPCP_RowId and CTPCP_CarPrvTp_DR=*CTCPT_RowId
        AND PAADM_UPDATEUSER_DR=SSUSR_RowId
        AND (({fn CONCAT( ',', {fn CONCAT((:URList),',')})} [ {fn CONCAT( ',', {fn CONCAT((PAPMI_RowId),',')})}) OR (:URList IS NULL)
)

)
 &sql(open ED)

  //fetch first row 
 &sql(fetch ED into :HOSPRowId,:HOSPDesc,:PAPMINo,:PAPMIRowId,:PAADMRowId,:PAADMADMNo,:PAADMAdmDate,:PAADMAdmTime,:PAADMDischgDate,:PAADMDischgTime,:PAADMCreateDate,:PAADMUpdateDate,:PAADMUpdateTime,:SSUSRGivenName,:SSUSRSurname,:PAADMTriageDate,:PAADMTriageTime,:TriageCat,:PAADMMainMRADMDR,:DepartStat,:ClinicianType,:PAADMSeenDate,:PAADMSeenTime,:PractFSeenDate,:PractFSeenTime,:PAADMCreateTime,:PAADMCreateUser
 )

 while 'SQLCODE{
 
 d FormatDates
 d FormatTimes

 // build the row
 Set ^CacheTemp(repid,ind)=$LB(HOSPRowId,HOSPDesc,PAPMINo,PAPMIRowId,PAADMRowId,PAADMADMNo,PAADMAdmDate,PAADMAdmTime,PAADMDischgDate,PAADMDischgTime,PAADMCreateDate,PAADMUpdateDate,PAADMUpdateTime,SSUSRGivenName,SSUSRSurname,PAADMTriageDate,PAADMTriageTime,TriageCat,PAADMMainMRADMDR,DepartStat,ClinicianType,PAADMSeenDate,PAADMSeenTime,PractFSeenDate,PractFSeenTime,PAADMCreateTime,PAADMCreateUser)
 s ind=ind+1
 //fetch rows
 &sql(fetch ED into :HOSPRowId,:HOSPDesc,:PAPMINo,:PAPMIRowId,:PAADMRowId,:PAADMADMNo,:PAADMAdmDate,:PAADMAdmTime,:PAADMDischgDate,:PAADMDischgTime,:PAADMCreateDate,:PAADMUpdateDate,:PAADMUpdateTime,:SSUSRGivenName,:SSUSRSurname,:PAADMTriageDate,:PAADMTriageTime,:TriageCat,:PAADMMainMRADMDR,:DepartStat,:ClinicianType,:PAADMSeenDate,:PAADMSeenTime,:PractFSeenDate,:PractFSeenTime,:PAADMCreateTime,:PAADMCreateUser)
 }

 //s ^zBernard("3")=(3)
 &sql(close ED)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 //s ^zBernard("4")=(4)

 Quit $$$OK


FormatDates
 // Convert the dates to ODBC date format
 If PAADMDischgDate Set PAADMDischgDate=$ZD(PAADMDischgDate,4)
 If PAADMAdmDate Set PAADMAdmDate=$ZD(PAADMAdmDate,4)
 If PAADMCreateDate Set PAADMCreateDate=$ZD(PAADMCreateDate,4)
 If PAADMUpdateDate Set PAADMUpdateDate=$ZD(PAADMUpdateDate,4)
 If PAADMTriageDate Set PAADMTriageDate=$ZD(PAADMTriageDate,4)
 If PAADMSeenDate Set PAADMSeenDate=$ZD(PAADMSeenDate,4)
 If PractFSeenDate Set PractFSeenDate=$ZD(PractFSeenDate,4)
 Quit
 
FormatTimes
 // Convert the times to ODBC time format
 If PAADMAdmTime Set PAADMAdmTime=$ZTIME(PAADMAdmTime,1)
 If PAADMDischgTime Set PAADMDischgTime=$ZTIME(PAADMDischgTime,1)
 If PAADMUpdateTime Set PAADMUpdateTime=$ZTIME(PAADMUpdateTime,1)
 If PAADMTriageTime Set PAADMTriageTime=$ZTIME(PAADMTriageTime,1)
 If PAADMSeenTime Set PAADMSeenTime=$ZTIME(PAADMSeenTime,1)
 If PractFSeenTime Set PractFSeenTime=$ZTIME(PractFSeenTime,1)
 If PAADMCreateTime Set PAADMCreateTime=$ZTIME(PAADMCreateTime,1)
 Quit
]]></Implementation>
</Method>

<Method name="EDFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)

 Quit $$$OK
]]></Implementation>
</Method>

<Query name="ED">
<Description>
GHA List reports Stored Procedure
It expects 2 parameter of type date and will return a list of records:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time</Description>
<Type>%Library.Query</Type>
<FormalSpec>DateFrom:%Date,DateTo:%Date,Hospital:%String(MAXLEN=255),URList:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="HOSPRowId:%Integer,HOSPDesc:%String(MAXLEN=255),PAPMINo:%String(MAXLEN=255),PAPMIRowId:%Integer,PAADMRowId:%Integer,PAADMADMNo:%String(MAXLEN=255),PAADMAdmDate:%String(MAXLEN=255),PAADMAdmTime:%String(MAXLEN=255),PAADMDischgDate:%String(MAXLEN=255),PAADMDischgTime:%String(MAXLEN=255),PAADMCreateDate:%String(MAXLEN=255)e,PAADMUpdateDate:%String(MAXLEN=255),PAADMUpdateTime:%String(MAXLEN=255),SSUSRGivenName:%String(MAXLEN=255),SSUSRSurname:%String(MAXLEN=255),PAADMTriageDate:%String(MAXLEN=255),PAADMTriageTime:%String(MAXLEN=255),TriageCat:%String(MAXLEN=255),PAADMMainMRADMDR:%Integer,DepartStat:%String(MAXLEN=255),ClinicianType:%String(MAXLEN=255),PAADMSeenDate:%String(MAXLEN=255),PAADMSeenTime:%String(MAXLEN=255),PractFSeenDate:%String(MAXLEN=255),PractFSeenTime:%String(MAXLEN=255),PAADMCreateTime:%String(MAXLEN=255),PAADMCreateUser:%String(MAXLEN=255)"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
