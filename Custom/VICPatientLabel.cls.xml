<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.VICPatientLabel">
<Description>
Vic Patient Label Report</Description>
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>61221,1749.652085</TimeCreated>

<Method name="VicEpisodeLabelClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="VicEpisodeLabelExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,EpisodeId:%Integer]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
	
 k ^bernard
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n,str
 n PAADMADMNo,PAADMAdmDate,WARDCode,VSTCode,REFDDesc,REFDForename,TRDCode,VSTDesc,PAPMIRowId,PAPMIDOB,PAPMIMedicare,PAPMIMedicareCode,PAPMIName,PAPMIName2,PAPMIName3,PAPMINo,PAPMIDVANumber,PAPMIHealthFundNo,PAPERGovernCardNo,PAPERAgeYr,PAPERStName,PAPERForeignAddress,PAPERTelH,CTMARDesc,CTRLGDesc,CTCOUDesc,CTZIPCode,CTCITDesc,TTLCode,CTSEXCode,PAPERINSTCode,PAADMINSTCode,INDSTDesc,FAMDDesc,FAMDForename,PREFLDesc,CTPCPDesc
 s (PAPMIRowId)=0
 s (PAADMADMNo,PAADMAdmDate,WARDCode,VSTCode,REFDDesc,REFDForename,TRDCode,VSTDesc,PAPMIDOB,PAPMIMedicare,PAPMIMedicareCode,PAPMIName,PAPMIName2,PAPMIName3,PAPMINo,PAPMIDVANumber,PAPMIHealthFundNo,PAPERGovernCardNo,PAPERAgeYr,PAPERStName,PAPERForeignAddress,PAPERTelH,CTMARDesc,CTRLGDesc,CTCOUDesc,CTZIPCode,CTCITDesc,TTLCode,CTSEXCode,PAPERINSTCode,PAADMINSTCode,INDSTDesc,FAMDDesc,FAMDForename,PREFLDesc,CTPCPDesc)=""
 s ^zbernard("1")=1
 s ind=1
 s ^zbernard("2")=2
 &sql(select 
 PAADM_ADMNo,
 PAADM_AdmDate,
 PAADM_CurrentWard_DR->WARD_Code,
 PAADM_MainMRADM_DR->MRADM_VisitType_DR->VST_Code,
 PAADM_RefDocList_DR->REFD_Desc as REFDDesc,
 PAADM_RefDocList_DR->REFD_Forename as REFDForename,
 PAADM_MainMRADM_DR->MRADM_TransDest2_DR->TRD_Code,
 PAADM_MainMRADM_DR->MRADM_VisitType_DR->VST_Desc,
 PAPMI_RowId,
 PAPMI_DOB,
 PAPMI_Medicare, 
 PAPMI_MedicareCode, 
 PAPMI_Name, 
 PAPMI_Name2,
 PAPMI_Name3,
 PAPMI_No, 
 PAPMI_DVANumber,
 PAPMI_HealthFundNo,
 PAPMI_PAPER_DR->PAPER_GovernCardNo,
 PAPMI_PAPER_DR->PAPER_AgeYr,
 PAPMI_PAPER_DR->PAPER_StName,
 PAPMI_PAPER_DR->PAPER_ForeignAddress,
 PAPMI_PAPER_DR->PAPER_TelH, 
 PAPMI_PAPER_DR->PAPER_Marital_DR->CTMAR_Code,
 PAPMI_PAPER_DR->PAPER_Religion_DR->CTRLG_Desc,
 PAPMI_PAPER_DR->PAPER_Country_birth_DR->CTCOU_Desc,
 PAPMI_PAPER_DR->PAPER_Zip_DR->CTZIP_Code, 
 PAPMI_PAPER_DR->PAPER_CityCode_DR->CTCIT_Desc,
 PAPMI_PAPER_DR->PAPER_Title_DR->TTL_Code,
 PAPMI_PAPER_DR->PAPER_Sex_DR->CTSEX_Code,
 PAPMI_PAPER_DR->PAPER_InsType_DR->INST_Code as PAPERINSTCode,
 INS_InsType_DR->INST_Code as PAADMInstCode,
 PAPMI_PAPER_DR->PAPER_IndigStat_DR->INDST_Desc,
 PAPMI_PAPER_DR->PAPER_FamilyDoctor_DR->REFD_Desc as FAMDDesc,
 PAPMI_PAPER_DR->PAPER_FamilyDoctor_DR->REFD_Forename as FAMDForename,
 PAPMI_PAPER_DR->PAPER_PrefLanguage_DR->PREFL_Desc,
 PAADM_AdmDocCodeDR->CTPCP_Desc
 INTO :PAADMADMNo,:PAADMAdmDate,:WARDCode,:VSTCode,:REFDDesc,
:REFDForename,:TRDCode,:VSTDesc,:PAPMIRowId,:PAPMIDOB,:PAPMIMedicare,
:PAPMIMedicareCode,:PAPMIName,:PAPMIName2,:PAPMIName3,
:PAPMINo,:PAPMIDVANumber,:PAPMIHealthFundNo,:PAPERGovernCardNo,
:PAPERAgeYr,:PAPERStName,:PAPERForeignAddress,:PAPERTelH,
:CTMARDesc,:CTRLGDesc,:CTCOUDesc,:CTZIPCode,:CTCITDesc,:TTLCode,
:CTSEXCode,:PAPERINSTCode,:PAADMINSTCode,:INDSTDesc,:FAMDDesc,
:FAMDForename,:PREFLDesc,:CTPCPDesc
 FROM sqluser.PA_Adm, sqluser.PA_PatMas, sqluser.PA_AdmInsurance
 WHERE PAADM_PAPMI_DR=PAPMI_RowId AND PAADM_RowId=*INS_ParRef AND
 PAADM_RowId =:EpisodeId
 )
 s ^zbernard("3")=3

 s PAPERStName=$zstrip(PAPERStName,"*C")
 s PAPERForeignAddress=$zstrip(PAPERForeignAddress,"*C")

 Do FormatDates

 // build the row
 Set ^CacheTemp(repid,ind)=$LB(PAADMADMNo,PAADMAdmDate,WARDCode,VSTCode,REFDDesc,REFDForename,TRDCode,VSTDesc,PAPMIRowId,PAPMIDOB,PAPMIMedicare,PAPMIMedicareCode,PAPMIName,PAPMIName2,PAPMIName3,PAPMINo,PAPMIDVANumber,PAPMIHealthFundNo,PAPERGovernCardNo,PAPERAgeYr,PAPERStName,PAPERForeignAddress,PAPERTelH,CTMARDesc,CTRLGDesc,CTCOUDesc,CTZIPCode,CTCITDesc,TTLCode,CTSEXCode,PAPERINSTCode,PAADMINSTCode,INDSTDesc,FAMDDesc,FAMDForename,PREFLDesc,CTPCPDesc)
 s ^zbernard("4")=4
 //Set ^CacheTemp(repid,ind)=str	



 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)
 s ^zbernard("5")=5

 Quit $$$OK

FormatDates
 // Convert the dates to ODBC date format
 If PAADMAdmDate Set PAADMAdmDate=$ZD(PAADMAdmDate,3)
 If PAPMIDOB Set PAPMIDOB=$ZD(PAPMIDOB,3)
 Quit

FormatTimes
 // Convert the times to ODBC time format
 Quit
]]></Implementation>
</Method>

<Method name="VicEpisodeLabelFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="VicEpisodeLabel">
<Description>
Vic Patient Label Report
It expects 1 parameter of type integer and will return 40 odd fields:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time</Description>
<Type>%Library.Query</Type>
<FormalSpec>EpisodeId:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<SqlView>0</SqlView>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAADMADMNo:%String(MAXLEN=255),PAADMAdmDate:%Date,WARDCode:%String(MAXLEN=255),VSTCode:%String(MAXLEN=255),REFDDesc:%String(MAXLEN=255),REFDForename:%String(MAXLEN=255),TRDCode:%String(MAXLEN=255),VSTDesc:%String(MAXLEN=255),PAPMIRowId:%Integer,PAPMIDOB:%Date,PAPMIMedicare:%String(MAXLEN=255),PAPMIMedicareCode:%String(MAXLEN=255),PAPMIName:%String(MAXLEN=255),PAPMIName2:%String(MAXLEN=255),PAPMIName3:%String(MAXLEN=255),PAPMINo:%String(MAXLEN=255),PAPMIDVANumber:%String(MAXLEN=255),PAPMIHealthFundNo:%String(MAXLEN=255),PAPERGovernCardNo:%String(MAXLEN=255),PAPERAgeYr:%String(MAXLEN=255),PAPERStName:%String(MAXLEN=255),PAPERForeignAddress:%String(MAXLEN=255),PAPERTelH:%String(MAXLEN=255),CTMARDesc:%String(MAXLEN=255),CTRLGDesc:%String(MAXLEN=255),CTCOUDesc:%String(MAXLEN=255),CTZIPCode:%String(MAXLEN=255),CTCITDesc:%String(MAXLEN=255),TTLCode:%String(MAXLEN=255),CTSEXCode:%String(MAXLEN=255),PAPERINSTCode:%String(MAXLEN=255),PAADMINSTCode:%String(MAXLEN=255),INDSTDesc:%String(MAXLEN=255),FAMDDesc:%String(MAXLEN=255),FAMDForename:%String(MAXLEN=255),PREFLDesc:%String(MAXLEN=255),CTPCPDesc:%String(MAXLEN=255)"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
