<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.VICEDTRAK008">
<Description>
ED Episode summary</Description>
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>61221,1749.253051</TimeCreated>

<Method name="EpisodeSummaryClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="EpisodeSummaryExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,DateFrom:%Date,DateTo:%Date,Hospital:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 k ^zbernard	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 n PAADMRowID,PAADMAdmDate,PAADMAdmTime,PAADMTriageDate,PAADMTriageTime,PAADMDischgDate,PAADMDischgTime,PAADMADMNo,PAADMSeenDate,PAADMSeenTime,CTSEXCode,PAPERAgeYr,PAPMINo,CTACUCode,CTACUDesc,HOSPRowId,HOSPDesc
 s (PAADMRowID,HOSPRowId)=0
 s (PAADMAdmDate,PAADMAdmTime,PAADMTriageDate,PAADMTriageTime,PAADMDischgDate,PAADMDischgTime,PAADMADMNo,PAADMSeenDate,PAADMSeenTime,CTSEXCode,PAPERAgeYr,PAPMINo,CTACUCode,CTACUDesc,HOSPDesc)=""

 s ind=1

 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)

 //s ^bernard("2")=(2)

 &sql(declare EpisodeSummary cursor for
 SELECT 
 PAADM_RowID,
 PAADM_AdmDate,
 PAADM_AdmTime,
 PAADM_TriageDate,
 PAADM_TriageTime,
 PAADM_DischgDate,
 PAADM_DischgTime,
 PAADM_ADMNo,   
 PAADM_SeenDate,
 PAADM_SeenTime,
 PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_SEX_DR->CTSEX_Code,
 PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_AgeYr,
 PAADM_PAPMI_DR->PAPMI_No,
 PAADM_Priority_DR->CTACU_Code,
 PAADM_Priority_DR->CTACU_Desc,
 PAADM_CurrentWard_DR->WARD_LocationDR->CTLOC_HOspital_DR->HOSP_RowId,
 PAADM_CurrentWard_DR->WARD_LocationDR->CTLOC_HOspital_DR->HOSP_Desc
 FROM    SQLUser . PA_Adm
 WHERE  
 PAADM_DischgDate between :DateFrom and :DateTo and PAADM_Type='E' 
 and PAADM_VisitStatus<>'C'
 and PAADM_SeenDate <> ''
 and PAADM_CurrentWard_DR->WARD_LocationDR->CTLOC_HOspital_DR=:Hospital)
 &sql(open EpisodeSummary)


 //fetch first row
 &sql(fetch EpisodeSummary into :PAADMRowID,:PAADMAdmDate,:PAADMAdmTime,:PAADMTriageDate,:PAADMTriageTime,:PAADMDischgDate,:PAADMDischgTime,:PAADMADMNo,:PAADMSeenDate,:PAADMSeenTime,:CTSEXCode,:PAPERAgeYr,:PAPMINo,:CTACUCode,:CTACUDesc,:HOSPRowId,:HOSPDesc)

 while 'SQLCODE{
	 
 // Get seen date and time out of the PA_AdmTransaction table (global)
 // This works around a problem in TrakCare where PAADM_SeenDate is populated by the first care provider
 // to be added to the episode, not the earliest date added.
 d GetSeenDateTime
 d FormatDates
 d FormatTimes

 // build the row
 Set ^CacheTemp(repid,ind)=$LB(PAADMRowID,PAADMAdmDate,PAADMAdmTime,PAADMTriageDate,PAADMTriageTime,PAADMDischgDate,PAADMDischgTime,PAADMADMNo,PAADMSeenDate,PAADMSeenTime,CTSEXCode,PAPERAgeYr,PAPMINo,CTACUCode,CTACUDesc,HOSPRowId,HOSPDesc)
 s ind=ind+1
 //fetch rows
 &sql(fetch EpisodeSummary into :PAADMRowID,:PAADMAdmDate,:PAADMAdmTime,:PAADMTriageDate,:PAADMTriageTime,:PAADMDischgDate,:PAADMDischgTime,:PAADMADMNo,:PAADMSeenDate,:PAADMSeenTime,:CTSEXCode,:PAPERAgeYr,:PAPMINo,:CTACUCode,:CTACUDesc,:HOSPRowId,:HOSPDesc)
 }

 //s ^zBernard("3")=(3)
 &sql(close EpisodeSummary)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 //s ^zBernard("4")=(4)
 Quit $$$OK
 
GetSeenDateTime
 // Iterate through PA_AdmTransactions global and find earliest seen date/time
 Set seendate=0,seentime=0,tr=0  For {
	Set tr=$o(^PAADM(PAADMRowID,"TRANS",tr)) Quit:tr=""  Set s=^PAADM(PAADMRowID,"TRANS",tr)
 	Set stat=$p(s,"^",12)
 	If $p($g(^PAC("REQST",+stat)),"^")="J" Continue // Skip REJECTED statuses
 	Continue:'$p(s,"^",5) // Skip transactions that don't specify a care provider (TRANS_CTCP_DR)
 	Set dt1=$p(s,"^",1),tm1=$p(s,"^",2) Continue:'dt1 // Skip empty dates
 	If 'seendate { // First transaction with a seen date; begin with this one
	 	Set seendate=dt1,seentime=tm1
	 	Continue
 	} ElseIf dt1,dt1<seendate { // New seen date is defined and less than current
	 	Set seendate=dt1,seentime=tm1
	 	Continue
 	} ElseIf dt1=seendate,tm1'="",tm1<seentime { // New seen date is same as current; new time is less than current
	 	s seentime=tm1
 	}
 }
 s:seendate PAADMSeenDate = seendate
 s:seentime PAADMSeenTime = seentime
 Quit
 
FormatDates
 // Convert the dates to ODBC date format
 If PAADMAdmDate Set PAADMAdmDate=$ZD(PAADMAdmDate,3)
 If PAADMDischgDate Set PAADMDischgDate=$ZD(PAADMDischgDate,3)
 If PAADMTriageDate Set PAADMTriageDate=$ZD(PAADMTriageDate,3)
 If PAADMSeenDate Set PAADMSeenDate=$ZD(PAADMSeenDate,3)

 //s ^zBernard("5")=(5)
 Quit

FormatTimes
 // Convert the times to ODBC time format
 If PAADMAdmTime Set PAADMAdmTime=$ZT(PAADMAdmTime,2)
 If PAADMDischgTime Set PAADMDischgTime=$ZT(PAADMDischgTime,2)
 If PAADMTriageTime Set PAADMTriageTime=$ZT(PAADMTriageTime,2)
 If PAADMSeenTime Set PAADMSeenTime=$ZT(PAADMSeenTime,2)
 Quit
]]></Implementation>
</Method>

<Method name="EpisodeSummaryFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<Final>0</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>code</CodeMode>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<Private>0</Private>
<ReturnType>%Library.Status</ReturnType>
<SqlProc>0</SqlProc>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="EpisodeSummary">
<Description>
GHA List reports Stored Procedure
It expects 2 parameter of type date and will return a list of records:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time</Description>
<Type>%Library.Query</Type>
<FormalSpec>DateFrom:%Date,DateTo:%Date,Hospital:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAADMRowID:%Integer,PAADMAdmDate:%Date,PAADMAdmTime:%String(MAXLEN=255),PAADMTriageDate:%Date,PAADMTriageTime:%String(MAXLEN=255),PAADMDischgDate:%Date,PAADMDischgTime:%String(MAXLEN=255),PAADMADMNo:%String(MAXLEN=255),PAADMSeenDate:%Date,PAADMSeenTime:%String(MAXLEN=255),CTSEXCode:%String(MAXLEN=255),PAPERAgeYr:%String(MAXLEN=255),PAPMINo:%String(MAXLEN=255),CTACUCode:%String(MAXLEN=255),CTACUDesc:%String(MAXLEN=255),HOSPRowId:%Integer,HOSPDesc:%String(MAXLEN=255)"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
