<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARHCUSDisSummArgus2">
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>61289,34200.473469</TimeCreated>

<Method name="SWARHCUSDisSummArgus2Close">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="SWARHCUSDisSummArgus2Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,DisID:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 //k ^bernard
 //, ^zwsa
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n,str
 n PAADMROWID,PatDOB,PatName,PatName2,PAPMIRowId,PatTitle,DISDate,DISRowId,RefDoctorDesc,RefDoctorForename,RefDoctorProNum,PreferredContact,EmailAddress,DISParRef,REFParRef,verno
 s (PAADMROWID,DISRowId,PAPMIRowId,DISParRef,REFParREF)=0
 s (PatDOB,PatName,PatName2,PatTitle,DISDate,RefDoctorDesc,RefDoctorForename,RefDoctorProNum,PreferredContact,EmailAddress,verno)=""
 n idx,maxlength,currentstr,currentlength
 //s ^zbernard("1")=1
 s ind=1
 //s ^zbernard("2")=2
 s END=0
 &sql(declare SWARHCUSDisSummArgus2 cursor for
 select
		PAADM_ROWId,
		PAPMI_DOB as PatDOB,
		PAPMI_Name as PatName,
		PAPMI_Name2 as PatName2,
		PAPMI_RowId,
		PAPMI_PAPER_DR->PAPER_Title_DR->TTL_Code as PatTitle,
		DIS_PADischargeSummary_DR->DIS_Date,
		DIS_PADischargeSummary_DR->DIS_RowId,
		REF_RefDoc_DR->REFD_Desc as RefDoctorDesc,
		REF_RefDoc_DR->REFD_Forename as RefDoctorForename,
		REF_RefDoc_DR->REFD_Text1 as RefDoctorProNum,
		REF_RefDocClinic_DR->CLN_PreferredContact as PreferredContact,
		REF_RefDocClinic_DR->CLN_Email as EmailAddress,
		DIS_ParRef,
		REF_ParREF
		
FROM	 
sqluser.PA_Adm, 
sqluser.PA_PatMas, 
sqluser.PA_Adm2DischargeSummary PA_Adm2DischargeSummary, 
sqluser.PA_DischargeSummary PA_DischargeSummary,
sqluser.PA_DischargeSummaryRefDoc
WHERE	  
(PAADM_RowId=DIS_ParRef) AND
(DIS_PADischargeSummary_DR=pa_dischargesummary.DIS_RowId) AND
(PAADM_PAPMI_DR=PAPMI_RowID)  and
DIS_PADischargeSummary_DR=ref_parref and
DIS_PADischargeSummary_DR=:DisID)

 &sql(open SWARHCUSDisSummArgus2)

 //fetch first order record
 &sql(fetch SWARHCUSDisSummArgus2 into :PAADMROWID,:PatDOB,:PatName,:PatName2,:PAPMIRowId,:PatTitle,:DISDate,:DISRowId,:RefDoctorDesc,:RefDoctorForename,:RefDoctorProNum,:PreferredContact,:EmailAddress,:DISParRef,:REFParREF)

 while 'SQLCODE{

 s ^zbernard("3")=3
 Do FormatDates
 
 s RefDoctorProNum=$zstrip(RefDoctorProNum,"*C")
 ; define all off the Text Area strings.

 ; Set up maxlength here. Once defined, we don't have to define it again - it will apply to all loops.
 s maxlength=30000
 
 ;get the "version number"
 s idstr=##Class(web.PAAdmDischargeSummary).GetPreviousVersions(DisID) 
 s verno=($l(idstr,"^")+1) 
 // build the row
 Set str=$LB(PAADMROWID,PatDOB,PatName,PatName2,PAPMIRowId,PatTitle,DISDate,DISRowId,RefDoctorDesc,RefDoctorForename,RefDoctorProNum,PreferredContact,EmailAddress,DISParRef,REFParREF,verno)

 Set ^CacheTemp(repid,ind)=str
 s ind=ind+1
 //s ^zbernard("4")=4
 //fetch next order records
 &sql(fetch SWARHCUSDisSummArgus2 into :PAADMROWID,:PatDOB,:PatName,:PatName2,:PAPMIRowId,:PatTitle,:DISDate,:DISRowId,:RefDoctorDesc,:RefDoctorForename,:RefDoctorProNum,:PreferredContact,:EmailAddress,:DISParRef,:REFParREF)
 }
 &sql(close SWARHCUSDisSummArgus2)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)
 //s ^zbernard("5")=5

 Quit $$$OK

FormatDates
 // Convert the dates to ODBC date format
 If PatDOB Set PatDOB=$ZD(PatDOB,3)
 If DISDate Set DISDate=$ZD(DISDate,3)
 Quit
]]></Implementation>
</Method>

<Method name="SWARHCUSDisSummArgus2Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 
 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="SWARHCUSDisSummArgus2">
<Description>
Discharge Summary 1 Report
It expects 1 parameter of type integer and will return 40 odd fields:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - </Description>
<Type>%Library.Query</Type>
<FormalSpec>DisID:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAADMROWID:%Integer,PatDOB:%Date,PatName:%String(MAXLEN=255),PatName2:%String(MAXLEN=255),PAPMIRowId:%Integer,PatTitle:%String(MAXLEN=255),DISDate:%Date,DISRowId:%Integer,RefDoctorDesc:%String(MAXLEN=255),RefDoctorForename:%String(MAXLEN=255),RefDoctorProNum:%String(MAXLEN=255),PreferredContact:%String(MAXLEN=255),EmailAddress:%String(MAXLEN=255),DISParRef:%Integer,REFParREF:%Integer,verno:%String(MAXLEN=255)"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
