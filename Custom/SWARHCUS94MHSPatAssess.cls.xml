<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARHCUS94MHSPatAssess">
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject,%XML.Adaptor</Super>
<TimeCreated>61864,44170.213695</TimeCreated>
<Inheritance>right</Inheritance>

<Method name="MHSPatAssessClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="MHSPatAssessExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,HospitalID:%Integer,PatientID:%Integer,EpisodeID:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 k ^zbernard	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 n PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,PAPMIDOB,
 QAdmDt,QAdmtm,QPresentProbl,CQBreathingProb, QBrProblDet,CQAsthma,QAsthmaDet,CQCardiacProbl,QCardiacDet,
 CQPacemaker, QPacemakerDet,CQBleedingProbl,QBleedingDetails,CQAntiCoag,QAnticoagDet,CQDiabetes,QDiabetesDet,
 CQHeartburn,QHeartburnDet,CQPreviousCVA,QPrevCVADet,CQACAS,QACASDet,CQHypertension,QHypertensionDet,CQKidneyProbl,
 QKidneyDet,CQRheumaticFever,QRheumaticDet,CQTetanus,QTetanusDet,CQThrombosis,QThrombDet,CQCancer,QCancerDet,
 CQBloodTransf,QBloodDet,CQEpilepsy,QEpilepsyDet,CQRecentFalls,QRecentFallsDet,CQOtherHistory,QOtherHistDet,QPrevOps,
 QSeriousIllness,QSmoking,QAlcohol,QFamilyHist,QTemp,QPulse,
 QTempObsDR,QResps,QRespsObsDR,QCough,QSaO2,QSaO2ObsDR,QWeight,QWeightObsDR,
 QUrinalysis,QUrinalysisObsDR,QMentalAssessment,QCirculation,QComments,QPtUstanding,QAppetiteProbl,QAssistReqd,QSpDietNeeds,
 QBladderProbl,QBowelProbl,QSleepingHabits,CQSedative,QMobAssist,QHygNormalHab,QCommunic,CQSupportiveAids,QDentures,
 QHearingAid,QGlasses,QCrutches,QInterpreter,CQSitting,CQMoving,CQTransferring,
 CQMobility,CQMobilityAids,QRegCorrect,QIntro,QVisiting,QSmokingPolicy,QMenu,QTelephone,QBathroom,
 QCallBell,QInfoBook,QPtSignature,QPtSignDT,QReligion,CQReqMinister,CQAnointed,QSpCultural,QDenturesDet,QHearingDet,
 QGlassesDet,QCrutchesDet,QBPSyst,QBPSystObsDR,QBPDias,QBPDiasObsDR,QRandBlSuOb,QRandBlSuObObsDR,QSitAidNone,QSitAidMon,
 QSitAidSlide,QSitAidBedSt,QSitAidPole,QSitAidBedMech,QSitAidLiftLay,QSitAidLiftSU,QSitAidLiftSl,QMovAidNone,QMovAidMon,
 QMovAidSli,QMovAidBedSt,QMovAidBedMec,QMovAidSlSh,QMovAidLiftMachLa,QTransAidNone,QTransAidSli,QTransAidBedSt,
 QTransAidLiftMach,QTransAidLiftLay,QTransAidLiftMachSl,QTransAidLiftMachSU,QMobAidNone,QMobAidStick,QMobAidFra,
 QMobAidStMach,QMobAidLiftMachLay,QMobAidLiftMachSl,QMobAidLiftMachSU,QMobAidWC,QMobAidShCh,QConsidAbCom,QConsidUnComp,
 QConsidBal,QConsidUnBal,QMovLiftMachSl,QMovLiftMachSU,QUESCreateDate,QUESDate,QUESCreateTime,QUESTime,QHOSPITAL,HOSPDesc
 ;s ()=0
 s (PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,PAPMIDOB,
 QAdmDt,QAdmtm,QPresentProbl,CQBreathingProb, QBrProblDet,CQAsthma,QAsthmaDet,CQCardiacProbl,QCardiacDet,
 CQPacemaker, QPacemakerDet,CQBleedingProbl,QBleedingDetails,CQAntiCoag,QAnticoagDet,CQDiabetes,QDiabetesDet,
 CQHeartburn,QHeartburnDet,CQPreviousCVA,QPrevCVADet,CQACAS,QACASDet,CQHypertension,QHypertensionDet,CQKidneyProbl,
 QKidneyDet,CQRheumaticFever,QRheumaticDet,CQTetanus,QTetanusDet,CQThrombosis,QThrombDet,CQCancer,QCancerDet,
 CQBloodTransf,QBloodDet,CQEpilepsy,QEpilepsyDet,CQRecentFalls,QRecentFallsDet,CQOtherHistory,QOtherHistDet,QPrevOps,
 QSeriousIllness,QSmoking,QAlcohol,QFamilyHist,QTemp,QPulse,
 QTempObsDR,QResps,QRespsObsDR,QCough,QSaO2,QSaO2ObsDR,QWeight,QWeightObsDR,
 QUrinalysis,QUrinalysisObsDR,QMentalAssessment,QCirculation,QComments,QPtUstanding,QAppetiteProbl,QAssistReqd,QSpDietNeeds)=""
 s (QBladderProbl,QBowelProbl,QSleepingHabits,CQSedative,QMobAssist,QHygNormalHab,QCommunic,CQSupportiveAids,QDentures,
 QHearingAid,QGlasses,QCrutches,QInterpreter,CQSitting,CQMoving,CQTransferring,
 CQMobility,CQMobilityAids,QRegCorrect,QIntro,QVisiting,QSmokingPolicy,QMenu,QTelephone,QBathroom,
 QCallBell,QInfoBook,QPtSignature,QPtSignDT,QReligion,CQReqMinister,CQAnointed,QSpCultural,QDenturesDet,QHearingDet,
 QGlassesDet,QCrutchesDet,QBPSyst,QBPSystObsDR,QBPDias,QBPDiasObsDR,QRandBlSuOb,QRandBlSuObObsDR,QSitAidNone,QSitAidMon,
 QSitAidSlide,QSitAidBedSt,QSitAidPole,QSitAidBedMech,QSitAidLiftLay,QSitAidLiftSU,QSitAidLiftSl,QMovAidNone,QMovAidMon,
 QMovAidSli,QMovAidBedSt,QMovAidBedMec,QMovAidSlSh,QMovAidLiftMachLa,QTransAidNone,QTransAidSli,QTransAidBedSt,
 QTransAidLiftMach,QTransAidLiftLay,QTransAidLiftMachSl,QTransAidLiftMachSU,QMobAidNone,QMobAidStick,QMobAidFra,
 QMobAidStMach,QMobAidLiftMachLay,QMobAidLiftMachSl,QMobAidLiftMachSU,QMobAidWC,QMobAidShCh,QConsidAbCom,QConsidUnComp,
 QConsidBal,QConsidUnBal,QMovLiftMachSl,QMovLiftMachSU,QUESCreateDate,QUESDate,QUESCreateTime,QUESTime,HOSPDesc,EpisodeNo)=""
 s QHOSPITAL=0
 s ind=1

 //s ^bernard("2")=(2)
 
 &sql(declare MHSPatAssess cursor for
 
 select distinct
QUESPAPatMasDR->PAPMI_No,
QUESPAPatMasDR->PAPMI_Name,
QUESPAPatMasDR->PAPMI_Name2,
QUESPAPatMasDR->PAPMI_Name3,
QUESPAPatMasDR->PAPMI_DOB,
QAdmDt,QAdmtm,lower(QPresentProbl),CQBreathingProb, QBrProblDet,CQAsthma,QAsthmaDet,CQCardiacProbl,QCardiacDet,
CQPacemaker, QPacemakerDet,CQBleedingProbl,QBleedingDetails,CQAntiCoag,QAnticoagDet,CQDiabetes,QDiabetesDet,
CQHeartburn,QHeartburnDet,CQPreviousCVA,QPrevCVADet,CQACAS,QACASDet,CQHypertension,QHypertensionDet,CQKidneyProbl,
QKidneyDet,CQRheumaticFever,QRheumaticDet,CQTetanus,QTetanusDet,CQThrombosis,QThrombDet,CQCancer,QCancerDet,
CQBloodTransf,QBloodDet,CQEpilepsy,QEpilepsyDet,CQRecentFalls,QRecentFallsDet,CQOtherHistory,QOtherHistDet,QPrevOps,
QSeriousIllness,QSmoking,QAlcohol,QFamilyHist,QTemp,QPulse,
QTempObsDR,QResps,QRespsObsDR,QCough,QSaO2,QSaO2ObsDR,QWeight,QWeightObsDR,
QUrinalysis,QUrinalysisObsDR,QMentalAssessment,QCirculation,QComments,QPtUstanding,QAppetiteProbl,QAssistReqd,QSpDietNeeds,
QBladderProbl,QBowelProbl,QSleepingHabits,CQSedative,QMobAssist,QHygNormalHab,QCommunic,CQSupportiveAids,QDentures,
QHearingAid,QGlasses,QCrutches,QInterpreter,CQSitting,CQMoving,CQTransferring,
CQMobility,CQMobilityAids,QRegCorrect,QIntro,QVisiting,QSmokingPolicy,QMenu,QTelephone,QBathroom,
QCallBell,QInfoBook,QPtSignature,QPtSignDT,QReligion,CQReqMinister,CQAnointed,QSpCultural,QDenturesDet,QHearingDet,
QGlassesDet,QCrutchesDet,QBPSyst,QBPSystObsDR,QBPDias,QBPDiasObsDR,QRandBlSuOb,QRandBlSuObObsDR,QSitAidNone,QSitAidMon,
QSitAidSlide,QSitAidBedSt,QSitAidPole,QSitAidBedMech,QSitAidLiftLay,QSitAidLiftSU,QSitAidLiftSl,QMovAidNone,QMovAidMon,
QMovAidSli,QMovAidBedSt,QMovAidBedMec,QMovAidSlSh,QMovAidLiftMachLa,QTransAidNone,QTransAidSli,QTransAidBedSt,
QTransAidLiftMach,QTransAidLiftLay,QTransAidLiftMachSl,QTransAidLiftMachSU,QMobAidNone,QMobAidStick,QMobAidFra,
QMobAidStMach,QMobAidLiftMachLay,QMobAidLiftMachSl,QMobAidLiftMachSU,QMobAidWC,QMobAidShCh,QConsidAbCom,QConsidUnComp,
QConsidBal,QConsidUnBal,QMovLiftMachSl,QMovLiftMachSU,QUESCreateDate,QUESDate,QUESCreateTime,QUESTime,QHOSPITAL,
HOSP_Desc,
PAADM_AdmNo


from questionnaire.QMHSPA,SQLUser.CT_Hospital,SQLUser.PA_Adm where QUESPAPatMasDR=:PatientID and HOSP_RowId*=QHOSPITAL and QUESPAAdmDR=PAADM_RowId
and QUESPAADMDR=:EpisodeID

)
	
	
 &sql(open MHSPatAssess)

  //fetch first row 
  
 &sql(fetch MHSPatAssess into :PAPMINo,:PAPMIName,:PAPMIName2,:PAPMIName3,:PAPMIDOB,
 :QAdmDt,:QAdmtm,:QPresentProbl,:CQBreathingProb,:QBrProblDet,:CQAsthma,:QAsthmaDet,:CQCardiacProbl,:QCardiacDet,
 :CQPacemaker,:QPacemakerDet,:CQBleedingProbl,:QBleedingDetails,:CQAntiCoag,:QAnticoagDet,:CQDiabetes,:QDiabetesDet,
 :CQHeartburn,:QHeartburnDet,:CQPreviousCVA,:QPrevCVADet,:CQACAS,:QACASDet,:CQHypertension,:QHypertensionDet,:CQKidneyProbl,
 :QKidneyDet,:CQRheumaticFever,:QRheumaticDet,:CQTetanus,:QTetanusDet,:CQThrombosis,:QThrombDet,:CQCancer,:QCancerDet,
 :CQBloodTransf,:QBloodDet,:CQEpilepsy,:QEpilepsyDet,:CQRecentFalls,:QRecentFallsDet,:CQOtherHistory,:QOtherHistDet,:QPrevOps,
 :QSeriousIllness,:QSmoking,:QAlcohol,:QFamilyHist,:QTemp,:QPulse,
 :QTempObsDR,:QResps,:QRespsObsDR,:QCough,:QSaO2,:QSaO2ObsDR,:QWeight,:QWeightObsDR,
 :QUrinalysis,:QUrinalysisObsDR,:QMentalAssessment,:QCirculation,:QComments,:QPtUstanding,:QAppetiteProbl,:QAssistReqd,:QSpDietNeeds,
 :QBladderProbl,:QBowelProbl,:QSleepingHabits,:CQSedative,:QMobAssist,:QHygNormalHab,:QCommunic,:CQSupportiveAids,:QDentures,
 :QHearingAid,:QGlasses,:QCrutches,:QInterpreter,:CQSitting,:CQMoving,:CQTransferring,
 :CQMobility,:CQMobilityAids,:QRegCorrect,:QIntro,:QVisiting,:QSmokingPolicy,:QMenu,:QTelephone,:QBathroom,
 :QCallBell,:QInfoBook,:QPtSignature,:QPtSignDT,:QReligion,:CQReqMinister,:CQAnointed,:QSpCultural,:QDenturesDet,:QHearingDet,
 :QGlassesDet,:QCrutchesDet,:QBPSyst,:QBPSystObsDR,:QBPDias,:QBPDiasObsDR,:QRandBlSuOb,:QRandBlSuObObsDR,:QSitAidNone,:QSitAidMon,
 :QSitAidSlide,:QSitAidBedSt,:QSitAidPole,:QSitAidBedMech,:QSitAidLiftLay,:QSitAidLiftSU,:QSitAidLiftSl,:QMovAidNone,:QMovAidMon,
 :QMovAidSli,:QMovAidBedSt,:QMovAidBedMec,:QMovAidSlSh,:QMovAidLiftMachLa,:QTransAidNone,:QTransAidSli,:QTransAidBedSt,
 :QTransAidLiftMach,:QTransAidLiftLay,:QTransAidLiftMachSl,:QTransAidLiftMachSU,:QMobAidNone,:QMobAidStick,:QMobAidFra,
 :QMobAidStMach,:QMobAidLiftMachLay,:QMobAidLiftMachSl,:QMobAidLiftMachSU,:QMobAidWC,:QMobAidShCh,:QConsidAbCom,:QConsidUnComp,
 :QConsidBal,:QConsidUnBal,:QMovLiftMachSl,:QMovLiftMachSU,:QUESCreateDate,:QUESDate,:QUESCreateTime,:QUESTime,:QHOSPITAL,:HOSPDesc,:EpisodeNo
 )

 while 'SQLCODE{
 
 s QPresentProbl=$zstrip(QPresentProbl,"<C")
 if $extract(QPresentProbl,2)=$char(1) {
	 s QPresentProbl=$zstrip($extract(QPresentProbl,2,$length(QPresentProbl)),"<C")
 }
 
 s QPrevOps=$zstrip(QPrevOps,"<C")
 if $extract(QPrevOps,2)=$char(1) {
	 s QPrevOps=$zstrip($extract(QPrevOps,2,$length(QPrevOps)),"<C")
 }
 
 s QSeriousIllness=$zstrip(QSeriousIllness,"<C")
 if $extract(QSeriousIllness,2)=$char(1) {
	 s QSeriousIllness=$zstrip($extract(QSeriousIllness,2,$length(QSeriousIllness)),"<C")
 }
 
 s QSmoking=$zstrip(QSmoking,"<C")
 if $extract(QSmoking,2)=$char(1) {
	 s QSmoking=$zstrip($extract(QSmoking,2,$length(QSmoking)),"<C")
 }
 
 s QAlcohol=$zstrip(QAlcohol,"<C")
 if $extract(QAlcohol,2)=$char(1) {
	 s QAlcohol=$zstrip($extract(QAlcohol,2,$length(QAlcohol)),"<C")
 }
 
 s QFamilyHist=$zstrip(QFamilyHist,"<C")
 if $extract(QFamilyHist,2)=$char(1) {
	 s QFamilyHist=$zstrip($extract(QFamilyHist,2,$length(QFamilyHist)),"<C")
 }
 
 s QMentalAssessment=$zstrip(QMentalAssessment,"<C")
 if $extract(QMentalAssessment,2)=$char(1) {
	 s QMentalAssessment=$zstrip($extract(QMentalAssessment,2,$length(QMentalAssessment)),"<C")
 }
 
 s QCirculation=$zstrip(QCirculation,"<C")
 if $extract(QCirculation,2)=$char(1) {
	 s QCirculation=$zstrip($extract(QCirculation,2,$length(QCirculation)),"<C")
 }
 
 s QComments=$zstrip(QComments,"<C")
 if $extract(QComments,2)=$char(1) {
	 s QComments=$zstrip($extract(QComments,2,$length(QComments)),"<C")
 }
 
 s QPtUstanding=$zstrip(QPtUstanding,"<C")
 if $extract(QPtUstanding,2)=$char(1) {
	 s QPtUstanding=$zstrip($extract(QPtUstanding,2,$length(QPtUstanding)),"<C")
 }
 
 s QAppetiteProbl=$zstrip(QAppetiteProbl,"<C")
 if $extract(QAppetiteProbl,2)=$char(1) {
	 s QAppetiteProbl=$zstrip($extract(QAppetiteProbl,2,$length(QAppetiteProbl)),"<C")
 }
 
 s QAssistReqd=$zstrip(QAssistReqd,"<C")
 if $extract(QAssistReqd,2)=$char(1) {
	 s QAssistReqd=$zstrip($extract(QAssistReqd,2,$length(QAssistReqd)),"<C")
 }
 
 s QSpDietNeeds=$zstrip(QSpDietNeeds,"<C")
 if $extract(QSpDietNeeds,2)=$char(1) {
	 s QSpDietNeeds=$zstrip($extract(QSpDietNeeds,2,$length(QSpDietNeeds)),"<C")
 }
 
 s QBladderProbl=$zstrip(QBladderProbl,"<C")
 if $extract(QBladderProbl,2)=$char(1) {
	 s QBladderProbl=$zstrip($extract(QBladderProbl,2,$length(QBladderProbl)),"<C")
 }
 
 s QBowelProbl=$zstrip(QBowelProbl,"<C")
 if $extract(QBowelProbl,2)=$char(1) {
	 s QBowelProbl=$zstrip($extract(QBowelProbl,2,$length(QBowelProbl)),"<C")
 }
 
 s QSleepingHabits=$zstrip(QSleepingHabits,"<C")
 if $extract(QSleepingHabits,2)=$char(1) {
	 s QSleepingHabits=$zstrip($extract(QSleepingHabits,2,$length(QSleepingHabits)),"<C")
 }
 
 s QMobAssist=$zstrip(QMobAssist,"<C")
 if $extract(QMobAssist,2)=$char(1) {
	 s QMobAssist=$zstrip($extract(QMobAssist,2,$length(QMobAssist)),"<C")
 }
 
 s QHygNormalHab=$zstrip(QHygNormalHab,"<C")
 if $extract(QHygNormalHab,2)=$char(1) {
	 s QHygNormalHab=$zstrip($extract(QHygNormalHab,2,$length(QHygNormalHab)),"<C")
 }
 
 s QCommunic=$zstrip(QCommunic,"<C")
 if $extract(QCommunic,2)=$char(1) {
	 s QCommunic=$zstrip($extract(QCommunic,2,$length(QCommunic)),"<C")
 }
 
 s CQSupportiveAids=$zstrip(CQSupportiveAids,"<C")
 if $extract(CQSupportiveAids,2)=$char(1) {
	 s CQSupportiveAids=$zstrip($extract(CQSupportiveAids,2,$length(CQSupportiveAids)),"<C")
 }
 
 s QDentures=$zstrip(QDentures,"<C")
 if $extract(QDentures,2)=$char(1) {
	 s QDentures=$zstrip($extract(QDentures,2,$length(QDentures)),"<C")
 }
 
 s QHearingAid=$zstrip(QHearingAid,"<C")
 if $extract(QHearingAid,2)=$char(1) {
	 s QHearingAid=$zstrip($extract(QHearingAid,2,$length(QHearingAid)),"<C")
 }
 
 s QGlasses=$zstrip(QGlasses,"<C")
 if $extract(QGlasses,2)=$char(1) {
	 s QGlasses=$zstrip($extract(QGlasses,2,$length(QGlasses)),"<C")
 }
 
 s QCrutches=$zstrip(QCrutches,"<C")
 if $extract(QCrutches,2)=$char(1) {
	 s QCrutches=$zstrip($extract(QCrutches,2,$length(QCrutches)),"<C")
 }
 
 s QInterpreter=$zstrip(QInterpreter,"<C")
 if $extract(QInterpreter,2)=$char(1) {
	 s QInterpreter=$zstrip($extract(QInterpreter,2,$length(QInterpreter)),"<C")
 }
 
 s QSpCultural=$zstrip(QSpCultural,"<C")
 if $extract(QSpCultural,2)=$char(1) {
	 s QSpCultural=$zstrip($extract(QSpCultural,2,$length(QSpCultural)),"<C")
 }
 
 d FormatDates
 
 // build the row
 Set ^CacheTemp(repid,ind)=$LB(PAPMINo,PAPMIName,PAPMIName2,PAPMIName3,PAPMIDOB,
 QAdmDt,QAdmtm,QPresentProbl,CQBreathingProb, QBrProblDet,CQAsthma,QAsthmaDet,CQCardiacProbl,QCardiacDet,
 CQPacemaker, QPacemakerDet,CQBleedingProbl,QBleedingDetails,CQAntiCoag,QAnticoagDet,CQDiabetes,QDiabetesDet,
 CQHeartburn,QHeartburnDet,CQPreviousCVA,QPrevCVADet,CQACAS,QACASDet,CQHypertension,QHypertensionDet,CQKidneyProbl,
 QKidneyDet,CQRheumaticFever,QRheumaticDet,CQTetanus,QTetanusDet,CQThrombosis,QThrombDet,CQCancer,QCancerDet,
 CQBloodTransf,QBloodDet,CQEpilepsy,QEpilepsyDet,CQRecentFalls,QRecentFallsDet,CQOtherHistory,QOtherHistDet,QPrevOps,
 QSeriousIllness,QSmoking,QAlcohol,QFamilyHist,QTemp,QPulse,
 QTempObsDR,QResps,QRespsObsDR,QCough,QSaO2,QSaO2ObsDR,QWeight,QWeightObsDR,
 QUrinalysis,QUrinalysisObsDR,QMentalAssessment,QCirculation,QComments,QPtUstanding,QAppetiteProbl,QAssistReqd,QSpDietNeeds,
 QBladderProbl,QBowelProbl,QSleepingHabits,CQSedative,QMobAssist,QHygNormalHab,QCommunic,CQSupportiveAids,QDentures,
 QHearingAid,QGlasses,QCrutches,QInterpreter,CQSitting,CQMoving,CQTransferring,
 CQMobility,CQMobilityAids,QRegCorrect,QIntro,QVisiting,QSmokingPolicy,QMenu,QTelephone,QBathroom,
 QCallBell,QInfoBook,QPtSignature,QPtSignDT,QReligion,CQReqMinister,CQAnointed,QSpCultural,QDenturesDet,QHearingDet,
 QGlassesDet,QCrutchesDet,QBPSyst,QBPSystObsDR,QBPDias,QBPDiasObsDR,QRandBlSuOb,QRandBlSuObObsDR,QSitAidNone,QSitAidMon,
 QSitAidSlide,QSitAidBedSt,QSitAidPole,QSitAidBedMech,QSitAidLiftLay,QSitAidLiftSU,QSitAidLiftSl,QMovAidNone,QMovAidMon,
 QMovAidSli,QMovAidBedSt,QMovAidBedMec,QMovAidSlSh,QMovAidLiftMachLa,QTransAidNone,QTransAidSli,QTransAidBedSt,
 QTransAidLiftMach,QTransAidLiftLay,QTransAidLiftMachSl,QTransAidLiftMachSU,QMobAidNone,QMobAidStick,QMobAidFra,
 QMobAidStMach,QMobAidLiftMachLay,QMobAidLiftMachSl,QMobAidLiftMachSU,QMobAidWC,QMobAidShCh,QConsidAbCom,QConsidUnComp,
 QConsidBal,QConsidUnBal,QMovLiftMachSl,QMovLiftMachSU,QUESCreateDate,QUESDate,QUESCreateTime,QUESTime,QHOSPITAL,HOSPDesc,EpisodeNo)
 s ind=ind+1
 //fetch rows
 &sql(fetch MHSPatAssess into :PAPMINo,:PAPMIName,:PAPMIName2,:PAPMIName3,:PAPMIDOB,
 :QAdmDt,:QAdmtm,:QPresentProbl,:CQBreathingProb,:QBrProblDet,:CQAsthma,:QAsthmaDet,:CQCardiacProbl,:QCardiacDet,
 :CQPacemaker,:QPacemakerDet,:CQBleedingProbl,:QBleedingDetails,:CQAntiCoag,:QAnticoagDet,:CQDiabetes,:QDiabetesDet,
 :CQHeartburn,:QHeartburnDet,:CQPreviousCVA,:QPrevCVADet,:CQACAS,:QACASDet,:CQHypertension,:QHypertensionDet,:CQKidneyProbl,
 :QKidneyDet,:CQRheumaticFever,:QRheumaticDet,:CQTetanus,:QTetanusDet,:CQThrombosis,:QThrombDet,:CQCancer,:QCancerDet,
 :CQBloodTransf,:QBloodDet,:CQEpilepsy,:QEpilepsyDet,:CQRecentFalls,:QRecentFallsDet,:CQOtherHistory,:QOtherHistDet,:QPrevOps,
 :QSeriousIllness,:QSmoking,:QAlcohol,:QFamilyHist,:QTemp,:QPulse,
 :QTempObsDR,:QResps,:QRespsObsDR,:QCough,:QSaO2,:QSaO2ObsDR,:QWeight,:QWeightObsDR,
 :QUrinalysis,:QUrinalysisObsDR,:QMentalAssessment,:QCirculation,:QComments,:QPtUstanding,:QAppetiteProbl,:QAssistReqd,:QSpDietNeeds,
 :QBladderProbl,:QBowelProbl,:QSleepingHabits,:CQSedative,:QMobAssist,:QHygNormalHab,:QCommunic,:CQSupportiveAids,:QDentures,
 :QHearingAid,:QGlasses,:QCrutches,:QInterpreter,:CQSitting,:CQMoving,:CQTransferring,
 :CQMobility,:CQMobilityAids,:QRegCorrect,:QIntro,:QVisiting,:QSmokingPolicy,:QMenu,:QTelephone,:QBathroom,
 :QCallBell,:QInfoBook,:QPtSignature,:QPtSignDT,:QReligion,:CQReqMinister,:CQAnointed,:QSpCultural,:QDenturesDet,:QHearingDet,
 :QGlassesDet,:QCrutchesDet,:QBPSyst,:QBPSystObsDR,:QBPDias,:QBPDiasObsDR,:QRandBlSuOb,:QRandBlSuObObsDR,:QSitAidNone,:QSitAidMon,
 :QSitAidSlide,:QSitAidBedSt,:QSitAidPole,:QSitAidBedMech,:QSitAidLiftLay,:QSitAidLiftSU,:QSitAidLiftSl,:QMovAidNone,:QMovAidMon,
 :QMovAidSli,:QMovAidBedSt,:QMovAidBedMec,:QMovAidSlSh,:QMovAidLiftMachLa,:QTransAidNone,:QTransAidSli,:QTransAidBedSt,
 :QTransAidLiftMach,:QTransAidLiftLay,:QTransAidLiftMachSl,:QTransAidLiftMachSU,:QMobAidNone,:QMobAidStick,:QMobAidFra,
 :QMobAidStMach,:QMobAidLiftMachLay,:QMobAidLiftMachSl,:QMobAidLiftMachSU,:QMobAidWC,:QMobAidShCh,:QConsidAbCom,:QConsidUnComp,
 :QConsidBal,:QConsidUnBal,:QMovLiftMachSl,:QMovLiftMachSU,:QUESCreateDate,:QUESDate,:QUESCreateTime,:QUESTime,:QHOSPITAL,:HOSPDesc,:EpisodeNo)
 }

 //s ^zBernard("3")=(3)
 &sql(close MHSPatAssess)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 //s ^zBernard("4")=(4)

 Quit $$$OK


FormatDates
 // Convert the dates to ODBC date format
 If QUESDate Set QUESDate=$ZD(QUESDate,3)
 If QUESCreateDate Set QUESCreateDate=$ZD(QUESCreateDate,3)
 If QAdmDt Set QAdmDt=$ZD(QAdmDt,3)
 If QPtSignDT Set QPtSignDT=$ZD(QPtSignDT,3)
 If PAPMIDOB Set PAPMIDOB=$ZD(PAPMIDOB,3)
 
 If QAdmtm Set QAdmtm=$ZTIME(QAdmtm,1)
 If QUESTime Set QUESTime=$ZTIME(QUESTime,1)
 If QUESCreateTime Set QUESCreateTime=$ZTIME(QUESCreateTime,1)
 
 Quit
]]></Implementation>
</Method>

<Method name="MHSPatAssessFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)

 Quit $$$OK
]]></Implementation>
</Method>

<Query name="MHSPatAssess">
<Description>
GHA List reports Stored Procedure
It expects 2 parameter of type date and will return a list of records:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time</Description>
<Type>%Library.Query</Type>
<FormalSpec>HospitalID:%Integer,PatientID:%Integer,EpisodeID:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAPMINo:%String(MAXLEN=255),PAPMIName:%String(MAXLEN=255),PAPMIName2:%String(MAXLEN=255),PAPMIName3:%String(MAXLEN=255),PAPMIDOB:%Date,QAdmDt:%Date,QAdmtm:%String(MAXLEN=255),QPresentProbl:%String(MAXLEN=255),CQBreathingProb:%String(MAXLEN=255), QBrProblDet:%String(MAXLEN=255),CQAsthma:%String(MAXLEN=255),QAsthmaDet:%String(MAXLEN=255),CQCardiacProbl:%String(MAXLEN=255),QCardiacDet:%String(MAXLEN=255),CQPacemaker:%String(MAXLEN=255), QPacemakerDet:%String(MAXLEN=255),CQBleedingProbl:%String(MAXLEN=255),QBleedingDetails:%String(MAXLEN=255),CQAntiCoag:%String(MAXLEN=255),QAnticoagDet:%String(MAXLEN=255),CQDiabetes:%String(MAXLEN=255),QDiabetesDet:%String(MAXLEN=255),CQHeartburn:%String(MAXLEN=255),QHeartburnDet:%String(MAXLEN=255),CQPreviousCVA:%String(MAXLEN=255),QPrevCVADet:%String(MAXLEN=255),CQACAS:%String(MAXLEN=255),QACASDet:%String(MAXLEN=255),CQHypertension:%String(MAXLEN=255),QHypertensionDet:%String(MAXLEN=255),CQKidneyProbl:%String(MAXLEN=255),QKidneyDet:%String(MAXLEN=255),CQRheumaticFever:%String(MAXLEN=255),QRheumaticDet:%String(MAXLEN=255),CQTetanus:%String(MAXLEN=255),QTetanusDet:%String(MAXLEN=255),CQThrombosis:%String(MAXLEN=255),QThrombDet:%String(MAXLEN=255),CQCancer:%String(MAXLEN=255),QCancerDet:%String(MAXLEN=255),CQBloodTransf:%String(MAXLEN=255),QBloodDet:%String(MAXLEN=255),CQEpilepsy:%String(MAXLEN=255),QEpilepsyDet:%String(MAXLEN=255),CQRecentFalls:%String(MAXLEN=255),QRecentFallsDet:%String(MAXLEN=255),CQOtherHistory:%String(MAXLEN=255),QOtherHistDet:%String(MAXLEN=255),QPrevOps:%String(MAXLEN=255),QSeriousIllness:%String(MAXLEN=255),QSmoking:%String(MAXLEN=255),QAlcohol:%String(MAXLEN=255),QFamilyHist:%String(MAXLEN=255),QTemp:%String(MAXLEN=255),QPulse:%String(MAXLEN=255),QTempObsDR:%String(MAXLEN=255),QResps:%String(MAXLEN=255),QRespsObsDR:%String(MAXLEN=255),QCough:%String(MAXLEN=255),QSaO2:%String(MAXLEN=255),QSaO2ObsDR:%String(MAXLEN=255),QWeight:%String(MAXLEN=255),QWeightObsDR:%String(MAXLEN=255),QUrinalysis:%String(MAXLEN=255),QUrinalysisObsDR:%String(MAXLEN=255),QMentalAssessment:%String(MAXLEN=255),QCirculation:%String(MAXLEN=255),QComments:%String(MAXLEN=255),QPtUstanding:%String(MAXLEN=255),QAppetiteProbl:%String(MAXLEN=255),QAssistReqd:%String(MAXLEN=255),QSpDietNeeds:%String(MAXLEN=255),QBladderProbl:%String(MAXLEN=255),QBowelProbl:%String(MAXLEN=255),QSleepingHabits:%String(MAXLEN=255),CQSedative:%String(MAXLEN=255),QMobAssist:%String(MAXLEN=255),QHygNormalHab:%String(MAXLEN=255),QCommunic:%String(MAXLEN=255),CQSupportiveAids:%String(MAXLEN=255),QDentures:%String(MAXLEN=255),QHearingAid:%String(MAXLEN=255),QGlasses:%String(MAXLEN=255),QCrutches:%String(MAXLEN=255),QInterpreter:%String(MAXLEN=255),CQSitting:%String(MAXLEN=255),CQMoving:%String(MAXLEN=255),CQTransferring:%String(MAXLEN=255),CQMobility:%String(MAXLEN=255),CQMobilityAids:%String(MAXLEN=255),QRegCorrect:%String(MAXLEN=255),QIntro:%String(MAXLEN=255),QVisiting:%String(MAXLEN=255),QSmokingPolicy:%String(MAXLEN=255),QMenu:%String(MAXLEN=255),QTelephone:%String(MAXLEN=255),QBathroom:%String(MAXLEN=255),QCallBell:%String(MAXLEN=255),QInfoBook:%String(MAXLEN=255),QPtSignature:%String(MAXLEN=255),QPtSignDT:%String(MAXLEN=255),QReligion:%String(MAXLEN=255),CQReqMinister:%String(MAXLEN=255),CQAnointed:%String(MAXLEN=255),QSpCultural:%String(MAXLEN=255),QDenturesDet:%String(MAXLEN=255),QHearingDet:%String(MAXLEN=255),QGlassesDet:%String(MAXLEN=255),QCrutchesDet:%String(MAXLEN=255),QBPSyst:%String(MAXLEN=255),QBPSystObsDR:%String(MAXLEN=255),QBPDias:%String(MAXLEN=255),QBPDiasObsDR:%String(MAXLEN=255),QRandBlSuOb:%String(MAXLEN=255),QRandBlSuObObsDR:%String(MAXLEN=255),QSitAidNone:%String(MAXLEN=255),QSitAidMon:%String(MAXLEN=255),QSitAidSlide:%String(MAXLEN=255),QSitAidBedSt:%String(MAXLEN=255),QSitAidPole:%String(MAXLEN=255),QSitAidBedMech:%String(MAXLEN=255),QSitAidLiftLay:%String(MAXLEN=255),QSitAidLiftSU:%String(MAXLEN=255),QSitAidLiftSl:%String(MAXLEN=255),QMovAidNone:%String(MAXLEN=255),QMovAidMon:%String(MAXLEN=255),QMovAidSli:%String(MAXLEN=255),QMovAidBedSt:%String(MAXLEN=255),QMovAidBedMec:%String(MAXLEN=255),QMovAidSlSh:%String(MAXLEN=255),QMovAidLiftMachLa:%String(MAXLEN=255),QTransAidNone:%String(MAXLEN=255),QTransAidSli:%String(MAXLEN=255),QTransAidBedSt:%String(MAXLEN=255),QTransAidLiftMach:%String(MAXLEN=255),QTransAidLiftLay:%String(MAXLEN=255),QTransAidLiftMachSl:%String(MAXLEN=255),QTransAidLiftMachSU:%String(MAXLEN=255),QMobAidNone:%String(MAXLEN=255),QMobAidStick:%String(MAXLEN=255),QMobAidFra:%String(MAXLEN=255),QMobAidStMach:%String(MAXLEN=255),QMobAidLiftMachLay:%String(MAXLEN=255),QMobAidLiftMachSl:%String(MAXLEN=255),QMobAidLiftMachSU:%String(MAXLEN=255),QMobAidWC:%String(MAXLEN=255),QMobAidShCh:%String(MAXLEN=255),QConsidAbCom:%String(MAXLEN=255),QConsidUnComp:%String(MAXLEN=255),QConsidBal:%String(MAXLEN=255),QConsidUnBal:%String(MAXLEN=255),QMovLiftMachSl:%String(MAXLEN=255),QMovLiftMachSU:%String(MAXLEN=255),QUESCreateDate:%Date,QUESDate:%Date,QUESCreateTime:%String(MAXLEN=255),QUESTime:%String(MAXLEN=255),QHOSPITAL:%Integer,HOSPDesc:%String(MAXLEN=255),EpisodeNo:%String(MAXLEN=255)"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>

<Query name="LookUpHospital">
<Description>
Lookup on Hospital returning all active services</Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>Hospital:%String</FormalSpec>
<SqlQuery><![CDATA[SELECT HOSP_Desc, HOSP_RowId, HOSP_Code
FROM SQLUser.CT_Hospital
WHERE ((%ALPHAUP HOSP_Desc %STARTSWITH %ALPHAUP :Hospital) OR (%ALPHAUP HOSP_Code %STARTSWITH %ALPHAUP :Hospital))
AND (HOSP_DateFrom <= CURRENT_DATE)
AND ((HOSP_DateTo IS NULL) OR (HOSP_DateTo >= CURRENT_DATE))
ORDER BY HOSP_Desc]]></SqlQuery>
<Parameter name="CONTAINID" value="2"/>
<Parameter name="ROWSPEC" value="Description:%String,HIDDEN:%String,Code:%String"/>
</Query>

<Method name="LookUpBrokerHospital">
<ClassMethod>1</ClassMethod>
<FormalSpec>itmjs:%Library.String="",itmjsex:%Library.String="",Hospital:%Library.String=""</FormalSpec>
<Implementation><![CDATA[
 n id,code,desc,activedate

 s (id,code,desc)=""

 ; Try and find a matching code
 &sql(SELECT	HOSP_Desc, HOSP_RowId, HOSP_Code
 INTO	:desc, :id, :code
 FROM	SQLUser.CT_Hospital
 WHERE	((%ALPHAUP HOSP_Desc = %ALPHAUP :Hospital) OR (%ALPHAUP HOSP_Code = %ALPHAUP :Hospital))
 AND (HOSP_DateFrom <= CURRENT_DATE)
 AND ((HOSP_DateTo IS NULL) OR (HOSP_DateTo >= CURRENT_DATE))
 )
 ;
 i SQLCODE s desc=Hospital q 0
 s retval=itmjs_"('"_$ZCVT(desc,"O","JS")_"');"
 i itmjsex'="""" s retval=retval_itmjsex_"('"_$ZCVT(desc,"O","JS")_"^"_id_"^"_$ZCVT(code,"O","JS")_"');"
 &javascript<#(retval)#>
 q 1
]]></Implementation>
</Method>

<Query name="LookUpAlert">
<Description>
Lookup on Alerts </Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>Alert:%String</FormalSpec>
<SqlQuery>SELECT Alert_Desc, Alert_RowId, Alert_Code 
FROM SQLUser.PAC_PatientAlert
WHERE ((%ALPHAUP Alert_Desc %STARTSWITH %ALPHAUP :Alert) OR (%ALPHAUP Alert_Code %STARTSWITH %ALPHAUP :Alert))
ORDER BY Alert_Desc</SqlQuery>
<Parameter name="CONTAINID" value="2"/>
<Parameter name="ROWSPEC" value="Description:%String,HIDDEN:%String,Code:%String"/>
</Query>

<Method name="LookUpBrokerAlert">
<ClassMethod>1</ClassMethod>
<FormalSpec>itmjs:%Library.String="",itmjsex:%Library.String="",Alert:%Library.String=""</FormalSpec>
<Implementation><![CDATA[
 n id,code,desc

 s (id,code,desc)=""

 ; Try and find a matching code
 &sql(SELECT	 Alert_Desc, Alert_Code, Alert_RowId
 INTO	:desc, :code, :id
 FROM	SQLUser.PAC_PatientAlert
 WHERE	((%ALPHAUP Alert_Desc = %ALPHAUP :Alert) OR (%ALPHAUP Alert_Code = %ALPHAUP :Alert))
 )
 ;
 i SQLCODE s desc=Alert q 0
 s retval=itmjs_"('"_$ZCVT(desc,"O","JS")_"');"
 i itmjsex'="""" s retval=retval_itmjsex_"('"_$ZCVT(desc,"O","JS")_"^"_id_"^"_$ZCVT(code,"O","JS")_"');"
 &javascript<#(retval)#>
 q 1
]]></Implementation>
</Method>
</Class>
</Export>
