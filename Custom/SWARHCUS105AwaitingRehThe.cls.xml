<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARHCUS105AwaitingRehThe">
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>62116,44802.382286</TimeCreated>

<Method name="AwaitingRehTheClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="AwaitingRehTheExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer,ReferralId:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 k ^zbernard	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New OEORIItmMastDR,ARCIMRowId,ARCIMDesc,OEORIRowId,OEORIDepProcNotes,PAADMRowId,OEORIItemStatDR,OSTATCode,OSTATDesc,PAADMPAPMIDR,PAADMADMNo,PAADMAdmDate,PAADMAdmTime,
 ROOMDesc,BEDCode,PAADMHospitalDR,PAADMCurrentWardDR,
 PAADMType,PAADMConfirmReferral,PAADMFamilyDoctor,CTPCPDesc,PAADMMainMRADMDR,PAPERAgeYr,PAPMINo,PAPMIName,PAPMIName2,PAPERDob,CTSexDesc,MRADMPresentComplaint
 s (PAADMRowId,OEORIItemStatDR,PAADMPAPMIDR,PAADMHospitalDR,PAADMCurrentWardDR,PAADMMainMRADMDR)=0
 s (OEORIItmMastDR,ARCIMRowId,ARCIMDesc,OEORIRowId,OEORIDepProcNotes, OSTATCode,OSTATDesc,PAADMAdmNo,PAADMAdmDate,PAADMAdmTime,ROOMDesc,BEDCode,PAADMType,PAADMConfirmReferral,PAADMFamilyDoctor,PAPERAgeYr,
 PAPMINo,PAPMIName,PAPMIName2,PAPERDob,CTSexDesc,MRADMPresentComplaint)=""
 
  
 s ind=1
 
 &sql(declare AwaitingRehThe cursor for 

select
 OEORI_ItmMast_DR,
 OEORI_ItmMast_DR->ARCIM_RowId,
 OEORI_ItmMast_DR->ARCIM_Desc,
 OEORI_RowId,
 OEORI_DepProcNotes,
 a.PAADM_RowId,
 OEORI_ItemStat_DR,
 OEORI_ItemStat_DR->OSTAT_Code,
 OEORI_ItemStat_DR->OSTAT_Desc,
 a.PAADM_PAPMI_DR,
 a.PAADM_AdmNo,
 a.PAADM_AdmDate,
 a.PAADM_AdmTime,
 a.PAADM_CurrentRoom_DR->ROOM_Desc,
 a.PAADM_CurrentBed_DR->BED_Code,
 a.PAADM_Hospital_DR,
 a.PAADM_CurrentWard_DR,
 a.PAADM_Type,a.PAADM_ConfirmReferral,a.PAADM_FamilyDoctor,
 a.PAADM_AdmDocCodeDR->CTPCP_Desc,
 a.PAADM_MainMRADM_DR,
 PAPMI_PAPER_DR->PAPER_AgeYr,
 PAPMI_No,
 PAPMI_Name,
 PAPMI_Name2,
 PAPMI_PAPER_DR->PAPER_Dob,
 PAPMI_Sex_DR->CTSex_Desc,
 MRADM_PresentComplaint

 FROM   sqluser.OE_Order, sqluser.OE_OrdItem,SQLUser.PAC_BEDADM,sqluser.PA_Adm a inner join sqluser.PA_PatMas on a.PAADM_PAPMI_DR=PAPMI_RowId
 inner join sqluser.MR_Adm on sqluser.MR_Adm.MRADM_RowId = a.PAADM_MainMRADM_DR
 
 where PAC_BedAdm.ADM_PAADM_DR=a.PAADM_RowID and a.PAADM_Hospital_DR=:Hospital and a.PAADM_DischgDate is null AND
       OEORD_RowId=OEORI_OEORD_ParRef and
        OEORD_ADM_DR=a.PAADM_RowId and
        OEORI_SttDat >= a.PAADM_AdmDate
and OEORI_ItmMast_DR=:ReferralId
AND (OEORI_ItemStat_DR=1 OR OEORI_ItemStat_DR=12)
 )
 
 &sql(open AwaitingRehThe)

  //fetch first row 
 &sql(fetch AwaitingRehThe into :OEORIItmMastDR,:ARCIMRowId,:ARCIMDesc,:OEORIRowId,:OEORIDepProcNotes,:PAADMRowId,:OEORIItemStatDR,:OSTATCode,:OSTATDesc,:PAADMPAPMIDR,:PAADMAdmNo,:PAADMAdmDate,:PAADMAdmTime,:ROOMDesc,:BEDCode,
 :PAADMHospitalDR,:PAADMCurrentWardDR,:PAADMType,:PAADMConfirmReferral,:PAADMFamilyDoctor,:CTPCPDesc,:PAADMMainMRADMDR,:PAPERAgeYr,:PAPMINo,:PAPMIName,:PAPMIName2,
 :PAPERDob,:CTSexDesc,:MRADMPresentComplaint
 )

 while 'SQLCODE{

 d FormatDates
 d FormatTimes
 s OEORIDepProcNotes=$zstrip(OEORIDepProcNotes,"*C")
 //s PAADMChaplainChurchAddress=$zstrip(PAADMChaplainChurchAddress,"*C")
 //s PAADMRefOrgAddress=$zstrip(PAADMRefOrgAddress,"*C")
 // build the row
 Set ^CacheTemp(repid,ind)=$LB(OEORIItmMastDR,ARCIMRowId,ARCIMDesc,OEORIRowId,OEORIDepProcNotes,PAADMRowId,OEORIItemStatDR,OSTATCode,OSTATDesc,PAADMPAPMIDR,PAADMAdmNo,PAADMAdmDate,PAADMAdmTime,ROOMDesc,BEDCode,PAADMHospitalDR,PAADMCurrentWardDR,
 PAADMType,PAADMConfirmReferral,PAADMFamilyDoctor,CTPCPDesc,PAADMMainMRADMDR,PAPERAgeYr,PAPMINo,PAPMIName,PAPMIName2,PAPERDob,CTSexDesc,MRADMPresentComplaint)
 s ind=ind+1
 //fetch rows
 &sql(fetch AwaitingRehThe into :OEORIItmMastDR,:ARCIMRowId,:ARCIMDesc,:OEORIRowId,:OEORIDepProcNotes,:PAADMRowId,:OEORIItemStatDR,:OSTATCode,:OSTATDesc,:PAADMPAPMIDR,:PAADMAdmNo,:PAADMAdmDate,:PAADMAdmTime,:ROOMDesc,:BEDCode,:PAADMHospitalDR,:PAADMCurrentWardDR,
 :PAADMType,:PAADMConfirmReferral,:PAADMFamilyDoctor,:CTPCPDesc,:PAADMMainMRADMDR,:PAPERAgeYr,:PAPMINo,:PAPMIName,:PAPMIName2,:PAPERDob,:CTSexDesc,:MRADMPresentComplaint)
 }

 &sql(close AwaitingRehThe)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK


FormatDates
 // Convert the dates to ODBC date format
 If PAADMAdmDate Set PAADMAdmDate=$ZD(PAADMAdmDate,3)
 If PAPERDob Set PAPERDob=$ZD(PAPERDob,3)
 Quit

FormatTimes
 // Convert the times to ODBC time format
 If PAADMAdmTime Set PAADMAdmTime=$ZT(PAADMAdmTime,1)
 Quit
]]></Implementation>
</Method>

<Method name="AwaitingRehTheFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)

 Quit $$$OK
]]></Implementation>
</Method>

<Query name="AwaitingRehThe">
<Description>
GHA List reports Stored Procedure
It expects 2 parameter of type date and will return a list of records:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time</Description>
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer,ReferralId:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="OEORIItmMastDR:%String(MAXLEN=255),ARCIMRowId:%String(MAXLEN=255),ARCIMDesc:%String(MAXLEN=255),OEORIRowId:%String(MAXLEN=255),OEORIDepProcNotes:%String(MAXLEN=32000),PAADMRowId:%Integer,OEORIItemStatDR:%Integer,OSTATCode:%String(MAXLEN=255),OSTATDesc:%String(MAXLEN=255),PAADMPAPMIDR:%Integer,PAADMAdmNo:%String(MAXLEN=255),PAADMAdmDate:%String(MAXLEN=255),PAADMAdmTime:%String(MAXLEN=255),ROOMDesc:%String(MAXLEN=255),BEDCode:%String(MAXLEN=255),PAADMHospitalDR:%Integer,PAADMCurrentWardDR:%Integer,PAADMType:%String(MAXLEN=255),PAADMConfirmReferral:%String(MAXLEN=255),PAADMFamilyDoctor:%String(MAXLEN=255),CTPCPDesc:%String(MAXLEN=255),PAADMMainMRADMDR:%Integer,PAPERAgeYr:%String(MAXLEN=255),PAPMINo:%String(MAXLEN=255),PAPMIName:%String(MAXLEN=255),PAPMIName2:%String(MAXLEN=255),PAPERDob:%String(MAXLEN=255),CTSexDesc:%String(MAXLEN=255),MRADMPresentComplaint:%String(MAXLEN=255)"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
