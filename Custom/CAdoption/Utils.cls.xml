<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.CAdoption.Utils">
<IncludeCode>Custom.CAdoption.Utils</IncludeCode>
<ProcedureBlock>0</ProcedureBlock>
<Super>%RegisteredObject</Super>
<TimeCreated>63609,65537.694299</TimeCreated>

<Parameter name="RoutineVersion">
<Default>3.2.1</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// add T2010 support

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// version 3.0.0

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// do ##class(Custom.CAdoption.Utils).CollectAll("/tmp/",$ZDATEH("2015-08-07",3),$ZDATEH("2015-08-07",3),1)

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// do ##class(Custom.CAdoption.Utils).CollectAll("/tmp/",$ZDATEH("2015-08-07",3),$ZDATEH("2015-08-07",3),2)

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// do ##class(Custom.CAdoption.Utils).CollectAll("/tmp/",$ZDATEH("2015-08-01",3),$ZDATEH("2015-08-15",3))

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// do ##class(Custom.CAdoption.Utils).CollectAll("","","/tmp",$ZDATEH("2016-01-01",3),$ZDATEH("2016-04-30",3))

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// disable parsing audit while reading user login

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 3.2.0 update order date to use order date not start date and extract all patients and episodes

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 3.2.1 add extra validation for null site code and region code , also normalize path to add back slash if missing

]]></Content>
</UDLText>

<Method name="GetTCVersion">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	q $p($p(##class(websys.Configuration).VersionString()," ",2),".",1)
]]></Implementation>
</Method>

<Method name="CollectAll">
<ClassMethod>1</ClassMethod>
<FormalSpec>regioncode:%String,sitecode:%String,path:%String,fromdate:%String,todate:%String</FormalSpec>
<Implementation><![CDATA[
	
	
 
	 
	
	W !,"Collect adoption data"
	
	w !,"TC Version:",##class(websys.Configuration).VersionString()
	
	 
	
	
	if $g(regioncode)="" 
	{
		set regioncode=..GetRegion()
			
		s:regioncode="" regioncode="Global"	

	}
	
	if $g(sitecode)="" 
	{
		s sitecode=..GetSite()
			
		s:sitecode="" sitecode="Trak"	

	}
	 
	
	s path=##class(%Library.File).NormalizeDirectory(path)
	
	
	
	
	set path=path_""_regioncode_"."_sitecode_"."
	
	 
 

		 
 
	do ..ExportQuery("Custom.CAdoption.Utils:UserCTHospQuery",path_"user.cthospital.csv",fromdate,todate,1,regioncode,sitecode)
	
	do ..ExportQuery("Custom.CAdoption.Utils:UserSSUserDefWinQuery",path_"user.ssuserdefwin.csv",fromdate,todate,1,regioncode,sitecode)
		
	do ..ExportQuery("Custom.CAdoption.Utils:UserSSUserQuery",path_"user.ssuser.csv",fromdate,todate,1,regioncode,sitecode)

	do ..ExportQuery("Custom.CAdoption.Utils:UserOrderItemQuery",path_"user.orderitem.csv",fromdate,todate,0,regioncode,sitecode)
	
	do ..ExportQuery("Custom.CAdoption.Utils:WebsysPrintHistoryQuery",path_"websys.printhistory.csv",fromdate,todate,0,regioncode,sitecode)
	
	do ..ExportQuery("Custom.CAdoption.Utils:WebsysMonitorQuery",path_"websys.monitor.csv",fromdate,todate,0,regioncode,sitecode)
	
	do ..ExportQuery("Custom.CAdoption.Utils:WebsysMonitorLicQuery",path_"websys.monitorlic.csv",fromdate,todate,0,regioncode,sitecode)

	do ..ExportQuery("Custom.CAdoption.Utils:UserOrderAlertsMsgQuery",path_"user.orderalertmsg.csv",fromdate,todate,0,regioncode,sitecode)
	
	do ..ExportQuery("Custom.CAdoption.Utils:UserQuesQuery",path_"user.questionnaire.csv",fromdate,todate,0,regioncode,sitecode)
	
	do ..ExportQuery("Custom.CAdoption.Utils:UserPAQue1Query",path_"user.paque1.csv",fromdate,todate,0,regioncode,sitecode)
	
	do ..ExportQuery("Custom.CAdoption.Utils:WebsysLogQuery",path_"websys.log.csv",fromdate,todate,0,regioncode,sitecode)
	
 
	
	do ..ExportQuery("Custom.CAdoption.Utils:PAPatMasQuery",path_"user.papatmas.csv",fromdate,todate,1,regioncode,sitecode)
	 
	do ..ExportQuery("Custom.CAdoption.Utils:UserPAAdmQuery",path_"user.paadm.csv",fromdate,todate,1,regioncode,sitecode)
	
		
	do ..ExportQuery("Custom.CAdoption.Utils:UserObservationsQuery",path_"user.observations.csv",fromdate,todate,0,regioncode,sitecode)
		
	do ..ExportQuery("Custom.CAdoption.Utils:UserDiagnosisQuery",path_"user.diagnosis.csv",fromdate,todate,0,regioncode,sitecode)
		
	do ..ExportQuery("Custom.CAdoption.Utils:UserClinicalNotesQuery",path_"user.clinicalnotes.csv",fromdate,todate,0,regioncode,sitecode)
		
	do ..ExportQuery("Custom.CAdoption.Utils:UserEncountersQuery",path_"user.encounters.csv",fromdate,todate,0,regioncode,sitecode)
		
	do ..ExportQuery("Custom.CAdoption.Utils:UserEncEntriesQuery",path_"user.encentries.csv",fromdate,todate,0,regioncode,sitecode)
		
	do ..ExportQuery("Custom.CAdoption.Utils:UserOTBookingQuery",path_"user.otbooking.csv",fromdate,todate,0,regioncode,sitecode)
		
	do ..ExportQuery("Custom.CAdoption.Utils:UserAnesSummaryQuery",path_"user.anessummary.csv",fromdate,todate,0,regioncode,sitecode)
		
	do ..ExportQuery("Custom.CAdoption.Utils:UserClinicalSummaryQuery",path_"user.clinicalsummary.csv",fromdate,todate,0,regioncode,sitecode)
		
	do ..ExportQuery("Custom.CAdoption.Utils:UserClinicalDocumentsQuery",path_"user.clinicaldocs.csv",fromdate,todate,0,regioncode,sitecode)
		
	do ..ExportQuery("Custom.CAdoption.Utils:UserAnnImagesQuery",path_"user.annimages.csv",fromdate,todate,0,regioncode,sitecode)
		
	do ..ExportQuery("Custom.CAdoption.Utils:UserVisualRulesAuditQuery",path_"user.visualruleaudit.csv",fromdate,todate,0,regioncode,sitecode)
		
	do ..ExportQuery("Custom.CAdoption.Utils:UserAlertsQuery",path_"user.alerts.csv",fromdate,todate,0,regioncode,sitecode)
		
	do ..ExportQuery("Custom.CAdoption.Utils:UserAllergyQuery",path_"user.allergies.csv",fromdate,todate,0,regioncode,sitecode)
		
	do ..ExportQuery("Custom.CAdoption.Utils:UserSocialHistoryQuery",path_"user.sochistory.csv",fromdate,todate,0,regioncode,sitecode)
		
	do ..ExportQuery("Custom.CAdoption.Utils:UserPastHistoryQuery",path_"user.pasthistory.csv",fromdate,todate,0,regioncode,sitecode)
		
	do ..ExportQuery("Custom.CAdoption.Utils:UserSuregryHistoryQuery",path_"user.surgeryhistory.csv",fromdate,todate,0,regioncode,sitecode)
		
	do ..ExportQuery("Custom.CAdoption.Utils:UserFamilyHistoryQuery",path_"user.familyhistory.csv",fromdate,todate,0,regioncode,sitecode)
		
	do ..ExportQuery("Custom.CAdoption.Utils:UserPatProblemsQuery",path_"user.patproblems.csv",fromdate,todate,0,regioncode,sitecode)
		 
	do ..ExportQuery("Custom.CAdoption.Utils:UserCurrentConditionQuery",path_"user.currcondition.csv",fromdate,todate,0,regioncode,sitecode)
 
	do ..ExportQuery("Custom.CAdoption.Utils:UserSSUserLoginQuery",path_"user.ssuserlogin.csv",fromdate,todate,0,regioncode,sitecode)
		
	do ..ExportQuery("Custom.CAdoption.Utils:UserSiteQuery",path_"user.site.csv",fromdate,todate,1,regioncode,sitecode)
	
	Quit 1
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// do ##class(Custom.CAdoption.Utils).CollectQuestionaires("/tmp/",+$h,+$h)

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/*
ClassMethod CollectQuestionaires(path As %String, fromdate As %String, todate As %String)
{

	
	set filename=path_"user.questionnaire.csv"
	
	do ..ExportQuestionaires(path_"user.questionnaire.csv",fromdate,todate)
	
	
	
	Quit 1
}

ClassMethod ExportQuestionaires(filename As %String, fromdate As %String, todate As %String)
{
	set filename=$zconvert(filename,"L")


 	Set file = ##class(%File).%New(filename)
	
	 set status=file.Open("NWR")
 	
 	if $$$ISERR(status) do $System.Status.DisplayError(status)
 
 	set headers=0
 	set counter=0
 	
 	set (WinCode)=""
 	 
 	
 	&SQL(DECLARE qCursor CURSOR FOR select Win_Code into :WinCode from SQLUser.SS_UserDefWindow)
 	
 	&sql(OPEN qCursor)
 	
    FOR { &sql(FETCH qCursor)
        QUIT:SQLCODE 
        
        	W !,"Fecth questionaires : " ,WinCode
        
        	for date=fromdate:1:todate
 			{
	 			
	 			SET myquery="select QUESSSUserDefWindowDR->win_code as WinCode ,QUESSSUserDefWindowDR->win_desc as WinDesc ,QUESSSUserDefWindowDR->WIN_WindowGroup_DR->WINGRP_Desc ,TO_CHAR(QUESCreateDate,'YYYY-MM-DD') As QUESCreateDate ,TO_CHAR(QUESCreateTime,'HH24') As QUESCreateTime ,:regioncode||'-'||:sitecode||'-USER-'||QUESCreateUserDR as QUESCreateUserDR ,TO_CHAR(QUESDate,'YYYY-MM-DD') As QUESDate ,TO_CHAR(QUESTime,'HH24') As QUESTime ,:regioncode||'-'||:sitecode||'-USER-'||QUESUserDR as QUESUserDR ,QUESStatusDR->NNS_Desc as QUESStatus ,QUESReasonForCorrectionDR->ENTERR_Desc AS QUESReasonForCorrection ,QUESPAAdmDR->PAADM_Type AS AdmType ,:regioncode||'-'||:sitecode||'-HOSP-'||QUESPAAdmDR->PAADM_Hospital_DR AS HospDR ,:regioncode as Region ,:sitecode as Site ,QUESScore,:regioncode||'-'||:sitecode||'-WIN-'||QUESSSUserDefWindowDR->win_code  as  WinID from questionnaire.Q"_WinCode_" where QUESCreateDate="_date
  				
  				//SET rset=##class(%ResultSet.SQL).%Prepare(queryname,.err,"") 
  				
  				SET rset=##class(%ResultSet).%New()
  				SET sc=rset.Prepare(myquery)

  				
  				Do rset.Execute()
	 			
	 			do ..SaveResultset(.rset,.headers,.counter,file)
 			} 
        
 	 }
    
    &sql(CLOSE qCursor)

 	
 	
 	
 	 
 	
 	do file.Flush()
	do file.Close()
	
	
	
	w !,"data saved to"_filename
}
*/
]]></Content>
</UDLText>

<Method name="GetSqlSingleResult">
<ClassMethod>1</ClassMethod>
<FormalSpec>query:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	 
	
	//w ##class(Custom.CAdoption.Utils).GetSqlSingleResult("select count(*) from pa_person")
	set result=""
	SET rsetsql=##class(%ResultSet).%New()
	do rsetsql.Prepare(query)
	Do rsetsql.Execute()
	if (rsetsql.Next())
	{
		if (rsetsql.GetColumnCount()>0)
		{
			set result=rsetsql.Data(rsetsql.GetColumnName(1))	
		}
	}
	quit result
]]></Implementation>
</Method>

<Method name="ExportQuery">
<ClassMethod>1</ClassMethod>
<FormalSpec>queryname,filename,fromdate,todate,onetime="",regioncode,sitecode</FormalSpec>
<Implementation><![CDATA[
	
	
	
	//set filename=$zconvert(filename,"L")
	
	Set rset = ##class(%ResultSet).%New(queryname)

 	Set file = ##class(%File).%New(filename)
	
	 set status=file.Open("NWR")
 	
 	if $$$ISERR(status) do $System.Status.DisplayError(status)
 
 	set headers=0
 	set counter=0
 	
 	if onetime=1
 	{
	 	set start=fromdate
	 	set end=fromdate
	 	
 	}
 	else
 	{
	 	set start=fromdate
	 	set end=todate
	 	
 	}
 	
 	
 	for date=start:1:end
 	{
	 
	  	WRITE !,filename,":",$ZDATE(date) 
	 
	 	set status=rset.Execute(date,fromdate,todate,regioncode,sitecode)
	 	
	 	if $$$ISERR(status) 
	 	
	 	{
		 	do $System.Status.DisplayError(status)
	 	}
	 	else
	 	{
		 	
	 		do ..SaveResultset(.rset,.headers,.counter,file)
	 	}
 	}
 	
 	do file.Flush()
	do file.Close()
	
	
	
	w !,"data saved to"_filename
]]></Implementation>
</Method>

<Method name="SaveResultset">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&rset,&headers,&counter,file]]></FormalSpec>
<Implementation><![CDATA[

	
	While (rset.Next()) {
	 	
	
	 	
	 if (headers=0)	
	 {
		set headers=1	
		 
		set line=""
		
		for i=1:1:rset.GetColumnCount()
		 { 
			 if (line="")
			 { 
				set line=""""_rset.GetColumnName(i)_""""	 
			 }
			 else
			 {
				 set line=line_","_""""_rset.GetColumnName(i)_""""	
				 
			 }
			 
		 }
		 
		 do file.WriteLine(line)
	 }	
	 	
     set counter=counter+1
     
     	set line=""
		for i=1:1:rset.GetColumnCount()
		 { 
		 
		 	set data=..CleanSpecialChars(rset.Data(rset.GetColumnName(i)))
		 
			 if (line="")
			 { 
				set line=""""_data_""""	 
			 }
			 else
			 {
				 set line=line_","_""""_data_""""	
				 
			 }
			 
		 }
     
     	//W !,counter_":"_line
 		do file.WriteLine(line)
 	}
]]></Implementation>
</Method>

<Method name="CleanSpecialChars">
<ClassMethod>1</ClassMethod>
<FormalSpec>data:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	//w ##class(Custom.CAdoption.Utils).CleanSpecialChars("")
	
	set data=$Replace(data,$char(10),"")
	set data=$Replace(data,$char(11),"")
	set data=$Replace(data,$char(10,11),"")
	set data=$Replace(data,"""","")
	set data=$Replace(data,"'","")
	set data=$ZSTRIP(data,"*C")
	 
	quit data
]]></Implementation>
</Method>

<Method name="GetQuestionnaireCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>Condition</FormalSpec>
<Implementation><![CDATA[
 	set count=0
 	SET rsetWin=##class(%ResultSet).%New()
  	SET sc=rsetWin.Prepare("Select Win_Code  from SQLUser.SS_UserDefWindow")
  	Do rsetWin.Execute()
	 While (rsetWin.Next()) {
		 	set WinCode=$G(rsetWin.Data(rsetWin.GetColumnName(1)))
		 	//w !,WinCode
		 	//w !,"select  count(*) from questionnaire.Q"_WinCode_" where "_FieldName_"="_FieldValue  	
		 	
		 	SET myquery="select  count(*) from questionnaire.Q"_WinCode_" where 1=1 "_Condition 				
  			SET rsetQ=##class(%ResultSet).%New()
  			SET sc=rsetQ.Prepare(myquery)
  			Do rsetQ.Execute()
	 		While (rsetQ.Next()) {
		 		set count=count+$G(rsetQ.Data(rsetQ.GetColumnName(1)))
	 		}						
	 }
	quit count
]]></Implementation>
</Method>

<Method name="GetSite">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set site=""
	&SQL(select top 1 SiteCode into :site from websys.Configuration)
	quit site
]]></Implementation>
</Method>

<Method name="GetRegion">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set region=""
	&SQL(select top 1 Region into :region from websys.Configuration)
	quit region
]]></Implementation>
</Method>

<Method name="DateToODBCFormat">
<ClassMethod>1</ClassMethod>
<FormalSpec>date</FormalSpec>
<Implementation><![CDATA[	q $zdate(date,3)
]]></Implementation>
</Method>

<Method name="CloseQuery">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Binary]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	 // Clean up by purging the temporary node in ^CacheTemp global
 	New repid
 	Set repid=$li(QHandle,2)
 	Kill ^CacheTemp("TRAK",repid)
 	Quit $$$OK
]]></Implementation>
</Method>

<Method name="FetchQuery">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)
 Set ind=$o(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 	Set AtEnd=1
 	Set Row=""
 }
 Else      {	// fetch row
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }
 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="PAPatMasQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="PAPMIRowId:%String,Region:%String,Site:%String,DateAdded:%String,Hospital:%String,UserDR:%String,Episodes:%String,Problems:%String"/>
</Query>

<Method name="PAPatMasQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 
  &SQL(DECLARE PAPatMasQuery CURSOR FOR
  select PAPMI_RowId
,PAPMI_RowId->PAPER_DateAdded 
,:regioncode||'-'||:sitecode||'-USER-'||PAPMI_PAPER_DR->PAPER_UserAdded_DR as "AddUser"
from sqluser.pa_patmas where not PAPMI_No is null 
 )
 &SQL(OPEN PAPatMasQuery)
 f  
 {
	 
	 
	 
	 set (PAPMIRowId,DateAdded,Hospital,Allergies,Alerts,Episodes,SocialHistory,FamilyHistory,SurgicalHistory,PastCondition,CurrentCondition,Quesionnaires,Problems)=""
	 &SQL(FETCH PAPatMasQuery into :PAPMIRowId,:DateAdded,:AddUser) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 
	 set DateAdded=..DateToODBCFormat(DateAdded)
	 
	 
	
	 set Episodes =..GetEpisodesCount(" and PAADM_PAPMI_DR="_PAPMIRowId)
	  set Problems =..GetProblemCount(" and PROB_ParRef="_PAPMIRowId)
	  
	 /*
	 set Allergies =..GetAllergyCount(" and ALG_PAPMI_ParRef="_PAPMIRowId)
	  
	 set Alerts =..GetAlertCount(" and ALM_PAPMI_ParRef="_PAPMIRowId)
	 
	 set SocialHistory =..GetSocialHistoryCount(" and SCH_PAPMI_ParRef="_PAPMIRowId)
	 set PastCondition =..GetPastHistoryCount(" and PHIST_ParRef="_PAPMIRowId)
	 
	 
	 
	 set SurgicalHistory =..GetOperationHistoryCount(" and OPER_ParRef="_PAPMIRowId)
	 set FamilyHistory =..GetFamilyHistoryCount(" and FAM_PAPMI_ParRef="_PAPMIRowId)
	 set CurrentCondition =..GetPresentIllnessCount(" and PRESI_ParRef->MRADM_ADM_DR->PAADM_PAPMI_DR="_PAPMIRowId)
	
	  
 
	 set Quesionnaires=..GetQuestionnaireCount(" and QUESPAPatMasDR="_PAPMIRowId_" ")
	 */ 
	  
	 set Hospital=""
	  
	 &sql(select top 1 :regioncode||'-'||:sitecode||'-HOSP-'||PAADM_Hospital_DR   into :Hospital from SQLUser.PA_Adm	where PAADM_PAPMI_DR=:PAPMIRowId)
	 
	  
	 
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(regioncode_"-"_sitecode_"-"_"PAT"_"-"_PAPMIRowId,regioncode,sitecode,DateAdded,Hospital,AddUser,Episodes,Problems)
 }
 &SQL(CLOSE PAPatMasQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetPastHistoryCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*) from SQLUser.PA_PastHistCondition where 1=1  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetOperationHistoryCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*) from SQLUser.PA_Operation where 1=1  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetFamilyHistoryCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*) from SQLUser.PA_Family where 1=1  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetPresentIllnessCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*) from sqluser.MR_PresentIllness where 1=1  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetProblemCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*) from SQLUser.PA_Problem where 1=1  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetSocialHistoryCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*) from SQLUser.PA_SocHist where 1=1  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetAllergyCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*) from SQLUser.PA_Allergy where 1=1  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetAlertCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*)  from SQLUser.PA_AlertMsg	where 1=1  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetEpisodesCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*) from SQLUser.PA_Adm	where 1=1  "_condition
	
	 
	
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetEpisodeProblemsCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>paadmid</FormalSpec>
<Implementation><![CDATA[
	
	set count=0
	
	#if ($$$TCVersion<=2012)
	
		 
	
	#else
	
	&sql(select count(*) from SQLUser.MR_EncLink,SQLUser.MR_EncEntry 
	where LINK_FromTable='User.MREncEntry' and LINK_ToTable='User.PAProblem' 
	and MR_EncEntry.ENTRY_RowId=LINK_FromID and ENTRY_Encounter_DR->ENC_MRAdm_DR->MRADM_ADM_DR=:paadmid)	 
	
	#endif
	
	
	
	quit count
]]></Implementation>
</Method>

<Method name="PAPatMasQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>PAPatMasQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="PAPatMasQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>PAPatMasQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="WebsysPrintHistoryQuery">
<Type>%Query</Type>
<FormalSpec>date:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="PrintDate:%String,PrintTime:%String,PrintDurationTotal:%String,PrintDurationMax:%String,Computer:%String,PrintServer:%String,ServiceID:%String,Report:%String,Status:%String,Printer:%String,UserDR:%String,Location:%String,Region:%String,Site:%String,PrintCount:%String,HospID:%String,Owner:%String"/>
</Query>

<Method name="WebsysPrintHistoryQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 
 
 #if ($$$TCVersion<=2012)
	
	  &SQL(DECLARE WebsysPrintHistoryQuery CURSOR FOR
 select  
TO_CHAR(PrintDate,'YYYY-MM-DD') As "PrintDate"
,TO_CHAR(PrintTime,'HH24') As "PrintTime"
, Sum(PrintDuration)  as "PrintDurationTotal"
, Max(PrintDuration)  as "PrintDurationMax"
,Computer
,''
,ServiceID
,ReportDR->Description as "Report"
,%external(Status) as Status
,PrinterDR->Description as "Printer"
,:regioncode||'-'||:sitecode||'-USER-'||UserDR as "UserDR"
,(select top 1 CTLOC_Desc from SQLUser.CT_Loc where CTLOC_RowID=LocationDR ) as "Location"
,:regioncode as "Region"
,:sitecode as "Site"
,Count(*) as "PrintCount"
,:regioncode||'-'||:sitecode||'-HOSP-'||LocationDR->CTLOC_Hospital_DR->HOSP_RowId
,''
from websys.printhistory
where PrintDate=:date
group by PrintDate,TO_CHAR(PrintTime,'HH24'),Computer,ServiceID,ReportDR,Status,PrinterDR,LocationDR,UserDR)
	 
	
	#else
	
	  &SQL(DECLARE WebsysPrintHistoryQuery CURSOR FOR
 select  
TO_CHAR(PrintDate,'YYYY-MM-DD') As "PrintDate"
,TO_CHAR(PrintTime,'HH24') As "PrintTime"
, Sum(PrintDuration)  as "PrintDurationTotal"
, Max(PrintDuration)  as "PrintDurationMax"
,Computer
,PrintServer
,ServiceID
,ReportDR->Description as "Report"
,%external(Status) as Status
,PrinterDR->Description as "Printer"
,:regioncode||'-'||:sitecode||'-USER-'||UserDR as "UserDR"
,(select top 1 CTLOC_Desc from SQLUser.CT_Loc where CTLOC_RowID=LocationDR ) as "Location"
,:regioncode as "Region"
,:sitecode as "Site"
,Count(*) as "PrintCount"
,:regioncode||'-'||:sitecode||'-HOSP-'||LocationDR->CTLOC_Hospital_DR->HOSP_RowId
,ReportDR->owner
from websys.printhistory
where PrintDate=:date
group by PrintDate,TO_CHAR(PrintTime,'HH24'),Computer,PrintServer,ServiceID,ReportDR,Status,PrinterDR,LocationDR,UserDR)

	
	#endif
 
 &SQL(OPEN WebsysPrintHistoryQuery)
 f  
 {
	 set (PrintDate,PrintTime,PrintDurationTotal,PrintDurationMax,Computer,PrintServer,ServiceID,Report,Status,Printer,UserDR,Location,PrintCount,HospID)=""
	 &SQL(FETCH WebsysPrintHistoryQuery into :PrintDate,:PrintTime,:PrintDurationTotal,:PrintDurationMax,:Computer,:PrintServer,:ServiceID,:Report,:Status,:Printer,:UserDR,:Location,:Region,:Site,:PrintCount,:HospID,:Owner) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 
	 
 
	 
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(PrintDate,PrintTime,PrintDurationTotal,PrintDurationMax,Computer,PrintServer,ServiceID,Report,Status,Printer,UserDR,Location,regioncode,sitecode,PrintCount,HospID,Owner)
 }
 &SQL(CLOSE WebsysPrintHistoryQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="WebsysPrintHistoryQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>WebsysPrintHistoryQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="WebsysPrintHistoryQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>WebsysPrintHistoryQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="WebsysMonitorQuery">
<Type>%Query</Type>
<FormalSpec>date:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="MonitorDate:%String,ClassQuery:%String,Component:%String,Workflow:%String,TimeTotal:%String,TimeMax:%String,GlobalsTotal:%String,GlobalsMax:%String,LinesTotal:%String,LinesMax:%String,MonitorCount:%String,Region:%String,Site:%String,WFOwner:%String,MonitorTime:%String"/>
</Query>

<Method name="WebsysMonitorQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0




  &SQL(DECLARE WebsysMonitorQuery CURSOR FOR
select TO_CHAR(MonitorDate,'YYYY-MM-DD') As "MonitorDate"
,pClassQuery as "ClassQuery"
,pName as "Component"
,(select name from websys.WorkFlow where id=pworkflow) as "Workflow"
,round(sum(pTime),2) as "TimeTotal"
,round(Max(pTime),2) as "TimeMax"
,Sum(pGlobals) as "GlobalsTotal"
,max(pGlobals) as "GlobalsMax"
,sum(pLines) as "LinesTotal"
,max(pLines) as "LinesMax"
,Count(*) as "MonitorCount" 
,:regioncode as "Region"
,:sitecode as "Site"
,TO_CHAR(MonitorTime,'HH24') As "MonitorTime"
from
websys.monitor
where monitordate=:date
group by TO_CHAR(MonitorDate,'YYYY-MM-DD'),pClassQuery,pName,pWorkFlow,TO_CHAR(MonitorTime,'HH24'))
 &SQL(OPEN WebsysMonitorQuery)
 f  
 {
	 set (MonitorDate,ClassQuery,Component,Workflow,TimeTotal,TimeMax,GlobalsTotal,GlobalsMax,LinesTotal,LinesMax,MonitorCount,WFOwner,MonitorTime)=""
	 &SQL(FETCH WebsysMonitorQuery into :MonitorDate,:ClassQuery,:Component,:Workflow,:TimeTotal,:TimeMax,:GlobalsTotal,:GlobalsMax,:LinesTotal,:LinesMax,:MonitorCount,:Region,:Site,:MonitorTime) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 
	 set TimeTotal=$FNUMBER(TimeTotal,"",6)
	 set TimeMax=$FNUMBER(TimeMax,"",6)
	 
	   if (Workflow'="")
	 {
	 		#if ($$$TCVersion<=2012)
	
		 &sql(select '' into :WFOwner from websys.WorkFlow where Name=:Workflow)
	
	#else
	
		&sql(select Owner into :WFOwner from websys.WorkFlow where Name=:Workflow)
	
	#endif 
	 }
	 
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(MonitorDate,ClassQuery,Component,Workflow,TimeTotal,TimeMax,GlobalsTotal,GlobalsMax,LinesTotal,LinesMax,MonitorCount,regioncode,sitecode,WFOwner,MonitorTime)
 }
 &SQL(CLOSE WebsysMonitorQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="WebsysMonitorQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>WebsysMonitorQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="WebsysMonitorQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>WebsysMonitorQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="WebsysLogQuery">
<Type>%Query</Type>
<FormalSpec>date:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="AuditDate:%String,AuditTime:%String,UserDR:%String,CacheUser:%String,ClientIP:%String,Component:%String,HospitalDR:%String,Location:%String,SecurityGroup:%String,Workflow:%String,WorkflowItem:%String,LogCount:%String,Region:%String,Site:%String,SecGroupOwner:%String,WFOwner:%String"/>
</Query>

<Method name="WebsysLogQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 
 
 #if ($$$TCVersion<=2012)
	
	
  &SQL(DECLARE  WebsysLogQuery CURSOR FOR
Select  
TO_CHAR(AuditDate,'YYYY-MM-DD') As "AuditDate"
,TO_CHAR(AuditTime,'HH24') As "AuditTime" 
,:regioncode||'-'||:sitecode||'-USER-'||UserDR as "UserDR"
,CacheUser As "Cache User"
,ClientIP As "ClientIP"
,(select Name from websys.Component where websys.Log.ReferencedId = websys.Component.ID) AS "Component"
,:regioncode||'-'||:sitecode||'-HOSP-'||LogonLocation->CTLOC_Hospital_DR AS "HospitalDR,"
,LogonLocation->CTLOC_Desc AS "Location"
,GroupDR->SSGRP_Desc As "Security Group"
,WorkFlowId->Name As Workflow
,(select Caption from websys.WorkFlowItemDefinition where  websys.Log.WorkFlowItemId=websys.WorkFlowItemDefinition.ID) as "Workflow Item"
,count(*) as LogCount
,:regioncode as "Region"
,:sitecode as "Site"
From websys.Log
where 
AuditDate=:date 
and (select Name from websys.Component where websys.Log.ReferencedId = websys.Component.ID) not in ('epr.ClinTimeLine','PAPerson.Banner','epr.Tabs.Side','epr.floorplan.Messages')
and LogonLocation->CTLOC_Hospital_DR is not null
group by AuditDate,TO_CHAR(AuditTime,'HH24'),UserDR,CacheUser,ClientIP,ReferencedId,LogonLocation,GroupDR,WorkFlowId,WorkFlowItemId,LogonLocation->CTLOC_Hospital_DR)
 &SQL(OPEN  WebsysLogQuery)
 f  
 {
	 set (AuditDat,AuditTime,UserDR,CacheUser,ClientIP,Component,HospitalDR,Location,SecurityGroup,Workflow,WorkflowItem,LogCount,SecGroupOwner,WFOwner)=""
	 &SQL(FETCH  WebsysLogQuery into :AuditDat,:AuditTime,:UserDR,:CacheUser,:ClientIP,:Component,:HospitalDR,:Location,:SecurityGroup,:Workflow,:WorkflowItem,:LogCount,:Region,:Site) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 
	  if (SecurityGroup'="")
	 {
	 	&sql(select '' into :SecGroupOwner from SQLUser.SS_Group where SSGRP_Desc=:SecurityGroup)
	 }
	  if (Workflow'="")
	 {
	 	&sql(select '' into :WFOwner from websys.WorkFlow where Name=:Workflow)
	 }
	 
	 
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(AuditDat,AuditTime,UserDR,CacheUser,ClientIP,Component,HospitalDR,Location,SecurityGroup,Workflow,WorkflowItem,LogCount,regioncode,sitecode,SecGroupOwner,WFOwner)
 }
 &SQL(CLOSE  WebsysLogQuery)	 
	
	#else
	
	
  &SQL(DECLARE  WebsysLogQuery CURSOR FOR
Select  
TO_CHAR(AuditDate,'YYYY-MM-DD') As "AuditDate"
,TO_CHAR(AuditTime,'HH24') As "AuditTime" 
,:regioncode||'-'||:sitecode||'-USER-'||UserDR as "UserDR"
,CacheUser As "Cache User"
,ClientIP As "ClientIP"
,(select Name from websys.Component where websys.Log.ReferencedId = websys.Component.ID) AS "Component"
,:regioncode||'-'||:sitecode||'-HOSP-'||LogonLocation->CTLOC_Hospital_DR AS "HospitalDR,"
,LogonLocation->CTLOC_Desc AS "Location"
,GroupDR->SSGRP_Desc As "Security Group"
,WorkFlowId->Name As Workflow
,(select Caption from websys.WorkFlowItemDefinition where  websys.Log.WorkFlowItemId=websys.WorkFlowItemDefinition.ID) as "Workflow Item"
,count(*) as LogCount
,:regioncode as "Region"
,:sitecode as "Site"
From websys.Log
where 
AuditDate=:date 
and (select Name from websys.Component where websys.Log.ReferencedId = websys.Component.ID) not in ('epr.ClinTimeLine','PAPerson.Banner','epr.Tabs.Side','epr.floorplan.Messages')
and LogonLocation->CTLOC_Hospital_DR is not null
group by AuditDate,TO_CHAR(AuditTime,'HH24'),UserDR,CacheUser,ClientIP,ReferencedId,LogonLocation,GroupDR,WorkFlowId,WorkFlowItemId,LogonLocation->CTLOC_Hospital_DR)
 &SQL(OPEN  WebsysLogQuery)
 f  
 {
	 set (AuditDat,AuditTime,UserDR,CacheUser,ClientIP,Component,HospitalDR,Location,SecurityGroup,Workflow,WorkflowItem,LogCount,SecGroupOwner,WFOwner)=""
	 &SQL(FETCH  WebsysLogQuery into :AuditDat,:AuditTime,:UserDR,:CacheUser,:ClientIP,:Component,:HospitalDR,:Location,:SecurityGroup,:Workflow,:WorkflowItem,:LogCount,:Region,:Site) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 
	  if (SecurityGroup'="")
	 {
	 	&sql(select SSGRP_Owner into :SecGroupOwner from SQLUser.SS_Group where SSGRP_Desc=:SecurityGroup)
	 }
	  if (Workflow'="")
	 {
	 	&sql(select Owner into :WFOwner from websys.WorkFlow where Name=:Workflow)
	 }
	 
	 
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(AuditDat,AuditTime,UserDR,CacheUser,ClientIP,Component,HospitalDR,Location,SecurityGroup,Workflow,WorkflowItem,LogCount,regioncode,sitecode,SecGroupOwner,WFOwner)
 }
 &SQL(CLOSE  WebsysLogQuery)
	
	#endif
 
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="WebsysLogQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>WebsysLogQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="WebsysLogQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>WebsysLogQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserOrderAlertsMsgQuery">
<Type>%Query</Type>
<FormalSpec>date:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="ALMDateUpdate:%String,ALMTimeUpdate:%String,ALMUserUpdateDR:%String,ALMReasonRequired:%String,ALMSeverity:%String,ALMAlertType:%String,ALRDesc:%String,OrderCategory:%String,SubCategory:%String,StartDate:%String,StartTime:%String,OrderLoc:%String,AdmType:%String,Region:%String,Site:%String,HospDR:%String,ARCIMDesc:%String,ALMMessage:%String,OrderType:%String,EpisodeType:%String,PAPMIRowID:%String,PAADMRowID:%String"/>
</Query>

<Method name="UserOrderAlertsMsgQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
 
 #if ($$$TCVersion<=2010)
 
  &SQL(DECLARE  UserOrderAlertsMsgQuery CURSOR FOR
select 
 TO_CHAR(ALM_DateUpdate,'YYYY-MM-DD') as "ALM_DateUpdate",
 TO_CHAR(ALM_TimeUpdate,'HH24') as "ALM_TimeUpdate",
 :regioncode||'-'||:sitecode||'-USER-'||ALM_UserUpdate_DR as "ALM_UserUpdate_DR",
 '',
 replace('','<BR>',',') as "ALM_Severity",
 ALM_AlertType,
 ALM_OverrideReason_DR->ALR_Desc,
 ALM_ParRef->OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_OrdCat_DR->ORCAT_Desc As OrderCategory,
ALM_ParRef->OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_Desc As SubCategory,
TO_CHAR(ALM_ParRef->OEORI_DateTime,'YYYY-MM-DD') As "StartDate",
TO_CHAR(ALM_ParRef->OEORI_DateTime,'HH24') As "StartTime",
ALM_ParRef->OEORI_OrdDept_DR->CTLOC_Desc As "OrderLoc",
ALM_ParRef->OEORI_OEORD_ParRef->OEORD_Adm_DR->PAADM_Type AS "AdmType"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||ALM_ParRef->OEORI_OEORD_ParRef->OEORD_Adm_DR->PAADM_Hospital_DR AS "HospDR"
,ALM_ParRef->OEORI_ItmMast_DR->ARCIM_Desc as "ARCIM_Desc"
,ALM_Message as "ALM_Message"
,case when not ALM_ParRef->OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_TextResultType_DR  is null and ALM_ParRef->OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_OrderType='N' then 'Radiology' else %External(ALM_ParRef->OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_OrderType) end as "OrderType"
,ALM_ParRef->OEORI_OEORD_ParRef->OEORD_Adm_DR->PAADM_Type AS "EpisodeType"
,:regioncode||'-'||:sitecode||'-EPS-'||ALM_ParRef->OEORI_OEORD_ParRef->OEORD_Adm_DR as "PAADMRowID"
,:regioncode||'-'||:sitecode||'-PAT-'||ALM_ParRef->OEORI_OEORD_ParRef->OEORD_Adm_DR->PAADM_PAPMI_DR as "PAPMIRowID"
 from sqluser.OE_OrdAlertMessage
 where ALM_ParRef->OEORI_Date=:date)
 
 #else
 
 &SQL(DECLARE  UserOrderAlertsMsgQuery CURSOR FOR
select 
 TO_CHAR(ALM_DateUpdate,'YYYY-MM-DD') as "ALM_DateUpdate",
 TO_CHAR(ALM_TimeUpdate,'HH24') as "ALM_TimeUpdate",
 :regioncode||'-'||:sitecode||'-USER-'||ALM_UserUpdate_DR as "ALM_UserUpdate_DR",
 ALM_ReasonRequired,
 replace(ALM_Severity,'<BR>',',') as "ALM_Severity",
 ALM_AlertType,
 ALM_OverrideReason_DR->ALR_Desc,
 ALM_ParRef->OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_OrdCat_DR->ORCAT_Desc As OrderCategory,
ALM_ParRef->OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_Desc As SubCategory,
TO_CHAR(ALM_ParRef->OEORI_DateTime,'YYYY-MM-DD') As "StartDate",
TO_CHAR(ALM_ParRef->OEORI_DateTime,'HH24') As "StartTime",
ALM_ParRef->OEORI_OrdDept_DR->CTLOC_Desc As "OrderLoc",
ALM_ParRef->OEORI_OEORD_ParRef->OEORD_Adm_DR->PAADM_Type AS "AdmType"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||ALM_ParRef->OEORI_OEORD_ParRef->OEORD_Adm_DR->PAADM_Hospital_DR AS "HospDR"
,ALM_ParRef->OEORI_ItmMast_DR->ARCIM_Desc as "ARCIM_Desc"
,ALM_Message as "ALM_Message"
,case when not ALM_ParRef->OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_TextResultType_DR  is null and ALM_ParRef->OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_OrderType='N' then 'Radiology' else %External(ALM_ParRef->OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_OrderType) end as "OrderType"
,ALM_ParRef->OEORI_OEORD_ParRef->OEORD_Adm_DR->PAADM_Type AS "EpisodeType"
,:regioncode||'-'||:sitecode||'-EPS-'||ALM_ParRef->OEORI_OEORD_ParRef->OEORD_Adm_DR as "PAADMRowID"
,:regioncode||'-'||:sitecode||'-PAT-'||ALM_ParRef->OEORI_OEORD_ParRef->OEORD_Adm_DR->PAADM_PAPMI_DR as "PAPMIRowID"
 from sqluser.OE_OrdAlertMessage
 where ALM_ParRef->OEORI_Date=:date)
 
 #endif
 
 
 &SQL(OPEN  UserOrderAlertsMsgQuery)
 f  
 {
	 set (ALMDateUpdate,ALMTimeUpdate,ALMUserUpdateDR,ALMReasonRequired,ALMSeverity,ALMAlertType,ALRDesc,OrderCategory,SubCategory,StartDate,StartTime,OrderLoc,AdmType,HospDR,ARCIMDesc,ALMMessage,OrderType,EpisodeType,PAPMIRowID,PAADMRowID)=""
	 &SQL(FETCH  UserOrderAlertsMsgQuery into :ALMDateUpdate,:ALMTimeUpdate,:ALMUserUpdateDR,:ALMReasonRequired,:ALMSeverity,:ALMAlertType,:ALRDesc,:OrderCategory,:SubCategory,:StartDate,:StartTime,:OrderLoc,:AdmType,:Region,:Site,:HospDR,:ARCIMDesc,:ALMMessage,:OrderType,:EpisodeType,:PAPMIRowID,:PAADMRowID) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 set ALMMessage=$extract(ALMMessage,1,50)
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(ALMDateUpdate,ALMTimeUpdate,ALMUserUpdateDR,ALMReasonRequired,ALMSeverity,ALMAlertType,ALRDesc,OrderCategory,SubCategory,StartDate,StartTime,OrderLoc,AdmType,regioncode,sitecode,HospDR,ARCIMDesc,ALMMessage,OrderType,EpisodeType,PAPMIRowID,PAADMRowID)
 }
 &SQL(CLOSE  UserOrderAlertsMsgQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserOrderAlertsMsgQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserOrderAlertsMsgQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserOrderAlertsMsgQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserOrderAlertsMsgQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserOrderItemQuery">
<Type>%Query</Type>
<FormalSpec>date:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="OrderCategory:%String,SubCategory:%String,UserDR:%String,StartDate:%String,StartTime:%String,OrderLoc:%String,AdmType:%String,HospDR:%String,Region:%String,Site:%String,OrderCount:%String,OrderType:%String,OrderStatus:%String,PharmacyStatus:%String,PAPMIRowID:%String,PAADMRowID:%String,Executed:%String"/>
</Query>

<Method name="UserOrderItemQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
  &SQL(DECLARE  UserOrderItemQuery CURSOR FOR
Select 
OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_OrdCat_DR->ORCAT_Desc As OrderCategory,
OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_Desc As SubCategory,
:regioncode||'-'||:sitecode||'-USER-'||OEORI_UserAdd As "UserDR",
TO_CHAR(OEORI_Date,'YYYY-MM-DD') As "StartDate",
TO_CHAR(OEORI_DateTime,'HH24') As "StartTime",
OEORI_OrdDept_DR->CTLOC_Desc As "OrderLoc",
OEORI_OEORD_ParRef->OEORD_Adm_DR->PAADM_Type AS "AdmType",
:regioncode||'-'||:sitecode||'-HOSP-'||OEORI_OEORD_ParRef->OEORD_Adm_DR->PAADM_Hospital_DR AS "HospDR"
,:regioncode as "Region"
,:sitecode as "Site"
,count(*) as "OrderCount"
,case when not OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_TextResultType_DR  is null and OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_OrderType='N' then 'Radiology' else %External(OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_OrderType) end as "OrderType"
,OEORI_ItemStat_DR->OSTAT_Desc as "OrderStatus"
,%External(OEORI_PharmacyStatus) as "PharmacyStatus"
,:regioncode||'-'||:sitecode||'-PAT-'||OEORI_OEORD_ParRef->OEORD_Adm_DR->PAADM_PAPMI_DR as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-EPS-'||OEORI_OEORD_ParRef->OEORD_Adm_DR as "PAADMRowID"
,case when (select count(*) from SQLUser.OE_OrdStatus where ST_ParRef=OEORI_RowId and ST_Status_DR->OSTAT_Code='E')>0 then 'Yes' else 'No' end as "Executed"
From sqluser.OE_OrdItem
where OE_OrdItem.OEORI_Date=:date and OEORI_ItemStat_DR->OSTAT_Code not in ('U','I')
group by OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_OrdCat_DR,OEORI_ItmMast_DR->ARCIM_ItemCat_DR,OEORI_UserAdd,OEORI_Date,TO_CHAR(OEORI_DateTime,'HH24'),OEORI_OrdDept_DR->CTLOC_Desc,
OEORI_OEORD_ParRef->OEORD_Adm_DR->PAADM_Type,OEORI_OEORD_ParRef->OEORD_Adm_DR->PAADM_Hospital_DR,OEORI_ItemStat_DR,OEORI_PharmacyStatus,OEORI_OEORD_ParRef,case when (select count(*) from SQLUser.OE_OrdStatus where ST_ParRef=OEORI_RowId and ST_Status_DR->OSTAT_Code='E')>0 then 'Yes' else 'No' end
)
 &SQL(OPEN  UserOrderItemQuery)
 f  
 {
	 set (OrderCategory,SubCategory,UserDR,StartDate,StartTime,OrderLoc,AdmType,HospDR,OrderCount,OrderType,OrderStatus,PharmacyStatus,PAPMIRowID,PAADMRowID,Executed)=""
	 &SQL(FETCH  UserOrderItemQuery into :OrderCategory,:SubCategory,:UserDR,:StartDate,:StartTime,:OrderLoc,:AdmType,:HospDR,:Region,:Site,:OrderCount,:OrderType,:OrderStatus,:PharmacyStatus,:PAPMIRowID,:PAADMRowID,:Executed) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(OrderCategory,SubCategory,UserDR,StartDate,StartTime,OrderLoc,AdmType,HospDR,regioncode,sitecode,OrderCount,OrderType,OrderStatus,PharmacyStatus,PAPMIRowID,PAADMRowID,Executed)
 }
 &SQL(CLOSE  UserOrderItemQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserOrderItemQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserOrderItemQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserOrderItemQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserOrderItemQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserSSUserQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="UserID:%String,UserName:%String,Region:%String,Site:%String,CPRole:%String,CPType:%String,CareProvider:%String,UserName:%String,CPSpec:%String,CPSubSpec:%String,CPGroup:%String,CPUnit:%String,CPLoc:%String,SecGroup:%String,SSProfile:%String,Hospital:%String,LogonLoc:%String,CreateDate:%String,Active:%String,SSGRPOwner:%String"/>
</Query>

<Method name="UserSSUserQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	  
	
	
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 #if ($$$TCVersion<=2012)
	
		 &SQL(DECLARE  UserSSUserQuery CURSOR FOR
Select   
:regioncode||'-'||:sitecode||'-USER-'||SSUSR_RowId  as "UserID"
,SSUSR_Name As "UserName"
,:regioncode as "Region"
,:sitecode as "Site"
,case when SSUSR_CareProv_DR is null then '' when SSUSR_CareProv_DR->CTPCP_CarPrvTp_DR is null then '' else SSUSR_CareProv_DR->CTPCP_CarPrvTp_DR->CTCPT_Desc end  As "CPRole"
,case when SSUSR_CareProv_DR is null then '' when SSUSR_CareProv_DR->CTPCP_CarPrvTp_DR is null then '' else SSUSR_CareProv_DR->CTPCP_CarPrvTp_DR->CTCPT_InternalType end  As "CPType"
,case when SSUSR_CareProv_DR is null then '' else SSUSR_CareProv_DR->CTPCP_Desc end  As "CareProvider"
,SSUSR_Name As "UserName"
,case when SSUSR_CareProv_DR is null then '' when SSUSR_CareProv_DR->CTPCP_Spec_DR is null then '' else SSUSR_CareProv_DR->CTPCP_Spec_DR->CTSPC_Desc end  As "CPSpec"
,case when SSUSR_CareProv_DR is null then '' when SSUSR_CareProv_DR->CTPCP_SubSpec_DR is null then '' else SSUSR_CareProv_DR->CTPCP_SubSpec_DR->CTSPC_Desc end  As "CPSubSpec"
,case when SSUSR_CareProv_DR is null then '' when SSUSR_CareProv_DR->CTPCP_CPGroup_DR is null then '' else SSUSR_CareProv_DR->CTPCP_CPGroup_DR->CPG_Desc end  As "CPGroup"
,case when SSUSR_CareProv_DR is null then '' when SSUSR_CareProv_DR->CTPCP_RespUnit_DR is null then '' else SSUSR_CareProv_DR->CTPCP_RespUnit_DR->RU_Desc end  As "CPUnit"
,case when SSUSR_CareProv_DR is null then '' when SSUSR_CareProv_DR->CTPCP_CTLOC_DR is null then '' else SSUSR_CareProv_DR->CTPCP_CTLOC_DR->CTLOC_Desc end  As "CPLoc"
,SSUSR_Group->SSGRP_Desc as "SecGroup"
,'' as "SSProfile"
,SSUSR_Hospital_DR->Hosp_Desc as "Hospital"
,SSUSR_DefaultDept_DR->CTLOC_Desc as "LogonLoc"
,TO_CHAR(SSUSR_CreatedDate,'YYYY-MM-DD') As "CreateDate" 
,SSUSR_Active as "Active"
,'' as "SSGRPOwner"
,SSUSR_RowId
From SQLUser.SS_User)
 &SQL(OPEN  UserSSUserQuery)
 f  
 {
	 
	 // get counts
	 //SSUSRRowId
	 
	 set (Episodes,Problems,Diagnosis,Encounter,Entries,Observations,Alerts,Allergies,Orders,LabOrders,PharmacyOrders,RadOrders,ClinicalNotes,Questionnaires,ClinicalNotes,ClincalSummary,Documents,AnnImages,OrderAlerts,VisualRules,Questionnaires,Presc)=""
	 
	 
	 set (UserID,UserName,CPRole,CPType,CareProvider,UserName,CPSpec,CPSubSpec,CPGroup,CPUnit,CPLoc,SecGroup,SSProfile,Hospital,LogonLoc,CreateDate,Active)=""
	 &SQL(FETCH  UserSSUserQuery into :UserID,:UserName,:Region,:Site,:CPRole,:CPType,:CareProvider,:UserName,:CPSpec,:CPSubSpec,:CPGroup,:CPUnit,:CPLoc,:SecGroup,:SSProfile,:Hospital,:LogonLoc,:CreateDate,:Active,:SSGRPOwner,:SSUSRRowId) 
	 q:SQLCODE'=0 
	 
	
  	 
	   
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(UserID,UserName,regioncode,sitecode,CPRole,CPType,CareProvider,UserName,CPSpec,CPSubSpec,CPGroup,CPUnit,CPLoc,SecGroup,SSProfile,Hospital,LogonLoc,CreateDate,Active,SSGRPOwner)
 }
 &SQL(CLOSE  UserSSUserQuery) 
	
	#else
	
	 &SQL(DECLARE  UserSSUserQuery CURSOR FOR
Select   
:regioncode||'-'||:sitecode||'-USER-'||SSUSR_RowId  as "UserID"
,SSUSR_Name As "UserName"
,:regioncode as "Region"
,:sitecode as "Site"
,case when SSUSR_CareProv_DR is null then '' when SSUSR_CareProv_DR->CTPCP_CarPrvTp_DR is null then '' else SSUSR_CareProv_DR->CTPCP_CarPrvTp_DR->CTCPT_Desc end  As "CPRole"
,case when SSUSR_CareProv_DR is null then '' when SSUSR_CareProv_DR->CTPCP_CarPrvTp_DR is null then '' else SSUSR_CareProv_DR->CTPCP_CarPrvTp_DR->CTCPT_InternalType end  As "CPType"
,case when SSUSR_CareProv_DR is null then '' else SSUSR_CareProv_DR->CTPCP_Desc end  As "CareProvider"
,SSUSR_Name As "UserName"
,case when SSUSR_CareProv_DR is null then '' when SSUSR_CareProv_DR->CTPCP_Spec_DR is null then '' else SSUSR_CareProv_DR->CTPCP_Spec_DR->CTSPC_Desc end  As "CPSpec"
,case when SSUSR_CareProv_DR is null then '' when SSUSR_CareProv_DR->CTPCP_SubSpec_DR is null then '' else SSUSR_CareProv_DR->CTPCP_SubSpec_DR->CTSPC_Desc end  As "CPSubSpec"
,case when SSUSR_CareProv_DR is null then '' when SSUSR_CareProv_DR->CTPCP_CPGroup_DR is null then '' else SSUSR_CareProv_DR->CTPCP_CPGroup_DR->CPG_Desc end  As "CPGroup"
,case when SSUSR_CareProv_DR is null then '' when SSUSR_CareProv_DR->CTPCP_RespUnit_DR is null then '' else SSUSR_CareProv_DR->CTPCP_RespUnit_DR->RU_Desc end  As "CPUnit"
,case when SSUSR_CareProv_DR is null then '' when SSUSR_CareProv_DR->CTPCP_CTLOC_DR is null then '' else SSUSR_CareProv_DR->CTPCP_CTLOC_DR->CTLOC_Desc end  As "CPLoc"
,SSUSR_Group->SSGRP_Desc as "SecGroup"
,SSUSR_Profile->SSP_Desc as "SSProfile"
,SSUSR_Hospital_DR->Hosp_Desc as "Hospital"
,SSUSR_DefaultDept_DR->CTLOC_Desc as "LogonLoc"
,TO_CHAR(SSUSR_CreatedDate,'YYYY-MM-DD') As "CreateDate" 
,SSUSR_Active as "Active"
,SSUSR_Group->SSGRP_Owner as "SSGRPOwner"
,SSUSR_RowId
From SQLUser.SS_User)
 &SQL(OPEN  UserSSUserQuery)
 f  
 {
	 
	 // get counts
	 //SSUSRRowId
	 
	 set (Episodes,Problems,Diagnosis,Encounter,Entries,Observations,Alerts,Allergies,Orders,LabOrders,PharmacyOrders,RadOrders,ClinicalNotes,Questionnaires,ClinicalNotes,ClincalSummary,Documents,AnnImages,OrderAlerts,VisualRules,Questionnaires,Presc)=""
	 
	 
	 set (UserID,UserName,CPRole,CPType,CareProvider,UserName,CPSpec,CPSubSpec,CPGroup,CPUnit,CPLoc,SecGroup,SSProfile,Hospital,LogonLoc,CreateDate,Active)=""
	 &SQL(FETCH  UserSSUserQuery into :UserID,:UserName,:Region,:Site,:CPRole,:CPType,:CareProvider,:UserName,:CPSpec,:CPSubSpec,:CPGroup,:CPUnit,:CPLoc,:SecGroup,:SSProfile,:Hospital,:LogonLoc,:CreateDate,:Active,:SSGRPOwner,:SSUSRRowId) 
	 q:SQLCODE'=0 
	 
	
	
	   
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(UserID,UserName,regioncode,sitecode,CPRole,CPType,CareProvider,UserName,CPSpec,CPSubSpec,CPGroup,CPUnit,CPLoc,SecGroup,SSProfile,Hospital,LogonLoc,CreateDate,Active,SSGRPOwner)
 }
 &SQL(CLOSE  UserSSUserQuery)
	
	#endif

 
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserSSUserQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserSSUserQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserSSUserQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserSSUserQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserSSUserDefWinQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="WinID:%String,WinCode:%String,WinDesc:%String,WINGRPDesc:%String,LastUpdateDate:%String,LastGenDate:%String,Inactive:%String,Region:%String,Siten:%String,Owner:%String"/>
</Query>

<Method name="UserSSUserDefWinQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 
 #if ($$$TCVersion<=2012)
	
	  &SQL(DECLARE  UserSSUserDefWinQuery CURSOR FOR
select 
 :regioncode||'-'||:sitecode||'-WIN-'||Win_Code  as "WinID"
 ,Win_Code as "WinCode"
 ,win_desc as "WinDesc"
 ,WIN_WindowGroup_DR->WINGRP_Desc as "WINGRPDesc"
 ,TO_CHAR(WIN_LastUpdateDate,'YYYY-MM-DD') As LastUpdateDate
 ,TO_CHAR(WIN_LastGenDate,'YYYY-MM-DD') As LastGenDate
 ,WIN_Inactive as "Inactive"
 ,:regioncode as "Region"
 ,:sitecode as "Site"
 ,'' as "Owner"
 from SQLUser.SS_UserDefWindow)
 &SQL(OPEN  UserSSUserDefWinQuery)
 f  
 {
	 set (WinID,WinCode,WinDesc,WINGRPDesc,LastUpdateDate,LastGenDate,Inactive,Owner)=""
	 &SQL(FETCH  UserSSUserDefWinQuery into :WinID,:WinCode,:WinDesc,:WINGRPDesc,:LastUpdateDate,:LastGenDate,:Inactive,:Region,:Site,:Owner) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(WinID,WinCode,WinDesc,WINGRPDesc,LastUpdateDate,LastGenDate,Inactive,regioncode,sitecode,Owner)
 }
 &SQL(CLOSE  UserSSUserDefWinQuery)	 
	
	#else
	
	  &SQL(DECLARE  UserSSUserDefWinQuery CURSOR FOR
select 
 :regioncode||'-'||:sitecode||'-WIN-'||Win_Code  as "WinID"
 ,Win_Code as "WinCode"
 ,win_desc as "WinDesc"
 ,WIN_WindowGroup_DR->WINGRP_Desc as "WINGRPDesc"
 ,TO_CHAR(WIN_LastUpdateDate,'YYYY-MM-DD') As LastUpdateDate
 ,TO_CHAR(WIN_LastGenDate,'YYYY-MM-DD') As LastGenDate
 ,WIN_Inactive as "Inactive"
 ,:regioncode as "Region"
 ,:sitecode as "Site"
 ,WIN_Owner as "Owner"
 from SQLUser.SS_UserDefWindow)
 &SQL(OPEN  UserSSUserDefWinQuery)
 f  
 {
	 set (WinID,WinCode,WinDesc,WINGRPDesc,LastUpdateDate,LastGenDate,Inactive,Owner)=""
	 &SQL(FETCH  UserSSUserDefWinQuery into :WinID,:WinCode,:WinDesc,:WINGRPDesc,:LastUpdateDate,:LastGenDate,:Inactive,:Region,:Site,:Owner) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(WinID,WinCode,WinDesc,WINGRPDesc,LastUpdateDate,LastGenDate,Inactive,regioncode,sitecode,Owner)
 }
 &SQL(CLOSE  UserSSUserDefWinQuery)
	
	#endif
 
 

 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserSSUserDefWinQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserSSUserDefWinQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserSSUserDefWinQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserSSUserDefWinQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserSSUserLoginQuery">
<Type>%Query</Type>
<FormalSpec>date:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="UserDR:%String,ClientName:%String,LogonDate:%String,LogonTime:%String,LogoffDate:%String,LogoffTime:%String,SessionTimeMin:%String,Region:%String,Site:%String,LogonLoc:%String,LogonSecGroup:%String,LogonHospID:%String,LogonSecGroupOwner:%String"/>
</Query>

<Method name="UserSSUserLoginQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 
 #if ($$$TCVersion<=2012)
	
		  &SQL(DECLARE  UserSSUserLoginQuery CURSOR FOR
select  
:regioncode||'-'||:sitecode||'-USER-'||LOG_User_DR as "UserDR"
,LOG_ComputerName as "ClientName"
,TO_CHAR(LOG_LogonDate,'YYYY-MM-DD') As "LogonDate" 
,TO_CHAR(LOG_LogonTime,'HH24') As "LogonTime"
,TO_CHAR(LOG_LogoffDate,'YYYY-MM-DD') As "LogoffDate"
,TO_CHAR(LOG_LogoffTime,'HH24') As "LogoffTime"
, DATEDIFF('mi',LOG_LogonDate||','||LOG_LogonTime,LOG_LogoffDate||','||LOG_LogoffTime)  as "SessionTimeMin"
,:regioncode as "Region"
,:sitecode as "Site"
,LOG_LogonDate,LOG_LogonTime,LOG_LogoffDate,LOG_LogoffTime,LOG_User_DR
from SQLUser.SS_UserLogin
where LOG_LogonDate=:date)
 &SQL(OPEN  UserSSUserLoginQuery)
 f  
 {
	 set (UserDR,ClientName,LogonDate,LogonTime,LogoffDate,LogoffTime,SessionTimeMin,LOGLogonDate,LOGLogonTime,LOGLogoffDate,LOGLogoffTime,LOGUserDR,LogonLoc,LogonSecGroup,LogonHospID,LogonSecGroupOwner)=""
	 &SQL(FETCH  UserSSUserLoginQuery into :UserDR,:ClientName,:LogonDate,:LogonTime,:LogoffDate,:LogoffTime,:SessionTimeMin,:Region,:Site,:LOGLogonDate,:LOGLogonTime,:LOGLogoffDate,:LOGLogoffTime,:LOGUserDR) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 
	 
	 set (LogonLoc,LogonSecGroup,LogonSecGroupOwner,LogonHospID)=""
	 
	 /*
	 &sql(select top 1 LogonLocation->CTLOC_Desc,GroupDR->SSGRP_Desc,'' 
		,:regioncode||'-'||:sitecode||'-HOSP-'||LogonLocation->CTLOC_Hospital_DR->HOSP_RowId
		into :LogonLoc,:LogonSecGroup,:LogonSecGroupOwner,:LogonHospID
		from websys.Log 
		where AuditDate=:LOGLogonDate and UserDR=:LOGUserDR and AuditTime>=:LOGLogonTime and AuditTime<=:LOGLogoffTime
	   )
	 */
	 
	 /*
	 if (LogonLoc'="")
	 {
	 	&sql(select top 1 :regioncode||'-'||:sitecode||'-HOSP-'||CTLOC_Hospital_DR->HOSP_RowId into :LogonHospID
 		from SQLUser.CT_Loc where   CTLOC_Desc =:LogonLoc)
	 }
	 if (LogonSecGroup'="")
	 {
	 	&sql(select SSGRP_Owner into :LogonSecGroupOwner from SQLUser.SS_Group where SSGRP_Desc=:LogonSecGroup)
	 }
	 */
	 
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(UserDR,ClientName,LogonDate,LogonTime,LogoffDate,LogoffTime,SessionTimeMin,regioncode,sitecode,LogonLoc,LogonSecGroup,LogonHospID,LogonSecGroupOwner)
 }
 &SQL(CLOSE  UserSSUserLoginQuery) 
	
	#else
	
	  &SQL(DECLARE  UserSSUserLoginQuery CURSOR FOR
select  
:regioncode||'-'||:sitecode||'-USER-'||LOG_User_DR as "UserDR"
,LOG_ComputerName as "ClientName"
,TO_CHAR(LOG_LogonDate,'YYYY-MM-DD') As "LogonDate" 
,TO_CHAR(LOG_LogonTime,'HH24') As "LogonTime"
,TO_CHAR(LOG_LogoffDate,'YYYY-MM-DD') As "LogoffDate"
,TO_CHAR(LOG_LogoffTime,'HH24') As "LogoffTime"
, DATEDIFF('mi',LOG_LogonDate||','||LOG_LogonTime,LOG_LogoffDate||','||LOG_LogoffTime)  as "SessionTimeMin"
,:regioncode as "Region"
,:sitecode as "Site"
,LOG_LogonDate,LOG_LogonTime,LOG_LogoffDate,LOG_LogoffTime,LOG_User_DR
from SQLUser.SS_UserLogin
where LOG_LogonDate=:date)
 &SQL(OPEN  UserSSUserLoginQuery)
 f  
 {
	 set (UserDR,ClientName,LogonDate,LogonTime,LogoffDate,LogoffTime,SessionTimeMin,LOGLogonDate,LOGLogonTime,LOGLogoffDate,LOGLogoffTime,LOGUserDR,LogonLoc,LogonSecGroup,LogonHospID,LogonSecGroupOwner)=""
	 &SQL(FETCH  UserSSUserLoginQuery into :UserDR,:ClientName,:LogonDate,:LogonTime,:LogoffDate,:LogoffTime,:SessionTimeMin,:Region,:Site,:LOGLogonDate,:LOGLogonTime,:LOGLogoffDate,:LOGLogoffTime,:LOGUserDR) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 
	 &sql(select top 1 LogonLocation->CTLOC_Desc,GroupDR->SSGRP_Desc,GroupDR->SSGRP_Owner 
		,:regioncode||'-'||:sitecode||'-HOSP-'||LogonLocation->CTLOC_Hospital_DR->HOSP_RowId
		into :LogonLoc,:LogonSecGroup,:LogonSecGroupOwner,:LogonHospID
		from websys.Log 
		where AuditDate=:LOGLogonDate and UserDR=:LOGUserDR and AuditTime>=:LOGLogonTime and AuditTime<=:LOGLogoffTime
		 )
	 
	 
	 /*
	 if (LogonLoc'="")
	 {
	 	&sql(select top 1 :regioncode||'-'||:sitecode||'-HOSP-'||CTLOC_Hospital_DR->HOSP_RowId into :LogonHospID
 		from SQLUser.CT_Loc where   CTLOC_Desc =:LogonLoc)
	 }
	 if (LogonSecGroup'="")
	 {
	 	&sql(select SSGRP_Owner into :LogonSecGroupOwner from SQLUser.SS_Group where SSGRP_Desc=:LogonSecGroup)
	 }
	 */
	 
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(UserDR,ClientName,LogonDate,LogonTime,LogoffDate,LogoffTime,SessionTimeMin,regioncode,sitecode,LogonLoc,LogonSecGroup,LogonHospID,LogonSecGroupOwner)
 }
 &SQL(CLOSE  UserSSUserLoginQuery)
	
	#endif
 
 

 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserSSUserLoginQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserSSUserLoginQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserSSUserLoginQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserSSUserLoginQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserCTHospQuery">
<Type>%Query</Type>
<FormalSpec>date:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="HospitalID:%String,HospCode:%String,HospDesc:%String,Region:%String,Site:%String"/>
</Query>

<Method name="UserCTHospQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
  &SQL(DECLARE  UserCTHospQuery CURSOR FOR
select 
:regioncode||'-'||:sitecode||'-HOSP-'||HOSP_RowID as "HospitalID"
,HOSP_Code as "HospCode"
,HOSP_Desc as "HospDesc"
,:regioncode as "Region"
,:sitecode as "Site"
from SQLUser.CT_Hospital)
 &SQL(OPEN  UserCTHospQuery)
 f  
 {
	 set (HospitalID,HospCode,HospDesc)=""
	 &SQL(FETCH  UserCTHospQuery into :HospitalID,:HospCode,:HospDesc,:Region,:Site) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(HospitalID,HospCode,HospDesc,regioncode,sitecode)
 }
 &SQL(CLOSE  UserCTHospQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserCTHospQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserCTHospQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserCTHospQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserCTHospQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserQuesQuery">
<Type>%Query</Type>
<FormalSpec>date:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="WinCode:%String,WinDesc:%String,WINGRPDesc:%String,QUESCreateDate:%String,QUESCreateTime:%String,QUESCreateUserDR:%String,QUESDate:%String,QUESTime:%String,QUESUserDR:%String,QUESStatus:%String,QUESReasonForCorrection:%String,AdmType:%String,HospDR:%String,Region:%String,Site:%String,QUESScore:%String,WinID:%String,Owner:%String,PAPMIRowID:%String,PAADMRowID:%String,HospDR:%String"/>
</Query>

<Method name="UserQuesQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
 &SQL(DECLARE UserQuesQuery CURSOR FOR select  Win_Code  from SQLUser.SS_UserDefWindow)	
 &sql(OPEN UserQuesQuery)
  FOR { 
  	set QCode=""
  	&sql(FETCH UserQuesQuery into :QCode)
      QUIT:SQLCODE 
      
      #if ($$$TCVersion<=2012)
      
             SET myquery="select   QUESSSUserDefWindowDR->win_code as WinCode ,QUESSSUserDefWindowDR->win_desc as WinDesc ,QUESSSUserDefWindowDR->WIN_WindowGroup_DR->WINGRP_Desc ,TO_CHAR(QUESCreateDate,'YYYY-MM-DD') As QUESCreateDate ,TO_CHAR(QUESCreateTime,'HH24') As QUESCreateTime ,:regioncode||'-'||:sitecode||'-USER-'||QUESCreateUserDR as QUESCreateUserDR ,TO_CHAR(QUESDate,'YYYY-MM-DD') As QUESDate ,TO_CHAR(QUESTime,'HH24') As QUESTime ,:regioncode||'-'||:sitecode||'-USER-'||QUESUserDR as QUESUserDR ,QUESStatusDR->NNS_Desc as QUESStatus ,QUESReasonForCorrectionDR->ENTERR_Desc AS QUESReasonForCorrection ,QUESPAAdmDR->PAADM_Type AS AdmType ,:regioncode||'-'||:sitecode||'-HOSP-'||QUESPAAdmDR->PAADM_Hospital_DR AS HospDR ,:regioncode as Region ,:sitecode as Site ,QUESScore,:regioncode||'-'||:sitecode||'-WIN-'||QUESSSUserDefWindowDR->win_code  as  WinID , '' as Owner,:regioncode||'-'||:sitecode||'-EPS-'||QUESPAAdmDR as PAADMRowID,:regioncode||'-'||:sitecode||'-PAT-'||QUESPAPatMasDR as PAPMIRowID,:regioncode||'-'||:sitecode||'-HOSP-'||QUESPAAdmDR->PAADM_Hospital_DR as HospID from questionnaire.Q" _QCode_" where QUESCreateDate="_date
      #else
      
       		SET myquery="select   QUESSSUserDefWindowDR->win_code as WinCode ,QUESSSUserDefWindowDR->win_desc as WinDesc ,QUESSSUserDefWindowDR->WIN_WindowGroup_DR->WINGRP_Desc ,TO_CHAR(QUESCreateDate,'YYYY-MM-DD') As QUESCreateDate ,TO_CHAR(QUESCreateTime,'HH24') As QUESCreateTime ,:regioncode||'-'||:sitecode||'-USER-'||QUESCreateUserDR as QUESCreateUserDR ,TO_CHAR(QUESDate,'YYYY-MM-DD') As QUESDate ,TO_CHAR(QUESTime,'HH24') As QUESTime ,:regioncode||'-'||:sitecode||'-USER-'||QUESUserDR as QUESUserDR ,QUESStatusDR->NNS_Desc as QUESStatus ,QUESReasonForCorrectionDR->ENTERR_Desc AS QUESReasonForCorrection ,QUESPAAdmDR->PAADM_Type AS AdmType ,:regioncode||'-'||:sitecode||'-HOSP-'||QUESPAAdmDR->PAADM_Hospital_DR AS HospDR ,:regioncode as Region ,:sitecode as Site ,QUESScore,:regioncode||'-'||:sitecode||'-WIN-'||QUESSSUserDefWindowDR->win_code  as  WinID , QUESSSUserDefWindowDR->win_Owner as Owner,:regioncode||'-'||:sitecode||'-EPS-'||QUESPAAdmDR as PAADMRowID,:regioncode||'-'||:sitecode||'-PAT-'||QUESPAPatMasDR as PAPMIRowID,:regioncode||'-'||:sitecode||'-HOSP-'||QUESPAAdmDR->PAADM_Hospital_DR as HospID from questionnaire.Q" _QCode_" where QUESCreateDate="_date
      
      #endif
      
  	 SET rsetQ=##class(%ResultSet).%New()
  	 SET sc=rsetQ.Prepare(myquery)
	 Do rsetQ.Execute()
	 		//w !,QCode
	 	While (rsetQ.Next()) {
		 	//w !,"test"
		 	set (WinCode,WinDesc,WINGRPDesc,QUESCreateDate,QUESCreateTime,QUESCreateUserDR,QUESDate,QUESTime,QUESUserDR,QUESStatus,QUESReasonForCorrection,AdmType,HospDR,QUESScore,WinID,Owner ,PAPMIRowID,PAADMRowID,HospDR)=""
		 	set WinCode=$G(rsetQ.Data(rsetQ.GetColumnName(1)))
		 	set WinDesc=$G(rsetQ.Data(rsetQ.GetColumnName(2)))
		 	set WINGRPDesc=$G(rsetQ.Data(rsetQ.GetColumnName(3)))
		 	set QUESCreateDate=$G(rsetQ.Data(rsetQ.GetColumnName(4)))
		 	set QUESCreateTime=$G(rsetQ.Data(rsetQ.GetColumnName(5)))
		 	set QUESCreateUserDR=$G(rsetQ.Data(rsetQ.GetColumnName(6)))
		 	set QUESDate=$G(rsetQ.Data(rsetQ.GetColumnName(7)))
		 	set QUESTime=$G(rsetQ.Data(rsetQ.GetColumnName(8)))
		 	set QUESUserDR=$G(rsetQ.Data(rsetQ.GetColumnName(9)))
		 	set QUESStatus=$G(rsetQ.Data(rsetQ.GetColumnName(10)))
		 	set QUESReasonForCorrection=$G(rsetQ.Data(rsetQ.GetColumnName(11)))
		 	set AdmType=$G(rsetQ.Data(rsetQ.GetColumnName(12)))
		 	set HospDR=$G(rsetQ.Data(rsetQ.GetColumnName(13)))
		 	set Region=$G(rsetQ.Data(rsetQ.GetColumnName(14)))
		 	set Site=$G(rsetQ.Data(rsetQ.GetColumnName(15)))
		 	set QUESScore=$G(rsetQ.Data(rsetQ.GetColumnName(16)))
		 	set WinID=$G(rsetQ.Data(rsetQ.GetColumnName(17)))
		 	set Owner=$G(rsetQ.Data(rsetQ.GetColumnName(18)))
		 	set PAPMIRowID=$G(rsetQ.Data(rsetQ.GetColumnName(19)))
		 	set PAADMRowID=$G(rsetQ.Data(rsetQ.GetColumnName(20)))
		 	set HospDR=$G(rsetQ.Data(rsetQ.GetColumnName(21)))
		 	
		 	s ind=ind+1
	 		Set ^CacheTemp("TRAK",repid,ind)=$LB(WinCode,WinDesc,WINGRPDesc,QUESCreateDate,QUESCreateTime,QUESCreateUserDR,QUESDate,QUESTime,QUESUserDR,QUESStatus,QUESReasonForCorrection,AdmType,HospDR,regioncode,sitecode,QUESScore,WinID,Owner ,PAPMIRowID,PAADMRowID,HospDR)
	 	}
 		 
        
 	 }
    
    &sql(CLOSE UserQuesQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserQuesQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserQuesQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserQuesQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserQuesQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserPAQue1Query">
<Type>%Query</Type>
<FormalSpec>date:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="EpisodeType:%String,EpisodeLoc:%String,PharmacyStatus:%String,Priority:%String,TranDate:%String,TranTime:%String,DeptLoc:%String,UserDR:%String,Region:%String,Site:%String,HospitalID:%String,PAADMRowID:%String,PAPMIRowID:%String,UserDR:%String"/>
</Query>

<Method name="UserPAQue1QueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
  &SQL(DECLARE  UserPAQue1Query CURSOR FOR
select 
QUE1_PAADM_DR->PAADM_Type  as "EpisodeType"
,QUE1_PAADM_DR->PAADM_DepCode_DR->CTLOC_Desc as "EpisodeLoc"
,QUE1_PharmStatus as "PharmacyStatus"
,%external(QUE1_Priority) as "Priority"
,TO_CHAR(QUE1_TransDate,'YYYY-MM-DD')  as "TranDate"
,TO_CHAR(QUE1_TransTime,'HH24')  as "TranTime"
,QUE1_DepartmentLoc_DR->CTLOC_Desc as "DeptLoc"
,:regioncode||'-'||:sitecode||'-USER-'||(select top 1 SSUSR_RowId from  SQLUser.SS_User where SSUSR_CareProv_DR=QUE1_CareProviderDR) As "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||QUE1_PAADM_DR->PAADM_Hospital_DR as "HospitalID"
,:regioncode||'-'||:sitecode||'-EPS-'||QUE1_PAADM_DR as "PAADMRowID"
,:regioncode||'-'||:sitecode||'-PAT-'||QUE1_PAADM_DR->PAADM_PAPMI_DR as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||(select top 1 SSUSR_RowId from  SQLUser.SS_User where SSUSR_CareProv_DR=QUE1_CareProviderDR) As "UserDR"
from SQLUser.PA_Que1
where QUE1_TransDate=:date)
 &SQL(OPEN  UserPAQue1Query)
 f  
 {
	 set (EpisodeType,EpisodeLoc,PharmacyStatus,Priority,TranDate,TranTime,DeptLoc,UserDR,HospitalID,PAADMRowID,PAPMIRowID,UserDR)=""
	 &SQL(FETCH  UserPAQue1Query into :EpisodeType,:EpisodeLoc,:PharmacyStatus,:Priority,:TranDate,:TranTime,:DeptLoc,:UserDR,:Region,:Site,:HospitalID,:PAADMRowID,:PAPMIRowID,:UserDR) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(EpisodeType,EpisodeLoc,PharmacyStatus,Priority,TranDate,TranTime,DeptLoc,UserDR,regioncode,sitecode,HospitalID,PAADMRowID,PAPMIRowID,UserDR)
 }
 &SQL(CLOSE  UserPAQue1Query)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserPAQue1QueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserPAQue1QueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserPAQue1QueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserPAQue1QueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Method name="GetObservationsCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*)  from SQLUser.MR_Observations where 1=1  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetDiagnosisCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql=" select count(*)  from SQLUser.MR_Diagnos where 1=1 "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetClinicalNotesCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*) from SQLUser.MR_NursingNotes	where 1=1 "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetOrdersCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*)  from SQLUser.OE_OrdItem where 1=1 and OEORI_ItemStat_DR->OSTAT_Code not in ('U','I')  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetAdminMedCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select	count(distinct OEORE_OEORI_ParRef) from SQLUser.OE_OrdExec	where 1=1  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetEncountersCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*) from SQLUser.MR_Encounter	where 1=1  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetEncounterEntriesCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*) from SQLUser.MR_EncEntry	where 1=1  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetPrescCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*) from sqluser.PA_Que1	where 1=1  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetOTBookingCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*) from SQLUser.RB_OperatingRoom	where 1=1  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetAnesSummaryCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*) from SQLUser.OR_Anaesthesia	where 1=1  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetMRPictureCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*) from SQLUser.MR_Pictures	where 1=1  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetAnnotatedImagesCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*) from SQLUser.OE_Annotation	where 1=1  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetVisualRuleAlertsCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*) from websys.DSSAuditAction	where 1=1  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetOrderAlertsCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*) from SQLUser.OE_OrdAlertMessage	where 1=1  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetClinicalSummaryCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>condition</FormalSpec>
<Implementation><![CDATA[
	
	set sql="select count(*) from SQLUser.PA_Adm2DischargeSummary	where 1=1  "_condition
	quit ..GetSqlSingleResult(sql)
]]></Implementation>
</Method>

<Method name="GetEpsDoctorList">
<ClassMethod>1</ClassMethod>
<FormalSpec>PAADMRowID</FormalSpec>
<Implementation><![CDATA[
	
 set EpsDocList=""	
		
 &SQL(DECLARE  EpsDoctorsQuery CURSOR FOR
 	select distinct  :regioncode||'-'||:sitecode||'-USER-'||SSUSR_RowId
	from SQLUser.PA_AdmTransaction ,SQLUser.SS_User
	where SSUSR_CareProv_DR=TRANS_CTCP_DR 
	and TRANS_ParRef=:PAADMRowID and not TRANS_CTCP_DR is null)
 &SQL(OPEN  EpsDoctorsQuery)
 f  
 {
	 
	 
	 set (Doctor)=""
	 &SQL(FETCH  EpsDoctorsQuery into :Doctor) 
	 q:SQLCODE'=0 
	 
	 if (EpsDocList="")
	 {
		set EpsDocList=Doctor	 
	 }
	 else
	 {
		 set EpsDocList=EpsDocList_","_Doctor
	 } 
	 
	  
 }
 &SQL(CLOSE  EpsDoctorsQuery)
	
	 
 quit EpsDocList
]]></Implementation>
</Method>

<Method name="GetEpsWardList">
<ClassMethod>1</ClassMethod>
<FormalSpec>PAADMRowID</FormalSpec>
<Implementation><![CDATA[
	
 set EpsWardList=""	
		
 &SQL(DECLARE  EpsWardsQuery CURSOR FOR
 	select  distinct UPPER(TRANS_Ward_DR->WARD_Desc)
	from SQLUser.PA_AdmTransaction  
	where TRANS_ParRef=:PAADMRowID and not TRANS_Ward_DR is null)
 &SQL(OPEN  EpsWardsQuery)
 f  
 {
	 
	 
	 set (Ward)=""
	 &SQL(FETCH  EpsWardsQuery into :Ward) 
	 q:SQLCODE'=0 
	 
	 if (EpsWardList="")
	 {
		set EpsWardList=Ward	 
	 }
	 else
	 {
		 set EpsWardList=EpsWardList_","_Ward
	 } 
	 
	  
 }
 &SQL(CLOSE  EpsWardsQuery)
	
	 
 quit EpsWardList
]]></Implementation>
</Method>

<Query name="UserPAAdmQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="PAADMRowID:%String,EpisodeDept:%String,AdmUserDR:%String,EpisodeUserDR:%String,AdmDate:%String,AdmTime:%String,DisDate:%String,DisTime:%String,LOSMin:%String,EpisodeType:%String,VisitStatus:%String,Region:%String,Site:%String,HospID:%String,Ward:%String,TreatingDoctor:%String,PAPMIId:%String,DisUserDR:%String,DoctorList:%String,WardList:%String,Triage:%String"/>
</Query>

<Method name="UserPAAdmQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
  &SQL(DECLARE   UserPAAdmQuery CURSOR FOR
select  
:regioncode||'-'||:sitecode||'-EPS-'||PAADM_RowID as "PAADMRowID"
,PAADM_DepCode_DR->CTLOC_Desc as "EpisodeDept"
,:regioncode||'-'||:sitecode||'-USER-'||(select top 1 SSUSR_RowId from  SQLUser.SS_User where SSUSR_CareProv_DR=PAADM_AdmDocCodeDR) As "AdmUserDR"
,:regioncode||'-'||:sitecode||'-USER-'||(select top 1 SSUSR_RowId from  SQLUser.SS_User where SSUSR_CareProv_DR=PAADM_TreatingDr_DR) As "EpisodeUserDR"
,TO_CHAR(PAADM_AdmDate,'YYYY-MM-DD')  as "AdmDate"
,TO_CHAR(PAADM_AdmTime,'HH24')  as "AdmTime"
,TO_CHAR(PAADM_DischgDate,'YYYY-MM-DD')  as "DisDate"
,TO_CHAR(PAADM_DischgTime,'HH24')  as "DisTime"
, DATEDIFF('mi',PAADM_AdmDate||','||PAADM_AdmTime,PAADM_DischgDate||','||PAADM_DischgTime)  as "LOSMin"
,%external(PAADM_Type) as "EpisodeType"
,%external(PAADM_VisitStatus) as "VisitStatus"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||PAADM_Hospital_DR as "HospID"
,PAADM_CurrentWard_DR->WARD_Desc as "Ward"
,:regioncode||'-'||:sitecode||'-USER-'||(select top 1 SSUSR_RowId from SQLUser.PA_AdmTransaction,SQLUser.SS_User where TRANS_ParRef=PAADM_RowID and not TRANS_CTCP_DR is null and SSUSR_CareProv_DR=TRANS_CTCP_DR order by TRANS_Childsub desc) as "TreatingDoctor"
,:regioncode||'-'||:sitecode||'-PAT-'||PAADM_PAPMI_DR->PAPMI_RowId
,:regioncode||'-'||:sitecode||'-USER-'||(select top 1 SSUSR_RowId from  SQLUser.SS_User where SSUSR_CareProv_DR=PAADM_DischgDoc_DR) As "DisUserDR"
,case when  PAADM_TriageDate is null then 'No' else 'Yes' end as "Triage"
from SQLUser.PA_Adm
 --where PAADM_AdmDate=:date or (:date=:fromdate and PAADM_AdmDate<:fromdate and PAADM_VisitStatus='A' )
order by PAADM_RowID)
 &SQL(OPEN   UserPAAdmQuery)
 f  
 {
	 set (PAADMRowID,EpisodeDept,AdmUserDR,EpisodeUserDR,AdmDate,AdmTime,DisDate,DisTime,EpisodeType,VisitStatus,HospID,LOSMin,Problems,DoctorList,WardList,Triage)=""
	 
	 &SQL(FETCH   UserPAAdmQuery into :PAADMRowID,:EpisodeDept,:AdmUserDR,:EpisodeUserDR,:AdmDate,:AdmTime,:DisDate,:DisTime,:LOSMin,:EpisodeType,:VisitStatus,:Region,:Site,:HospID,:Ward,:TreatingDoctor,:PAPMIId,:DisUserDR,:Triage) 
	 
	 q:SQLCODE'=0  
	 
	 s ind=ind+1
	 
 	 
	 set episodeid=$p(PAADMRowID,"-",4)
	 
	 set DoctorList=..GetEpsDoctorList(episodeid)
	 
	 set WardList=..GetEpsWardList(episodeid)
	 
	 
	 
	 /*
	 
	 set Observations=..GetObservationsCount(" and OBS_ParRef="_episodeid)
	 
	 set Diagnosis=..GetDiagnosisCount(" and MRDIA_MRADM_ParRef->MRADM_ADM_DR="_episodeid)
	 
	 set ClinicalNotes=..GetClinicalNotesCount(" and  NOT_ParRef->MRADM_ADM_DR="_episodeid)
	  
	 set Orders=..GetOrdersCount("and OEORI_OEORD_ParRef->OEORD_Adm_DR="_episodeid_" ")
	
	 set:Orders>0 AdminOrders=..GetAdminMedCount(" and OEORE_OEORI_ParRef->OEORI_OEORD_ParRef->OEORD_Adm_DR="_episodeid_" and OEORE_QtyAdmin>0")   
	 
	 set Encounters=..GetEncountersCount(" and ENC_MRAdm_DR->MRADM_ADM_DR="_episodeid)
	     
	 set:Encounters>0 Entries=..GetEncounterEntriesCount(" and ENTRY_Encounter_DR->ENC_MRAdm_DR->MRADM_ADM_DR="_episodeid)
	 
	 set Questionnaires=..GetQuestionnaireCount(" and QUESPAAdmDR="_episodeid)
	 
	 set OTBooking=..GetOTBookingCount(" and RBOP_PAADM_DR="_episodeid_" and  RBOP_Status<>'X'")
	 
	 set AnesSummary=..GetAnesSummaryCount(" and ANA_PAADM_ParRef="_episodeid_" and  ANA_Status<>'X'")
	 
	 set ClinicalSummary=..GetClinicalSummaryCount(" and DIS_ParRef="_episodeid_" ")
	
 	set Presc=..GetPrescCount(" and QUE1_PAADM_DR="_episodeid_"")
	
	set PharmOrders=..GetOrdersCount(" and OEORI_OEORD_ParRef->OEORD_Adm_DR="_episodeid_" and OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_OrderType in ('R','I') ") 
	
	set ClinicalDocuments=..GetMRPictureCount(" and  PIC_ParRef="_episodeid_"")
 	
	set AnnImages=..GetAnnotatedImagesCount(" and  ANNOT_MRPic_DR->PIC_ParRef="_episodeid_"") 
	
	set OrderAlerts=..GetOrderAlertsCount("and ALM_OEORI_DR->OEORI_OEORD_ParRef->OEORD_Adm_DR="_episodeid_"")
	
	set VisualRules=..GetOrderAlertsCount("and ActionEpisode="_episodeid_"") 
	
	set:Orders>0 LabOrders=..GetOrdersCount(" and OEORI_OEORD_ParRef->OEORD_Adm_DR="_episodeid_" and OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_OrderType='L' ")
	
	set:LabOrders>0 LabResults=..GetOrdersCount(" and OEORI_OEORD_ParRef->OEORD_Adm_DR="_episodeid_" and OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_OrderType='L' and  OEORI_ItemStat_DR->OSTAT_Code  in ('E')")
	
	set:Orders>0 RadOrders=..GetOrdersCount("and  OEORI_OEORD_ParRef->OEORD_Adm_DR="_episodeid_" and OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_OrderType='N' and not OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_TextResultType_DR is null and OEORI_ItemStat_DR->OSTAT_Code not in ('U','I')")
	
	set:RadOrders>0 RadResults=..GetOrdersCount("and OEORI_OEORD_ParRef->OEORD_Adm_DR="_episodeid_" and OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_OrderType='N and not OEORI_ItmMast_DR->ARCIM_ItemCat_DR->ARCIC_TextResultType_DR is null' and  OEORI_ItemStat_DR->OSTAT_Code  in ('E')")
	
 	set Problems=..GetEpisodeProblemsCount(episodeid)
	 
	 */
	 
	 
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(PAADMRowID,EpisodeDept,AdmUserDR,EpisodeUserDR,AdmDate,AdmTime,DisDate,DisTime,LOSMin,EpisodeType,VisitStatus,regioncode,sitecode,HospID,Ward,TreatingDoctor,PAPMIId,DisUserDR,DoctorList,WardList,Triage)
 }
 &SQL(CLOSE   UserPAAdmQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserPAAdmQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserPAAdmQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserPAAdmQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserPAAdmQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="WebsysMonitorLicQuery">
<Type>%Query</Type>
<FormalSpec>date:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="MonitorDate:%String,MonitorTime:%String,CacheAvailable:%String,CacheConsumed:%String,CacheMaxNo:%String,CacheMinNo:%String,CacheTotal:%String,TrakCare:%String,Region:%String,Site:%String"/>
</Query>

<Method name="WebsysMonitorLicQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
  &SQL(DECLARE WebsysMonitorLicQuery CURSOR FOR
select 
TO_CHAR(MonitorDate,'YYYY-MM-DD') As "MonitorDate"
,TO_CHAR(MonitorTime,'HH24:MI') As "MonitorTime"
,CacheAvailable,CacheConsumed,CacheMaxNo,CacheMinNo,CacheTotal,TrakCare
,:regioncode as "Region"
,:sitecode as "Site"
from websys.MonitorLicense
where MonitorDate=:date
 )
 &SQL(OPEN WebsysMonitorLicQuery)
 f  
 {
	 set (MonitorDate,MonitorTime,CacheAvailable,CacheConsumed,CacheMaxNo,CacheMinNo,CacheTotal,TrakCare)=""
	 &SQL(FETCH WebsysMonitorLicQuery into :MonitorDate,:MonitorTime,:CacheAvailable,:CacheConsumed,:CacheMaxNo,:CacheMinNo,:CacheTotal,:TrakCare,:Region,:Site) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 
	  
	 
	 
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(MonitorDate,MonitorTime,CacheAvailable,CacheConsumed,CacheMaxNo,CacheMinNo,CacheTotal,TrakCare,regioncode,sitecode)
 }
 &SQL(CLOSE WebsysMonitorLicQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="WebsysMonitorLicQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>WebsysMonitorLicQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="WebsysMonitorLicQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>WebsysMonitorLicQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserObservationsQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="OBSDate:%String,ObsCode:%String,ObsDesc:%String,ObsOwner:%String,PAADMRowID:%String,PAPMIRowID:%String,UserDR:%String,Region:%String,Site:%String,HospID:%String,Count:%String"/>
</Query>

<Method name="UserObservationsQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0

#if ($$$TCVersion<=2012)
	
	&SQL(DECLARE  UserObservationsQuery CURSOR FOR
select
TO_CHAR(OBS_Date,'YYYY-MM-DD') As "OBSDate"
,OBS_Item_DR->ITM_Code as "ObsCode"
,OBS_Item_DR->ITM_Desc as "ObsDesc"
,'' as "ObsOwner"
,:regioncode||'-'||:sitecode||'-EPS-'||OBS_ParRef->MRADM_ADM_DR as "PAADMRowID"
,:regioncode||'-'||:sitecode||'-PAT-'||OBS_ParRef->MRADM_ADM_DR->PAADM_PAPMI_DR->PAPMI_RowId as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||OBS_User_DR as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||OBS_ParRef->MRADM_ADM_DR->PAADM_Hospital_DR as "HospID"
,count(*) as "Count"
from SQLUser.MR_Observations
where OBS_Date=:date and not OBS_Item_DR is null
group by OBS_Date,OBS_Item_DR,OBS_ParRef,OBS_User_DR)
 &SQL(OPEN  UserObservationsQuery)
 f  
 {
	 
	 
	 set (OBSDate,ObsCode,ObsDesc,ObsOwner,PAADMRowID,PAPMIRowID,UserDR,HospID,Count)=""
	 &SQL(FETCH  UserObservationsQuery into :OBSDate,:ObsCode,:ObsDesc,:ObsOwner,:PAADMRowID,:PAPMIRowID,:UserDR,:Region,:Site,:HospID,:Count) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(OBSDate,ObsCode,ObsDesc,ObsOwner,PAADMRowID,PAPMIRowID,UserDR,regioncode,sitecode,HospID,Count)
 }
 &SQL(CLOSE  UserObservationsQuery)	 
	
	#else
	
	&SQL(DECLARE  UserObservationsQuery CURSOR FOR
select
TO_CHAR(OBS_Date,'YYYY-MM-DD') As "OBSDate"
,OBS_Item_DR->ITM_Code as "ObsCode"
,OBS_Item_DR->ITM_Desc as "ObsDesc"
,OBS_Item_DR->ITM_Owner as "ObsOwner"
,:regioncode||'-'||:sitecode||'-EPS-'||OBS_ParRef->MRADM_ADM_DR as "PAADMRowID"
,:regioncode||'-'||:sitecode||'-PAT-'||OBS_ParRef->MRADM_ADM_DR->PAADM_PAPMI_DR->PAPMI_RowId as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||OBS_User_DR as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||OBS_ParRef->MRADM_ADM_DR->PAADM_Hospital_DR as "HospID"
,count(*) as "Count"
from SQLUser.MR_Observations
where OBS_Date=:date and not OBS_Item_DR is null
group by OBS_Date,OBS_Item_DR,OBS_ParRef,OBS_User_DR)
 &SQL(OPEN  UserObservationsQuery)
 f  
 {
	 
	 
	 set (OBSDate,ObsCode,ObsDesc,ObsOwner,PAADMRowID,PAPMIRowID,UserDR,HospID,Count)=""
	 &SQL(FETCH  UserObservationsQuery into :OBSDate,:ObsCode,:ObsDesc,:ObsOwner,:PAADMRowID,:PAPMIRowID,:UserDR,:Region,:Site,:HospID,:Count) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(OBSDate,ObsCode,ObsDesc,ObsOwner,PAADMRowID,PAPMIRowID,UserDR,regioncode,sitecode,HospID,Count)
 }
 &SQL(CLOSE  UserObservationsQuery)
	
	#endif


  
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserObservationsQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserObservationsQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserObservationsQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserObservationsQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserDiagnosisQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="DiagDate:%String,DiagCode:%String,DiagDesc:%String,PAADMRowID:%String,PAPMIRowID:%String,UserDR:%String,Region:%String,Site:%String,HospID:%String,Count:%String"/>
</Query>

<Method name="UserDiagnosisQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
  &SQL(DECLARE  UserDiagnosisQuery CURSOR FOR
select
TO_CHAR(MRDIA_Date,'YYYY-MM-DD') As "DiagDate"
,MRDIA_ICDCode_DR->MRCID_Code as "DiagCode"
,MRDIA_ICDCode_DR->MRCID_ShortDesc as "DiagDesc"
,:regioncode||'-'||:sitecode||'-EPS-'||MRDIA_MRADM_ParRef->MRADM_ADM_DR as "PAADMRowID"
,:regioncode||'-'||:sitecode||'-PAT-'||MRDIA_MRADM_ParRef->MRADM_ADM_DR->PAADM_PAPMI_DR->PAPMI_RowId as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||MRDIA_UserCreated_DR  as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||MRDIA_MRADM_ParRef->MRADM_ADM_DR->PAADM_Hospital_DR as "HospID"
,count(*) as "Count"
from SQLUser.MR_Diagnos
where MRDIA_Date=:date and not MRDIA_ICDCode_DR is null
group by MRDIA_Date,MRDIA_ICDCode_DR,MRDIA_MRADM_ParRef,MRDIA_UserCreated_DR)
 &SQL(OPEN  UserDiagnosisQuery)
 f  
 {
	 
	 
	 set (DiagDate,DiagCode,DiagDesc,PAADMRowID,PAPMIRowID,UserDR,HospID,Count)=""
	 &SQL(FETCH  UserDiagnosisQuery into :DiagDate,:DiagCode,:DiagDesc,:PAADMRowID,:PAPMIRowID,:UserDR,:Region,:Site,:HospID,:Count) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(DiagDate,DiagCode,DiagDesc,PAADMRowID,PAPMIRowID,UserDR,regioncode,sitecode,HospID,Count)
 }
 &SQL(CLOSE  UserDiagnosisQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserDiagnosisQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserDiagnosisQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserDiagnosisQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserDiagnosisQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserClinicalNotesQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="NOTDate:%String,NoteTypeCode:%String,NoteTypeDesc:%String,NoteTypeOwner:%String,PAADMRowID:%String,PAPMIRowID:%String,UserDR:%String,Region:%String,Site:%String,HospID:%String,Count:%String"/>
</Query>

<Method name="UserClinicalNotesQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 

  #if ($$$TCVersion<=2012)
	
	&SQL(DECLARE  UserClinicalNotesQuery CURSOR FOR
select
TO_CHAR(NOT_Date,'YYYY-MM-DD') As "NOTDate"
,NOT_ClinNotesType_DR->CNT_Code as "NoteTypeCode"
,NOT_ClinNotesType_DR->CNT_Desc as "NoteTypeDesc"
,'' as "NoteTypeOwner"
,:regioncode||'-'||:sitecode||'-EPS-'||NOT_ParRef->MRADM_ADM_DR as "PAADMRowID"
,:regioncode||'-'||:sitecode||'-PAT-'||NOT_ParRef->MRADM_ADM_DR->PAADM_PAPMI_DR->PAPMI_RowId as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||NOT_User_DR as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||NOT_ParRef->MRADM_ADM_DR->PAADM_Hospital_DR as "HospID"
,count(*) as "Count"
from SQLUser.MR_NursingNotes
where NOT_Date=:date
group by NOT_Date,NOT_ClinNotesType_DR,NOT_ParRef,NOT_User_DR)	 
	
#else
	
	&SQL(DECLARE  UserClinicalNotesQuery CURSOR FOR
select
TO_CHAR(NOT_Date,'YYYY-MM-DD') As "NOTDate"
,NOT_ClinNotesType_DR->CNT_Code as "NoteTypeCode"
,NOT_ClinNotesType_DR->CNT_Desc as "NoteTypeDesc"
,NOT_ClinNotesType_DR->CNT_Owner as "NoteTypeOwner"
,:regioncode||'-'||:sitecode||'-EPS-'||NOT_ParRef->MRADM_ADM_DR as "PAADMRowID"
,:regioncode||'-'||:sitecode||'-PAT-'||NOT_ParRef->MRADM_ADM_DR->PAADM_PAPMI_DR->PAPMI_RowId as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||NOT_User_DR as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||NOT_ParRef->MRADM_ADM_DR->PAADM_Hospital_DR as "HospID"
,count(*) as "Count"
from SQLUser.MR_NursingNotes
where NOT_Date=:date
group by NOT_Date,NOT_ClinNotesType_DR,NOT_ParRef,NOT_User_DR)
	
#endif
  
  
 &SQL(OPEN  UserClinicalNotesQuery)
 f  
 {
	 
	 
	 set (NOTDate,NoteTypeCode,NoteTypeDesc,NoteTypeOwner,PAADMRowID,PAPMIRowID,UserDR,HospID,Count)=""
	 &SQL(FETCH  UserClinicalNotesQuery into :NOTDate,:NoteTypeCode,:NoteTypeDesc,:NoteTypeOwner,:PAADMRowID,:PAPMIRowID,:UserDR,:Region,:Site,:HospID,:Count) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(NOTDate,NoteTypeCode,NoteTypeDesc,NoteTypeOwner,PAADMRowID,PAPMIRowID,UserDR,regioncode,sitecode,HospID,Count)
 }
 &SQL(CLOSE  UserClinicalNotesQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserClinicalNotesQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserClinicalNotesQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserClinicalNotesQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserClinicalNotesQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserEncountersQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="ENCDate:%String,EpisodeType:%String,PAADMRowID:%String,PAPMIRowID:%String,Region:%String,Site:%String,HospID:%String,Count:%String"/>
</Query>

<Method name="UserEncountersQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 
 #if ($$$TCVersion<=2012)
	
		 
	
	#else
	
	
	
	
 
 //
  &SQL(DECLARE  UserEncountersQuery CURSOR FOR
select 
TO_CHAR(ENC_StartDate,'YYYY-MM-DD') As "ENCDate"
,%external(ENC_MRAdm_DR->MRADM_ADM_DR->PAADM_Type) as "EpisodeType"
,:regioncode||'-'||:sitecode||'-EPS-'||ENC_MRAdm_DR->MRADM_ADM_DR as "PAADMRowID"
,:regioncode||'-'||:sitecode||'-PAT-'||ENC_MRAdm_DR->MRADM_ADM_DR->PAADM_PAPMI_DR->PAPMI_RowId as "PAPMIRowID"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||ENC_MRAdm_DR->MRADM_ADM_DR->PAADM_Hospital_DR as "HospID"
,count(*) as "Count"
from SQLUser.MR_Encounter
where ENC_StartDate=:date
group by ENC_StartDate,ENC_MRAdm_DR)
 &SQL(OPEN  UserEncountersQuery)
 f  
 {
	 
	 
	 set (ENCDate,EpisodeType,PAADMRowID,PAPMIRowID,HospID,Count)=""
	 &SQL(FETCH  UserEncountersQuery into :ENCDate,:EpisodeType,:PAADMRowID,:PAPMIRowID,:Region,:Site,:HospID,:Count) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(ENCDate,EpisodeType,PAADMRowID,PAPMIRowID,regioncode,sitecode,HospID,Count)
 }
 &SQL(CLOSE  UserEncountersQuery)
 
 
 #endif
 
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserEncountersQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserEncountersQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserEncountersQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserEncountersQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserEncEntriesQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="EntryDate:%String,ETYPECode:%String,ETYPEDesc:%String,ETYPEOwner:%String,EpisodeType:%String,Loc:%String,PAADMRowID:%String,PAPMIRowID:%String,UserDR:%String,Region:%String,Site:%String,HospID:%String,Count:%String"/>
</Query>

<Method name="UserEncEntriesQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 
 #if ($$$TCVersion<=2012)
	
		 
	
	#else
	
	 //
  &SQL(DECLARE  UserEncEntriesQuery CURSOR FOR
select 
TO_CHAR(ENTRY_StartDate,'YYYY-MM-DD') As "EntryDate"
,ENTRY_EntryType_DR->ETYPE_Code
,ENTRY_EntryType_DR->ETYPE_Desc
,ENTRY_EntryType_DR->ETYPE_Owner
,ENTRY_Encounter_DR->ENC_MRAdm_DR->MRADM_ADM_DR->PAADM_Type as "EpisodeType"
,ENTRY_StartLocation_DR->CTLOC_Desc as "LocDesc"
,:regioncode||'-'||:sitecode||'-EPS-'||ENTRY_Encounter_DR->ENC_MRAdm_DR->MRADM_ADM_DR as "PAADMRowID"
,:regioncode||'-'||:sitecode||'-PAT-'||ENTRY_Encounter_DR->ENC_MRAdm_DR->MRADM_ADM_DR->PAADM_PAPMI_DR->PAPMI_RowId as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||ENTRY_StartUser_DR as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||ENTRY_Encounter_DR->ENC_MRAdm_DR->MRADM_ADM_DR->PAADM_Hospital_DR as "HospID"
,count(*) as "Count"
from SQLUser.MR_EncEntry
where ENTRY_StartDate=:date
group by ENTRY_StartDate,ENTRY_EntryType_DR,ENTRY_Encounter_DR,ENTRY_StartLocation_DR,ENTRY_StartUser_DR)
 &SQL(OPEN  UserEncEntriesQuery)
 f  
 {
	 
	 
	 set (EntryDate,ETYPECode,ETYPEDesc,ETYPEOwner,EpisodeType,Loc,PAADMRowID,PAPMIRowID,UserDR,HospID,Count)=""
	 &SQL(FETCH  UserEncEntriesQuery into :EntryDate,:ETYPECode,:ETYPEDesc,:ETYPEOwner,:EpisodeType,:Loc,:PAADMRowID,:PAPMIRowID,:UserDR,:Region,:Site,:HospID,:Count) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(EntryDate,ETYPECode,ETYPEDesc,ETYPEOwner,EpisodeType,Loc,PAADMRowID,PAPMIRowID,UserDR,regioncode,sitecode,HospID,Count)
 }
 &SQL(CLOSE  UserEncEntriesQuery)
	
	#endif
 

 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserEncEntriesQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserEncEntriesQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserEncEntriesQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserEncEntriesQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserOTBookingQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="DateOper:%String,websys:%String,PAADMRowID:%String,PAPMIRowID:%String,UserDR:%String,Region:%String,Site:%String,HospID:%String,Count:%String"/>
</Query>

<Method name="UserOTBookingQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
  &SQL(DECLARE  UserOTBookingQuery CURSOR FOR
select 
TO_CHAR(RBOP_DateOper,'YYYY-MM-DD') As "DateOper"
,%external(RBOP_Status) as "Status"
,:regioncode||'-'||:sitecode||'-EPS-'||RBOP_PAADM_DR as "PAADMRowID"
,:regioncode||'-'||:sitecode||'-PAT-'||RBOP_PAADM_DR->PAADM_PAPMI_DR->PAPMI_RowId as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||RBOP_UpdateUser as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||RBOP_PAADM_DR->PAADM_Hospital_DR as "HospID"
,count(*) as "Count" 
from SQLUser.RB_OperatingRoom
where RBOP_Status<>'X' and RBOP_DateOper=:date
group by RBOP_DateOper,RBOP_Status,RBOP_PAADM_DR,RBOP_UpdateUser)
 &SQL(OPEN  UserOTBookingQuery)
 f  
 {
	 
	 
	 set (DateOper,websys,PAADMRowID,PAPMIRowID,UserDR,HospID,Count)=""
	 &SQL(FETCH  UserOTBookingQuery into :DateOper,:websys,:PAADMRowID,:PAPMIRowID,:UserDR,:Region,:Site,:HospID,:Count) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(DateOper,websys,PAADMRowID,PAPMIRowID,UserDR,regioncode,sitecode,HospID,Count)
 }
 &SQL(CLOSE  UserOTBookingQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserOTBookingQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserOTBookingQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserOTBookingQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserOTBookingQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserAnesSummaryQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="ANADate:%String,AnaStatus:%String,PAADMRowID:%String,PAPMIRowID:%String,UserDR:%String,Region:%String,Site:%String,HospID:%String,Count:%String"/>
</Query>

<Method name="UserAnesSummaryQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
  &SQL(DECLARE  UserAnesSummaryQuery CURSOR FOR
select 
TO_CHAR(ANA_Date,'YYYY-MM-DD') As "ANADate"
,%external(ANA_Status) as "AnaStatus"
,:regioncode||'-'||:sitecode||'-EPS-'||ANA_PAADM_ParRef as "PAADMRowID"
,:regioncode||'-'||:sitecode||'-PAT-'||ANA_PAADM_ParRef->PAADM_PAPMI_DR->PAPMI_RowId as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||ANA_UpdateUser_DR as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||ANA_PAADM_ParRef->PAADM_Hospital_DR as "HospID"
,count(*) as "Count"
from SQLUser.OR_Anaesthesia
where ANA_Date=:date
group by ANA_Date,ANA_Status,ANA_PAADM_ParRef,ANA_UpdateUser_DR)
 &SQL(OPEN  UserAnesSummaryQuery)
 f  
 {
	 
	 
	 set (ANADate,AnaStatus,PAADMRowID,PAPMIRowID,UserDR,HospID,Count)=""
	 &SQL(FETCH  UserAnesSummaryQuery into :ANADate,:AnaStatus,:PAADMRowID,:PAPMIRowID,:UserDR,:Region,:Site,:HospID,:Count) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(ANADate,AnaStatus,PAADMRowID,PAPMIRowID,UserDR,regioncode,sitecode,HospID,Count)
 }
 &SQL(CLOSE  UserAnesSummaryQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserAnesSummaryQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserAnesSummaryQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserAnesSummaryQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserAnesSummaryQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserClinicalSummaryQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="CreateDate:%String,DSTCode:%String,DSTDesc:%String,DSTOwner:%String,DisStatus:%String,PAADMRowID:%String,PAPMIRowID:%String,UserDR:%String,Region:%String,Site:%String,HospID:%String,Count:%String"/>
</Query>

<Method name="UserClinicalSummaryQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 
 #if ($$$TCVersion<=2012)
	
	 &SQL(DECLARE  UserClinicalSummaryQuery CURSOR FOR
select 
TO_CHAR(DIS_PADischargeSummary_DR->DIS_CreateDate,'YYYY-MM-DD') As "CreateDate"
,DIS_PADischargeSummary_DR->DIS_DischargeSummaryType_DR->DSTCode
,DIS_PADischargeSummary_DR->DIS_DischargeSummaryType_DR->DSTDesc
,''
,%external(DIS_PADischargeSummary_DR->DIS_Status) as "DisStatus"
,:regioncode||'-'||:sitecode||'-EPS-'||DIS_ParRef->PAADM2_PAADM_DR as "PAADMRowID"
,:regioncode||'-'||:sitecode||'-PAT-'||DIS_ParRef->PAADM2_PAADM_DR->PAADM_PAPMI_DR->PAPMI_RowId as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||DIS_PADischargeSummary_DR->DIS_UpdateUser_DR as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||DIS_ParRef->PAADM2_PAADM_DR->PAADM_Hospital_DR as "HospID"
,count(*) as "Count"
from SQLUser.PA_Adm2DischargeSummary
where not DIS_PADischargeSummary_DR is null and DIS_PADischargeSummary_DR->DIS_CreateDate=:date
group by DIS_PADischargeSummary_DR->DIS_CreateDate,DIS_PADischargeSummary_DR->DIS_DischargeSummaryType_DR,DIS_PADischargeSummary_DR->DIS_Status,DIS_ParRef->PAADM2_PAADM_DR,DIS_PADischargeSummary_DR->DIS_UpdateUser_DR
)	 
	
#else
	
	 &SQL(DECLARE  UserClinicalSummaryQuery CURSOR FOR
select 
TO_CHAR(DIS_PADischargeSummary_DR->DIS_CreateDate,'YYYY-MM-DD') As "CreateDate"
,DIS_PADischargeSummary_DR->DIS_DischargeSummaryType_DR->DSTCode
,DIS_PADischargeSummary_DR->DIS_DischargeSummaryType_DR->DSTDesc
,DIS_PADischargeSummary_DR->DIS_DischargeSummaryType_DR->DST_Owner
,%external(DIS_PADischargeSummary_DR->DIS_Status) as "DisStatus"
,:regioncode||'-'||:sitecode||'-EPS-'||DIS_ParRef->PAADM2_PAADM_DR as "PAADMRowID"
,:regioncode||'-'||:sitecode||'-PAT-'||DIS_ParRef->PAADM2_PAADM_DR->PAADM_PAPMI_DR->PAPMI_RowId as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||DIS_PADischargeSummary_DR->DIS_UpdateUser_DR as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||DIS_ParRef->PAADM2_PAADM_DR->PAADM_Hospital_DR as "HospID"
,count(*) as "Count"
from SQLUser.PA_Adm2DischargeSummary
where not DIS_PADischargeSummary_DR is null and DIS_PADischargeSummary_DR->DIS_CreateDate=:date
group by DIS_PADischargeSummary_DR->DIS_CreateDate,DIS_PADischargeSummary_DR->DIS_DischargeSummaryType_DR,DIS_PADischargeSummary_DR->DIS_Status,DIS_ParRef->PAADM2_PAADM_DR,DIS_PADischargeSummary_DR->DIS_UpdateUser_DR
)
	
#endif
 
 
 &SQL(OPEN  UserClinicalSummaryQuery)
 f  
 {
	 
	 
	 set (CreateDate,DSTCode,DSTDesc,DSTOwner,DisStatus,PAADMRowID,PAPMIRowID,UserDR,HospID,Count)=""
	 &SQL(FETCH  UserClinicalSummaryQuery into :CreateDate,:DSTCode,:DSTDesc,:DSTOwner,:DisStatus,:PAADMRowID,:PAPMIRowID,:UserDR,:Region,:Site,:HospID,:Count) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(CreateDate,DSTCode,DSTDesc,DSTOwner,DisStatus,PAADMRowID,PAPMIRowID,UserDR,regioncode,sitecode,HospID,Count)
 }
 &SQL(CLOSE  UserClinicalSummaryQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserClinicalSummaryQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserClinicalSummaryQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserClinicalSummaryQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserClinicalSummaryQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserClinicalDocumentsQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="DateCreated:%String,PicTypeCode:%String,PicTypeDesc:%String,PAADMRowID:%String,PAPMIRowID:%String,UserDR:%String,Region:%String,Site:%String,HospID:%String,Count:%String"/>
</Query>

<Method name="UserClinicalDocumentsQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
  &SQL(DECLARE  UserClinicalDocumentsQuery CURSOR FOR
select
TO_CHAR(PIC_DateCreated,'YYYY-MM-DD') As "DateCreated"
,PIC_DocType_DR->DOCTYPE_Code as "PicTypeCode"
,PIC_DocType_DR->DOCTYPE_Desc as "PicTypeDesc"
,:regioncode||'-'||:sitecode||'-EPS-'||PIC_ParRef->MRADM_ADM_DR as "PAADMRowID"
,:regioncode||'-'||:sitecode||'-PAT-'||PIC_ParRef->MRADM_ADM_DR->PAADM_PAPMI_DR as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||PIC_UserCreated as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||PIC_ParRef->MRADM_ADM_DR->PAADM_Hospital_DR as "HospID"
,count(*) as "Count"
from SQLUser.MR_Pictures 
where (PIC_Inactive='N' or PIC_Inactive is null) and PIC_DateCreated=:date
group by PIC_DateCreated,PIC_DocType_DR,PIC_ParRef,PIC_UserCreated)
 &SQL(OPEN  UserClinicalDocumentsQuery)
 f  
 {
	 
	 
	 set (DateCreated,PicTypeCode,PicTypeDesc,PAADMRowID,PAPMIRowID,UserDR,HospID,Count)=""
	 &SQL(FETCH  UserClinicalDocumentsQuery into :DateCreated,:PicTypeCode,:PicTypeDesc,:PAADMRowID,:PAPMIRowID,:UserDR,:Region,:Site,:HospID,:Count) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(DateCreated,PicTypeCode,PicTypeDesc,PAADMRowID,PAPMIRowID,UserDR,regioncode,sitecode,HospID,Count)
 }
 &SQL(CLOSE  UserClinicalDocumentsQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserClinicalDocumentsQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserClinicalDocumentsQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserClinicalDocumentsQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserClinicalDocumentsQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserAnnImagesQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="ANNOTDate:%String,PicTypeCode:%String,PicTypeDesc:%String,PAADMRowID:%String,PAPMIRowID:%String,UserDR:%String,Region:%String,Site:%String,HospID:%String,Count:%String"/>
</Query>

<Method name="UserAnnImagesQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
  &SQL(DECLARE  UserAnnImagesQuery CURSOR FOR
select
TO_CHAR(ANNOT_UpdateDate,'YYYY-MM-DD') As "ANNOTDate"
,ANNOT_MRPic_DR->PIC_DocType_DR->DOCTYPE_Code as "PicTypeCode"
,ANNOT_MRPic_DR->PIC_DocType_DR->DOCTYPE_Desc as "PicTypeDesc"
,:regioncode||'-'||:sitecode||'-EPS-'||ANNOT_MRPic_DR->PIC_ParRef->MRADM_ADM_DR as "PAADMRowID"
,:regioncode||'-'||:sitecode||'-PAT-'||ANNOT_MRPic_DR->PIC_ParRef->MRADM_ADM_DR->PAADM_PAPMI_DR as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||ANNOT_UpdateUser_DR as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||ANNOT_MRPic_DR->PIC_ParRef->MRADM_ADM_DR->PAADM_Hospital_DR as "HospID"
,count(*) as "Count"
from SQLUser.OE_Annotation
where ANNOT_UpdateDate=:date
group by ANNOT_UpdateDate,ANNOT_MRPic_DR,ANNOT_MRPic_DR->PIC_ParRef,ANNOT_UpdateUser_DR)
 &SQL(OPEN  UserAnnImagesQuery)
 f  
 {
	 
	 
	 set (ANNOTDate,PicTypeCode,PicTypeDesc,PAADMRowID,PAPMIRowID,UserDR,HospID,Count)=""
	 &SQL(FETCH  UserAnnImagesQuery into :ANNOTDate,:PicTypeCode,:PicTypeDesc,:PAADMRowID,:PAPMIRowID,:UserDR,:Region,:Site,:HospID,:Count) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(ANNOTDate,PicTypeCode,PicTypeDesc,PAADMRowID,PAPMIRowID,UserDR,regioncode,sitecode,HospID,Count)
 }
 &SQL(CLOSE  UserAnnImagesQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserAnnImagesQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserAnnImagesQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserAnnImagesQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserAnnImagesQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserVisualRulesAuditQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="ActionDate:%String,ActionType:%String,PAADMRowID:%String,PAPMIRowID:%String,UserDR:%String,Region:%String,Site:%String,HospID:%String,Count:%String"/>
</Query>

<Method name="UserVisualRulesAuditQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
  &SQL(DECLARE  UserVisualRulesAuditQuery CURSOR FOR
select 
TO_CHAR(ActionDate,'YYYY-MM-DD') As "ActionDate"
,%external(ActionItem->ActionType) as "ActionType"
,:regioncode||'-'||:sitecode||'-EPS-'||ActionEpisode as "PAADMRowID"
,:regioncode||'-'||:sitecode||'-PAT-'||ActionPatient->PAPER_RowId as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||ActionUser as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||ActionEpisode->PAADM_Hospital_DR as "HospID"
,count(*) as "Count"
from websys.DSSAuditAction 
where ActionDate=:date
group by ActionDate,ActionItem->ActionType,ActionEpisode,ActionPatient,ActionUser)
 &SQL(OPEN  UserVisualRulesAuditQuery)
 f  
 {
	 
	 
	 set (ActionDate,ActionType,PAADMRowID,PAPMIRowID,UserDR,HospID,Count)=""
	 &SQL(FETCH  UserVisualRulesAuditQuery into :ActionDate,:ActionType,:PAADMRowID,:PAPMIRowID,:UserDR,:Region,:Site,:HospID,:Count) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(ActionDate,ActionType,PAADMRowID,PAPMIRowID,UserDR,regioncode,sitecode,HospID,Count)
 }
 &SQL(CLOSE  UserVisualRulesAuditQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserVisualRulesAuditQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserVisualRulesAuditQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserVisualRulesAuditQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserVisualRulesAuditQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserAlertsQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="ALMDate:%String,AlertCode:%String,AlertDesc:%String,PAPMIRowID:%String,UserDR:%String,Region:%String,Site:%String,HospID:%String,Count:%String"/>
</Query>

<Method name="UserAlertsQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
  &SQL(DECLARE  UserAlertsQuery CURSOR FOR
select 
TO_CHAR(ALM_CreateDate,'YYYY-MM-DD') As "ALMDate"
,ALM_Alert_DR->ALERT_Code as "AlertCode"
,ALM_Alert_DR->ALERT_Desc as "AlertDesc"
,:regioncode||'-'||:sitecode||'-PAT-'||ALM_PAPMI_ParRef->PAPMI_RowId as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||ALM_CreateUser as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||ALM_LastUpdateHospital_DR as "HospID"
,count(*) as "Count"
from SQLUser.PA_AlertMsg
where ALM_CreateDate=:date
group by ALM_CreateDate,ALM_Alert_DR,ALM_PAPMI_ParRef,ALM_CreateUser,ALM_LastUpdateHospital_DR)
 &SQL(OPEN  UserAlertsQuery)
 f  
 {
	 
	 
	 set (ALMDate,AlertCode,AlertDesc,PAPMIRowID,UserDR,HospID,Count)=""
	 &SQL(FETCH  UserAlertsQuery into :ALMDate,:AlertCode,:AlertDesc,:PAPMIRowID,:UserDR,:Region,:Site,:HospID,:Count) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(ALMDate,AlertCode,AlertDesc,PAPMIRowID,UserDR,regioncode,sitecode,HospID,Count)
 }
 &SQL(CLOSE  UserAlertsQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserAlertsQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserAlertsQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserAlertsQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserAlertsQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserAllergyQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="ALGDate:%String,ALGCATCode:%String,ALGCATDesc:%String,PAPMIRowID:%String,UserDR:%String,Region:%String,Site:%String,HospID:%String,Count:%String"/>
</Query>

<Method name="UserAllergyQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
  &SQL(DECLARE  UserAllergyQuery CURSOR FOR
select 
TO_CHAR(ALG_Date,'YYYY-MM-DD') As "ALGDate"
,ALG_Category_DR->ALRGCAT_Code
,ALG_Category_DR->ALRGCAT_Desc
,:regioncode||'-'||:sitecode||'-PAT-'||ALG_PAPMI_ParRef->PAPMI_RowId as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||ALG_UpdateUser_DR as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||ALG_LastUpdateHospital_DR as "HospID"
,count(*) as "Count"
from SQLUser.PA_Allergy 
where ALG_Date=:date
group by ALG_Date,ALG_Category_DR,ALG_PAPMI_ParRef,ALG_UpdateUser_DR,ALG_LastUpdateHospital_DR)
 &SQL(OPEN  UserAllergyQuery)
 f  
 {
	 
	 
	 set (ALGDate,ALGCATCode,ALGCATDesc,PAPMIRowID,UserDR,HospID,Count)=""
	 &SQL(FETCH  UserAllergyQuery into :ALGDate,:ALGCATCode,:ALGCATDesc,:PAPMIRowID,:UserDR,:Region,:Site,:HospID,:Count) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(ALGDate,ALGCATCode,ALGCATDesc,PAPMIRowID,UserDR,regioncode,sitecode,HospID,Count)
 }
 &SQL(CLOSE  UserAllergyQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserAllergyQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserAllergyQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserAllergyQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserAllergyQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserSocialHistoryQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="SCHDate:%String,PAPMIRowID:%String,UserDR:%String,Region:%String,Site:%String,HospID:%String,Count:%String"/>
</Query>

<Method name="UserSocialHistoryQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
  &SQL(DECLARE  UserSocialHistoryQuery CURSOR FOR
  select 
TO_CHAR(SCH_Date,'YYYY-MM-DD') As "SCHDate"
,:regioncode||'-'||:sitecode||'-PAT-'||SCH_PAPMI_ParRef->PAPMI_RowId as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||SCH_UpdateUser_DR as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||SCH_UpdateHospital_DR as "HospID"
,count(*) as "Count"
from SQLUser.PA_SocHist
where SCH_Date=:date
group by SCH_Date,SCH_PAPMI_ParRef,SCH_UpdateUser_DR,SCH_UpdateHospital_DR
)
 &SQL(OPEN  UserSocialHistoryQuery)
 f  
 {
	 
	 
	 set (SCHDate,PAPMIRowID,UserDR,HospID,Count)=""
	 &SQL(FETCH  UserSocialHistoryQuery into :SCHDate,:PAPMIRowID,:UserDR,:Region,:Site,:HospID,:Count) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(SCHDate,PAPMIRowID,UserDR,regioncode,sitecode,HospID,Count)
 }
 &SQL(CLOSE  UserSocialHistoryQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserSocialHistoryQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserSocialHistoryQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserSocialHistoryQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserSocialHistoryQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserPastHistoryQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="PHISTDate:%String,PAPMIRowID:%String,UserDR:%String,Region:%String,Site:%String,HospID:%String,Count:%String"/>
</Query>

<Method name="UserPastHistoryQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
  &SQL(DECLARE  UserPastHistoryQuery CURSOR FOR
select 
TO_CHAR(PHIST_Date,'YYYY-MM-DD') As "PHISTDate"
,:regioncode||'-'||:sitecode||'-PAT-'||PHIST_ParRef->PAPMI_RowId as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||PHIST_UpdateUser_DR as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||PHIST_UpdateHospital_DR as "HospID"
,count(*) as "Count"
from  SQLUser.PA_PastHistCondition 
where PHIST_Date=:date
group by PHIST_Date,PHIST_ParRef,PHIST_UpdateUser_DR,PHIST_UpdateHospital_DR
)
 &SQL(OPEN  UserPastHistoryQuery)
 f  
 {
	 
	 
	 set (PHISTDate,PAPMIRowID,UserDR,HospID,Count)=""
	 &SQL(FETCH  UserPastHistoryQuery into :PHISTDate,:PAPMIRowID,:UserDR,:Region,:Site,:HospID,:Count) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(PHISTDate,PAPMIRowID,UserDR,regioncode,sitecode,HospID,Count)
 }
 &SQL(CLOSE  UserPastHistoryQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserPastHistoryQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserPastHistoryQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserPastHistoryQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserPastHistoryQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserSuregryHistoryQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="OPERDate:%String,PAPMIRowID:%String,UserDR:%String,Region:%String,Site:%String,HospID:%String,Count:%String"/>
</Query>

<Method name="UserSuregryHistoryQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
  &SQL(DECLARE  UserSuregryHistoryQuery CURSOR FOR
select 
TO_CHAR(OPER_UpdateDate,'YYYY-MM-DD') As "OPERDate"
,:regioncode||'-'||:sitecode||'-PAT-'||OPER_ParRef->PAPMI_RowId as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||OPER_UpdateUser_DR as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||OPER_UpdateHospital_DR as "HospID"
,count(*) as "Count"
from  SQLUser.PA_Operation 
where OPER_UpdateDate=:date
group by OPER_UpdateDate,OPER_ParRef,OPER_UpdateUser_DR,OPER_UpdateHospital_DR)
 &SQL(OPEN  UserSuregryHistoryQuery)
 f  
 {
	 
	 
	 set (OPERDate,PAPMIRowID,UserDR,HospID,Count)=""
	 &SQL(FETCH  UserSuregryHistoryQuery into :OPERDate,:PAPMIRowID,:UserDR,:Region,:Site,:HospID,:Count) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(OPERDate,PAPMIRowID,UserDR,regioncode,sitecode,HospID,Count)
 }
 &SQL(CLOSE  UserSuregryHistoryQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserSuregryHistoryQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserSuregryHistoryQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserSuregryHistoryQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserSuregryHistoryQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserFamilyHistoryQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="FAMDate:%String,RelCode:%String,RelDesc:%String,PAPMIRowID:%String,UserDR:%String,Region:%String,Site:%String,HospID:%String,Count:%String"/>
</Query>

<Method name="UserFamilyHistoryQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
  &SQL(DECLARE  UserFamilyHistoryQuery CURSOR FOR
select 
TO_CHAR(FAM_UpdateDate,'YYYY-MM-DD') As "FAMDate"
,FAM_Relation_DR->CTRLT_Code as "RelCode"
,FAM_Relation_DR->CTRLT_Desc as "RelDesc"
,:regioncode||'-'||:sitecode||'-PAT-'||FAM_PAPMI_ParRef->PAPMI_RowId as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||FAM_UpdateUser_DR as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||FAM_UpdateHospital_DR as "HospID"
,count(*) as "Count"
from  SQLUser.PA_Family
where FAM_UpdateDate=:date
group by FAM_UpdateDate,FAM_Relation_DR,FAM_PAPMI_ParRef,FAM_UpdateUser_DR,FAM_UpdateHospital_DR)
 &SQL(OPEN  UserFamilyHistoryQuery)
 f  
 {
	 
	 
	 set (FAMDate,RelCode,RelDesc,PAPMIRowID,UserDR,HospID,Count)=""
	 &SQL(FETCH  UserFamilyHistoryQuery into :FAMDate,:RelCode,:RelDesc,:PAPMIRowID,:UserDR,:Region,:Site,:HospID,:Count) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(FAMDate,RelCode,RelDesc,PAPMIRowID,UserDR,regioncode,sitecode,HospID,Count)
 }
 &SQL(CLOSE  UserFamilyHistoryQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserFamilyHistoryQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserFamilyHistoryQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserFamilyHistoryQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserFamilyHistoryQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserPatProblemsQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="PROBDate:%String,PAPMIRowID:%String,UserDR:%String,Region:%String,Site:%String,Count:%String"/>
</Query>

<Method name="UserPatProblemsQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 
 #if ($$$TCVersion<=2012)
	
		 
	
	#else
 
 //
  &SQL(DECLARE  UserPatProblemsQuery CURSOR FOR
select 
TO_CHAR(PROB_UpdateDate,'YYYY-MM-DD') As "PROBDate"
,:regioncode||'-'||:sitecode||'-PAT-'||PROB_ParRef->PAPMI_RowId as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||PROB_UpdateUser_DR as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,count(*) as "Count"
from  SQLUser.PA_Problem
where PROB_UpdateDate=:date
group by PROB_UpdateDate,PROB_ParRef,PROB_UpdateUser_DR)
 &SQL(OPEN  UserPatProblemsQuery)
 f  
 {
	 
	 
	 set (PROBDate,PAPMIRowID,UserDR,Count)=""
	 &SQL(FETCH  UserPatProblemsQuery into :PROBDate,:PAPMIRowID,:UserDR,:Region,:Site,:Count) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(PROBDate,PAPMIRowID,UserDR,regioncode,sitecode,Count)
 }
 &SQL(CLOSE  UserPatProblemsQuery)
 
 
 #endif
 
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserPatProblemsQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserPatProblemsQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserPatProblemsQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserPatProblemsQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserCurrentConditionQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="PRESIDate:%String,PAADMRowID:%String,PAPMIRowID:%String,UserDR:%String,Region:%String,Site:%String,HospID:%String,Count:%String"/>
</Query>

<Method name="UserCurrentConditionQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
  &SQL(DECLARE  UserCurrentConditionQuery CURSOR FOR
select 
TO_CHAR(PRESI_Date,'YYYY-MM-DD') As "PRESIDate"
,:regioncode||'-'||:sitecode||'-EPS-'||PRESI_ParRef->MRADM_ADM_DR as "PAADMRowID"
,:regioncode||'-'||:sitecode||'-PAT-'||PRESI_ParRef->MRADM_ADM_DR->PAADM_PAPMI_DR as "PAPMIRowID"
,:regioncode||'-'||:sitecode||'-USER-'||PRESI_UpdateUser_DR as "UserDR"
,:regioncode as "Region"
,:sitecode as "Site"
,:regioncode||'-'||:sitecode||'-HOSP-'||PRESI_UpdateHospital_DR as "HospID"
,count(*) as "Count"
from  sqluser.MR_PresentIllness
where PRESI_Date=:date
group by PRESI_Date,PRESI_ParRef,PRESI_UpdateUser_DR,PRESI_UpdateHospital_DR)
 &SQL(OPEN  UserCurrentConditionQuery)
 f  
 {
	 
	 
	 set (PRESIDate,PAADMRowID,PAPMIRowID,UserDR,HospID,Count)=""
	 &SQL(FETCH  UserCurrentConditionQuery into :PRESIDate,:PAADMRowID,:PAPMIRowID,:UserDR,:Region,:Site,:HospID,:Count) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(PRESIDate,PAADMRowID,PAPMIRowID,UserDR,regioncode,sitecode,HospID,Count)
 }
 &SQL(CLOSE  UserCurrentConditionQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserCurrentConditionQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserCurrentConditionQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserCurrentConditionQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserCurrentConditionQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>

<Query name="UserSiteQuery">
<Type>%Query</Type>
<FormalSpec>date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="ROWSPEC" value="Region:%String,Site:%String,TCVersion:%String,RoutineVersion:%String,ExtractDate:%String,FromDate:%String,ToDate:%String,PatientsCount:%String,EpisodesCount:%String,OrdersCount:%String,OrdersAlertsCount:%String,PrescCount:%String,UsersCount:%String,QuestionnaireCount:%String,ObservationsCount:%String,DiagnosisCount:%String,ClinicalNotesCount:%String,ClinicalDocsCount:%String,EncounterCount:%String,EntriesCount:%String,AnesSummaryCount:%String,OTBookingCount:%String,AnnImagesCount:%String,VisualRulesAuidtCount:%String,AlertsCount:%String,AllergiesCount:%String,SocialHistoryCount:%String,PastHistoryCount:%String,SurgicalHistoryCount:%String,FamilyHistoryCount:%String,CurrentConditionCount:%String,ProblemsCount:%String"/>
</Query>

<Method name="UserSiteQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,date:%String,fromdate:%String,todate:%String,regioncode:%String,sitecode:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind
 // Use $Increment to get the next node and clean up
 Set repid=$Increment(^CacheTemp("TRAK"))
 Kill ^CacheTemp("TRAK",repid) 
 s ind=0
 //
 //
 //
 //
 //
 
 #if ($$$TCVersion<=2012)
	
		  &SQL(DECLARE  UserSiteQuery CURSOR FOR
select :regioncode as "Region"
,:sitecode as "Site"
,(select count(*) from SQLUser.pa_patmas where not PAPMI_No is null) as "PatientsCount"
,(select count(*) from SQLUser.pa_adm) as "EpisodesCount"
,(select count(*) from SQLUser.OE_OrdItem) as "OrdersCount"
,(select count(*) from SQLUser.OE_OrdAlertMessage) as "OrdersAlertsCount"
,(select count(*) from SQLUser.PA_Que1) as "PrescCount"
,(select count(*) from SQLUser.SS_User) as "UsersCount"
,(select count(*) from SQLUser.SS_UserDefWindow) as "QuestionnaireCount"
,(select count(*) from SQLUser.MR_Observations) as "ObservationsCount"
,(select count(*) from SQLUser.MR_Diagnos) as "DiagnosisCount"
,(select count(*) from SQLUser.MR_NursingNotes) as "ClinicalNotesCount"
,(select count(*) from SQLUser.MR_Pictures) as "ClinicalDocsCount"
,'0' as "EncounterCount"
,'0' as "EntriesCount"
,(select count(*) from SQLUser.OR_Anaesthesia) as "AnesSummaryCount"
,(select count(*) from SQLUser.RB_OperatingRoom) as "OTBookingCount"
,(select count(*) from SQLUser.OE_Annotation) as "AnnImagesCount"
,(select count(*) from websys.DSSAuditAction ) as "VisualRulesAuidtCount"
,(select count(*) from SQLUser.PA_AlertMsg) as "AlertsCount"
,(select count(*) from SQLUser.PA_Allergy ) as "AllergiesCount"
,(select count(*) from SQLUser.PA_SocHist) as "SocialHistoryCount"
,(select count(*) from SQLUser.PA_PastHistCondition ) as "PastHistoryCount"
,(select count(*) from SQLUser.PA_Operation) as "SurgicalHistoryCount"
,(select count(*) from SQLUser.PA_Family) as "FamilyHistoryCount"
,(select count(*) from sqluser.MR_PresentIllness) as "CurrentConditionCount"
,'0' as "ProblemsCount"
)
	
	#else
	
	 &SQL(DECLARE  UserSiteQuery CURSOR FOR
select :regioncode as "Region"
,:sitecode as "Site"
,(select count(*) from SQLUser.pa_patmas) as "PatientsCount"
,(select count(*) from SQLUser.pa_adm) as "EpisodesCount"
,(select count(*) from SQLUser.OE_OrdItem) as "OrdersCount"
,(select count(*) from SQLUser.OE_OrdAlertMessage) as "OrdersAlertsCount"
,(select count(*) from SQLUser.PA_Que1) as "PrescCount"
,(select count(*) from SQLUser.SS_User) as "UsersCount"
,(select count(*) from SQLUser.SS_UserDefWindow) as "QuestionnaireCount"
,(select count(*) from SQLUser.MR_Observations) as "ObservationsCount"
,(select count(*) from SQLUser.MR_Diagnos) as "DiagnosisCount"
,(select count(*) from SQLUser.MR_NursingNotes) as "ClinicalNotesCount"
,(select count(*) from SQLUser.MR_Pictures) as "ClinicalDocsCount"
,(select count(*) from SQLUser.MR_Encounter) as "EncounterCount"
,(select count(*) from SQLUser.MR_EncEntry) as "EntriesCount"
,(select count(*) from SQLUser.OR_Anaesthesia) as "AnesSummaryCount"
,(select count(*) from SQLUser.RB_OperatingRoom) as "OTBookingCount"
,(select count(*) from SQLUser.OE_Annotation) as "AnnImagesCount"
,(select count(*) from websys.DSSAuditAction ) as "VisualRulesAuidtCount"
,(select count(*) from SQLUser.PA_AlertMsg) as "AlertsCount"
,(select count(*) from SQLUser.PA_Allergy ) as "AllergiesCount"
,(select count(*) from SQLUser.PA_SocHist) as "SocialHistoryCount"
,(select count(*) from SQLUser.PA_PastHistCondition ) as "PastHistoryCount"
,(select count(*) from SQLUser.PA_Operation) as "SurgicalHistoryCount"
,(select count(*) from SQLUser.PA_Family) as "FamilyHistoryCount"
,(select count(*) from sqluser.MR_PresentIllness) as "CurrentConditionCount"
,(select count(*) from SQLUser.PA_Problem) as "ProblemsCount"
)
	
	#endif
 
 
 
 &SQL(OPEN  UserSiteQuery)
 f  
 {
	 set ExtractDate=$zdate(+$h,3)
	 Set FromDate=$zdate(fromdate,3)
	 set ToDate=$ZDATE(todate,3)
	  
	 set TCVersion=##class(websys.Configuration).VersionString()
	  
	 
	 &SQL(FETCH  UserSiteQuery into :Region,:Site,:PatientsCount,:EpisodesCount,:OrdersCount,:OrdersAlertsCount,:PrescCount,:UsersCount,:QuestionnaireCount,:ObservationsCount,:DiagnosisCount,:ClinicalNotesCount,:ClinicalDocsCount,:EncounterCount,:EntriesCount,:AnesSummaryCount,:OTBookingCount,:AnnImagesCount,:VisualRulesAuidtCount,:AlertsCount,:AllergiesCount,:SocialHistoryCount,:PastHistoryCount,:SurgicalHistoryCount,:FamilyHistoryCount,:CurrentConditionCount,:ProblemsCount) 
	 q:SQLCODE'=0  
	 s ind=ind+1
	 Set ^CacheTemp("TRAK",repid,ind)=$LB(regioncode,sitecode,TCVersion,..#RoutineVersion,ExtractDate,FromDate,ToDate,PatientsCount,EpisodesCount,OrdersCount,OrdersAlertsCount,PrescCount,UsersCount,QuestionnaireCount,ObservationsCount,DiagnosisCount,ClinicalNotesCount,ClinicalDocsCount,EncounterCount,EntriesCount,AnesSummaryCount,OTBookingCount,AnnImagesCount,VisualRulesAuidtCount,AlertsCount,AllergiesCount,SocialHistoryCount,PastHistoryCount,SurgicalHistoryCount,FamilyHistoryCount,CurrentConditionCount,ProblemsCount)
 }
 &SQL(CLOSE  UserSiteQuery)
 Set qHandle=$lb(0,repid,0)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UserSiteQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>UserSiteQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..CloseQuery(.qHandle)
]]></Implementation>
</Method>

<Method name="UserSiteQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>UserSiteQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..FetchQuery(.qHandle,.Row,.AtEnd)
]]></Implementation>
</Method>
</Class>
</Export>
