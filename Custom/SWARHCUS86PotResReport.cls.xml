<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARHCUS86PotResReport">
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>61850,35068.786558</TimeCreated>

<Method name="PotResReportClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="PotResReportExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,Hospital:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 New repid,ind // Use $Increment to get the next node
 Set repid=$I(^CacheTemp) // Build data into ^CacheTemp(ReportID) e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n,str
 
 n ID,QUESPAPatMasDR,PatUR,PatName,PatName2,PatName3,PatAge,PatSex
 n CareProvName
 n ResLevel,QDEMSPEC
 n QAPPRESPPERM,QVASSRES,QCURRACCR,QFEPA,QMPOA,QGADMORD,QEPOG,QINFOPCK,
   UsrSurname,UsrGivenname,QUESCreateUserDR,UsrGroup,QUESDate,QHOSP
 s (ID,QUESPAPatMasDR,QHOSP)=0 
 s (PatUR,PatName,PatName2,PatName3,PatAge,PatSex)=""
 s (CareProvName)=""
 s (ResLevel,QDEMSPEC)=""
 s (QAPPRESPPERM,QVASSRES,QCURRACCR,QFEPA,QMPOA,QGADMORD,QEPOG,QINFOPCK)=0
 s (UsrSurname,UsrGivenname,QUESCreateUserDR,UsrGroup,QUESDate)=""  
 n idx,maxlength,currentstr,currentlength
 s ind=1
 s END=0

 &sql(declare PotResReport cursor for

Select  distinct ID,
		QUESPAPatMasDR,
        QUESPAPatMasDR->PAPMI_No,
        QUESPAPatMasDR->PAPMI_Name,
        QUESPAPatMasDR->PAPMI_Name2,
        QUESPAPatMasDR->PAPMI_Name3,
        QUESPAPatMasDR->PAPMI_PAPER_DR->PAPER_AgeYr,
        QUESPAPatMasDR->PAPMI_SEX_DR->CTSEX_Code,
        
        CTPCP_Desc,
        QRESLEVEL,
        QDEMSPEC,
   		QAPPRESPPERM,QVASSRES,QCURRACCR,QFEPA,QMPOA,QGADMORD,QEPOG,QINFOPCK,
   		
   		SSUSR_Surname, SSUSR_Givenname,
  		QUESCreateUserDR,
  		SSGRP_Desc,QUESDate,
  		QHOSP


From    questionnaire.QPOTRES,SQLUser.CT_CareProv,SQLUser.SS_User,SQLUser.SS_Group,SQLUser.PA_PatMas,SQLUser.CT_Sex

Where	SQLUser.CT_CareProv.CTPCP_RowId*=questionnaire.QPOTRES.QMEDOFF And SSUSR_RowID=QUESCreateUserDR
and SSGRP_RowId=SSUSR_Group and QINACTIVE = 0 and QHOSP=:Hospital 
and QUESPAPatMasDR not in (select QUESPAPatMasDR from questionnaire.QPOTRES where QINACTIVE=1 group by QUESPAPatMasDR having count(*)=1)
order by ID desc
	
)
 
 &sql(open PotResReport)
 //fetch first order record
 &sql(fetch PotResReport into :ID,:QUESPAPatMasDR,:PatUR,:PatName,:PatName2,:PatName3,:PatAge,:PatSex,
 :CareProvName,:ResLevel,:QDEMSPEC,
 :QAPPRESPPERM,:QVASSRES,:QCURRACCR,:QFEPA,:QMPOA,:QGADMORD,:QEPOG,:QINFOPCK,
 :UsrSurname,:UsrGivenname,:QUESCreateUserDR,:UsrGroup,:QUESDate,:QHOSP)
 while 'SQLCODE{
 
 Do FormatDates
 s PatName = $zconvert(PatName,"u")
 s PatName2 = $zconvert($extract(PatName2,1),"u")_$zconvert($extract(PatName2,2,$length(PatName2)),"l")
 
 ; define all off the Text Area strings.
 ; Set up maxlength here. Once defined, we don't have to define it again - it will apply to all loops.
 s maxlength=30000
 // build the row
 Set str=$LB(ID,QUESPAPatMasDR,PatUR,PatName,PatName2,PatName3,PatAge,PatSex,
 CareProvName,ResLevel,QDEMSPEC,QAPPRESPPERM,QVASSRES,QCURRACCR,QFEPA,QMPOA,QGADMORD,QEPOG,QINFOPCK,
 UsrSurname,UsrGivenname,QUESCreateUserDR,UsrGroup,QUESDate,QHOSP)
 Set ^CacheTemp(repid,ind)=str
 s ind=ind+1
 //fetch next order records
 &sql(fetch PotResReport into :ID,:QUESPAPatMasDR,:PatUR,:PatName,:PatName2,:PatName3,:PatAge,:PatSex,:CareProvName,:ResLevel,:QDEMSPEC,
 :QAPPRESPPERM,:QVASSRES,:QCURRACCR,:QFEPA,:QMPOA,:QGADMORD,:QEPOG,:QINFOPCK,
 :UsrSurname,:UsrGivenname,:QUESCreateUserDR,:UsrGroup,:QUESDate,:QHOSP)
 }
 &sql(close PotResReport)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 Quit $$$OK
FormatDates
 // Convert the dates to ODBC date format
 If QUESDate Set QUESDate=$ZD(QUESDate,3)
 Quit
]]></Implementation>
</Method>

<Method name="PotResReportFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="PotResReport">
<Description>
It expects 1 parameter of type integer and will return 40 odd fields:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time</Description>
<Type>%Library.Query</Type>
<FormalSpec>Hospital:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="ID:%Integer,QUESPAPatMasDR:%Integer,PatUR:%String(MAXLEN=255),PatName:%String(MAXLEN=255),PatName2:%String(MAXLEN=255),PatName3:%String(MAXLEN=255),PatAge:%String(MAXLEN=255),PatSex:%String(MAXLEN=255),CareProvName:%String(MAXLEN=255),ResLevel:%String(MAXLEN=255),QDEMSPEC:%String(MAXLEN=255),QAPPRESPPERM:%Boolean,QVASSRES:%Boolean,QCURRACCR:%Boolean,QFEPA:%Boolean,QMPOA:%Boolean,QGADMORD:%Boolean,QEPOG:%Boolean,QINFOPCK:%Boolean,UsrSurname:%String(MAXLEN=255),UsrGivenname:%String(MAXLEN=255),QUESCreateUserDR:%Integer,UsrGroup:%String(MAXLEN=255),QUESDate:%Date,QHOSP:%Integer"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>

<Query name="LookUpHospital">
<Description>
Lookup on Hospital returning all active services</Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>Hospital:%String</FormalSpec>
<SqlQuery><![CDATA[SELECT HOSP_Desc, HOSP_RowId, HOSP_Code
FROM SQLUser.CT_Hospital
WHERE ((%ALPHAUP HOSP_Desc %STARTSWITH %ALPHAUP :Hospital) OR (%ALPHAUP HOSP_Code %STARTSWITH %ALPHAUP :Hospital))
AND (HOSP_DateFrom <= CURRENT_DATE)
AND ((HOSP_DateTo IS NULL) OR (HOSP_DateTo >= CURRENT_DATE))
ORDER BY HOSP_Desc]]></SqlQuery>
<Parameter name="CONTAINID" value="2"/>
<Parameter name="ROWSPEC" value="Description:%String,HIDDEN:%String,Code:%String"/>
</Query>

<Method name="LookUpBrokerHospital">
<ClassMethod>1</ClassMethod>
<FormalSpec>itmjs:%Library.String="",itmjsex:%Library.String="",Hospital:%Library.String=""</FormalSpec>
<Implementation><![CDATA[
 n id,code,desc,activedate

 s (id,code,desc)=""

 ; Try and find a matching code
 &sql(SELECT	HOSP_Desc, HOSP_RowId, HOSP_Code
 INTO	:desc, :id, :code
 FROM	SQLUser.CT_Hospital
 WHERE	((%ALPHAUP HOSP_Desc = %ALPHAUP :Hospital) OR (%ALPHAUP HOSP_Code = %ALPHAUP :Hospital))
 AND (HOSP_DateFrom <= CURRENT_DATE)
 AND ((HOSP_DateTo IS NULL) OR (HOSP_DateTo >= CURRENT_DATE))
 )
 ;
 i SQLCODE s desc=Hospital q 0
 s retval=itmjs_"('"_$ZCVT(desc,"O","JS")_"');"
 i itmjsex'="""" s retval=retval_itmjsex_"('"_$ZCVT(desc,"O","JS")_"^"_id_"^"_$ZCVT(code,"O","JS")_"');"
 &javascript<#(retval)#>
 q 1
]]></Implementation>
</Method>
</Class>
</Export>
