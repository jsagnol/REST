<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.AUSW.Report.ZEN.StoredProc.IPLabel">
<ProcedureBlock>0</ProcedureBlock>
<Super>Report.Abstract</Super>
<TimeCreated>59388,55236.125</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/AUSW/Report/ZEN/StoredProc/IPLabel.xml#1 $</Default>
</Parameter>

<Method name="IPLabelsClose">
<Description>
********************************************************************
* Trak.AUSW001 Trak SWARH InPatient Label Sheet       
*
* Initial release: 01/06/2012
* 
* TRC 104713  
********************************************************************
</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$LIST(QHandle,2)
 
 //Start Monitor (if configured to capture stats)
 i mon Do ..MonitorEnd(mon)

 Kill ^CacheTemp("TRAK",repid)
 
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="IPLabelsExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,EpisodeID:%String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$Increment(^CacheTemp("TRAK"))
 
 //Start Monitor (if configured to capture stats)
 s mon=..MonitorBegin()
  
 // Build data into ^CacheTemp("TRAK",ReportID)
 // e.g. Set ^CacheTemp("TRAK",ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n,URNDetails,VertCount,VertLabels
 New PAPERStName,PAPERForeignAddress,CTCITDesc,CTZIPCode,PAPERTelH,PAPMIName,PAPMIName2,PAPMIName3,CTSEXCode,PAPERAgeYr,PAPMIDOB,PAPMINo,StAddress
 Set (PAPMIRowId)=0
 Set (PAPERStName,PAPERForeignAddress,CTCITDesc,CTZIPCode,PAPERTelH,PAPMIName,PAPMIName2,PAPMIName3,CTSEXCode,PAPERAgeYr,PAPMIDOB,PAPMINo,StAddress)=""

 Set ind=1
 Set VertCount=0
 Set VertLabels=8 ; Print 12 labels on an A4 sheet

 &SQL(DECLARE PatientLabel CURSOR FOR
 SELECT 
 PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_StName,
 PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_ForeignAddress,
 PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_CityCode_DR->CTCIT_Desc,
 PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_Zip_DR->CTZIP_Code,
 PAADM_PAPMI_DR->PAPMI_Name,
 PAADM_PAPMI_DR->PAPMI_Name2,
 PAADM_PAPMI_DR->PAPMI_Name3,
 PAADM_PAPMI_DR->PAPMI_PAPER_DR->PAPER_Sex_DR->CTSEX_Code,
 PAADM_PAPMI_DR->PAPMI_DOB,
 PAADM_PAPMI_DR->PAPMI_No,
 PAADM_PAPMI_DR->PAPMI_No
 INTO :PAPERStName,:PAPERForeignAddress,:CTCITDesc,:CTZIPCode,:PAPMIName,:PAPMIName2,:PAPMIName3,:CTSEXCode,:PAPMIDOB,:PAPMINo,:URNDetails
 FROM SQLUser.PA_Adm
 WHERE PAADM_RowId=:EpisodeID)
 
 &SQL(OPEN PatientLabel)
 
 f  &SQL(FETCH PatientLabel) q:SQLCODE'=0  d
 . set URNDetails = "*"_URNDetails_"*"
 . do ProcessData
 
 &SQL(CLOSE PatientLabel)
   
 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$LISTBUILD(0,repid,0)
 Quit $$$OK
  
ProcessData

 set PAPMIDOB=..ConvertDateToODBC(PAPMIDOB)
 set PAPERStName=$zstrip(PAPERStName,"*C")

 set PAPERForeignAddress=$zstrip(PAPERForeignAddress,"*C")
 i PAPERForeignAddress=""
 s StAddress=PAPERStName_$CHAR(10)_$CHAR(13)_CTCITDesc_" "_CTZIPCode
 else
 s StAddress=PAPERStName_$CHAR(10)_$CHAR(13)_PAPERForeignAddress_$CHAR(10)_$CHAR(13)_CTCITDesc_" "_CTZIPCode

 set VertCount = 0
 while VertCount < VertLabels {
	 do BuildRow
	 set VertCount = VertCount + 1
 }
 quit
  
BuildRow
 s ^CacheTemp("TRAK",repid,ind)=$LB($ZCVT(PAPERStName,"U"),PAPERForeignAddress,CTCITDesc,CTZIPCode,$ZCVT(PAPMIName,"U"),PAPMIName2,PAPMIName3,CTSEXCode,PAPMIDOB,PAPMINo,URNDetails,StAddress)
 s ind=$i(ind)
 quit
]]></Implementation>
</Method>

<Method name="IPLabelsFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$LI(QHandle,1)
 Set repid=$LI(QHandle,2)
 Set ind=$LI(QHandle,3)

 Set ind=$order(^CacheTemp("TRAK",repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 	Set AtEnd=1
 	Set Row=""
 }  Else  {	// fetch row
 	Set Row=^CacheTemp("TRAK",repid,ind)
 }

 // Save QHandle
 Set QHandle=$lb(AtEnd,repid,ind)
 Quit $$$OK
]]></Implementation>
</Method>

<Query name="IPLabels">
<Description>
Patient Labels Sheet</Description>
<Type>%Library.Query</Type>
<FormalSpec>EpisodeID:%String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAPERStName:%String(MAXLEN=255),PAPERForeignAddress:%String(MAXLEN=255),CTCITDesc:%String(MAXLEN=255),CTZIPCode:%String(MAXLEN=255),PAPMIName:%String(MAXLEN=255),PAPMIName2:%String(MAXLEN=255),PAPMIName3:%String(MAXLEN=255),CTSEXCode:%String(MAXLEN=255),PAPMIDOB:%Date,PAPMINo:%String(MAXLEN=255),URNDetails:%String(MAXLEN=255),StAddress:%String(MAXLEN=255)"/>
</Query>
</Class>
</Export>
