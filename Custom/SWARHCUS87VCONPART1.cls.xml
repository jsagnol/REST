<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARHCUS87VCONPART1">
<Description>
Class for VCONPART1 Extract</Description>
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject,%XML.Adaptor</Super>
<TimeCreated>61768,36149.722366</TimeCreated>
<Inheritance>right</Inheritance>

<Method name="VCONPART1Close">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="VCONPART1Execute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,DateFrom:%Date,DateTo:%Date,Hospital:%Integer]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 k ^zbernard	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 n PAPMIName,PAPMIName2,PAPMIName3,PAPERStName,PAPERForeignAddress,CTCITDesc,CTZIPCode,
 PAPERSexDR,PAPMIDOB,PAPMIMedicare,PAPMINo,CTCOUCode,INDSTCode,QHospital,
 QTumRefNo,QDateFirstAdmit,QFirstPDDT,QSiteFirstPLabel,
 QMetDiagDT,QSiteMetDiagString,QNoMetSites,QTumMorphLabel,QHistGrade,QLaterPrimary,QMVBasDiag,
 QPerfStatusScore,QStagBasis,QStagSchemeSource,QStagSchSEdNo,QTCode,QNCode,QMCode,
 QStageCode,QTumourSize,QRegLymphNodes,QRegLymphNodesPos,QHER2Status,QOestAStatus,
 QProgestAStatus
 s (PAPERSexDR,QHospital)=0
 s (PAPMIName,PAPMIName2,PAPMIName3,PAPERStName,PAPERForeignAddress,CTCITDesc,CTZIPCode,PAPMIDOB,PAPMIMedicare,PAPMINo,CTCOUCode,INDSTCode,
 QTumRefNo,QDateFirstAdmit,QFirstPDDT,QSiteFirstPLabel,
 QMetDiagDT,QSiteMetDiagString,QNoMetSites,QTumMorphLabel,QHistGrade,QLaterPrimary,QMVBasDiag,
 QPerfStatusScore,QStagBasis,QStagSchemeSource,QStagSchSEdNo,QTCode,QNCode,QMCode,
 QStageCode,QTumourSize,QRegLymphNodes,QRegLymphNodesPos,QHER2Status,QOestAStatus,
 QProgestAStatus)=""
 
  
 s ind=1

 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)

 //s ^bernard("2")=(2)
 
 &sql(declare VCONPART1 cursor for
 
 select distinct
QUESPAPatMasDR->PAPMI_Name,
QUESPAPatMasDR->PAPMI_Name2,
QUESPAPatMasDR->PAPMI_Name3,
QUESPAPatMasDR->PAPMI_PAPER_DR->PAPER_StName,
QUESPAPatMasDR->PAPMI_PAPER_DR->PAPER_ForeignAddress,
QUESPAPatMasDR->PAPMI_PAPER_DR->PAPER_CityCode_DR->CTCIT_Desc,
QUESPAPatMasDR->PAPMI_PAPER_DR->PAPER_Zip_DR->CTZIP_Code,
QUESPAPatMasDR->PAPMI_PAPER_DR->PAPER_Sex_DR,
QUESPAPatMasDR->PAPMI_DOB,
QUESPAPatMasDR->PAPMI_Medicare,
QUESPAPatMasDR->PAPMI_No,
QUESPAPatMasDR->PAPMI_PAPER_DR->PAPER_Country_Birth_DR->CTCOU_Code,
QUESPAPatMasDR->PAPMI_PAPER_DR->PAPER_IndigStat_DR->INDST_Code,
QHospital,
QTumRefNo,
QDateFirstAdmit,
QFirstPDDT,QSiteFirstPLabel,
QMetDiagDT,QSiteMetDiagString,QNoMetSites,QTumMorphLabel,QHistGrade,QLaterPrimary,QMVBasDiag,
QPerfStatusScore,QStagBasis,QStagSchemeSource,QStagSchSEdNo,QTCode,QNCode,QMCode,
QStageCode,QTumourSize,QRegLymphNodes,QRegLymphNodesPos,QHER2Status,QOestAStatus,
QProgestAStatus

from questionnaire.QVCONPART1,SQLUser.PA_Adm,SQLUser.CT_Hospital
 	
 WHERE

 	QFirstPDDT between :DateFrom AND :DateTo
 	AND QHospital=:Hospital
 		       		
)
 &sql(open VCONPART1)

  //fetch first row 
 &sql(fetch VCONPART1 into :PAPMIName,:PAPMIName2,:PAPMIName3,:PAPERStName,:PAPERForeignAddress,:CTCITDesc,:CTZIPCode,:PAPERSexDR,:PAPMIDOB,:PAPMIMedicare,:PAPMINo,:CTCOUCode,:INDSTCode,:QHospital,
 :QTumRefNo,:QDateFirstAdmit,:QFirstPDDT,:QSiteFirstPLabel,
 :QMetDiagDT,:QSiteMetDiagString,:QNoMetSites,:QTumMorphLabel,:QHistGrade,:QLaterPrimary,:QMVBasDiag,
 :QPerfStatusScore,:QStagBasis,:QStagSchemeSource,:QStagSchSEdNo,:QTCode,:QNCode,:QMCode,
 :QStageCode,:QTumourSize,:QRegLymphNodes,:QRegLymphNodesPos,:QHER2Status,:QOestAStatus,
 :QProgestAStatus
 )

 while 'SQLCODE{
 
 d FormatDates
 s PAPERStName=$zstrip(PAPERStName,"<C")
 s PAPERForeignAddress=$zstrip(PAPERForeignAddress,"<C")
 s QSiteMetDiagString=$zstrip(QSiteMetDiagString,"*C")

 // build the row
 Set ^CacheTemp(repid,ind)=$LB(PAPMIName,PAPMIName2,PAPMIName3,PAPERStName,PAPERForeignAddress,CTCITDesc,CTZIPCode,PAPERSexDR,PAPMIDOB,PAPMIMedicare,PAPMINo,CTCOUCode,INDSTCode,QHospital,QTumRefNo,QDateFirstAdmit,QFirstPDDT,QSiteFirstPLabel,
 QMetDiagDT,QSiteMetDiagString,QNoMetSites,QTumMorphLabel,QHistGrade,QLaterPrimary,QMVBasDiag,
 QPerfStatusScore,QStagBasis,QStagSchemeSource,QStagSchSEdNo,QTCode,QNCode,QMCode,
 QStageCode,QTumourSize,QRegLymphNodes,QRegLymphNodesPos,QHER2Status,QOestAStatus,
 QProgestAStatus)
 s ind=ind+1
 //fetch rows
 &sql(fetch VCONPART1 into :PAPMIName,:PAPMIName2,:PAPMIName3,:PAPERStName,:PAPERForeignAddress,:CTCITDesc,:CTZIPCode,:PAPERSexDR,:PAPMIDOB,:PAPMIMedicare,:PAPMINo,:CTCOUCode,:INDSTCode,:QHospital,
 :QTumRefNo,:QDateFirstAdmit,:QFirstPDDT,:QSiteFirstPLabel,
 :QMetDiagDT,:QSiteMetDiagString,:QNoMetSites,:QTumMorphLabel,:QHistGrade,:QLaterPrimary,:QMVBasDiag,
 :QPerfStatusScore,:QStagBasis,:QStagSchemeSource,:QStagSchSEdNo,:QTCode,:QNCode,:QMCode,
 :QStageCode,:QTumourSize,:QRegLymphNodes,:QRegLymphNodesPos,:QHER2Status,:QOestAStatus,
 :QProgestAStatus
 )
 }

 //s ^zBernard("3")=(3)
 &sql(close VCONPART1)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 //s ^zBernard("4")=(4)

 Quit $$$OK


FormatDates
 // Convert the dates to ODBC date format
 If PAPMIDOB Set PAPMIDOB=$ZD(PAPMIDOB,3)
 If QFirstPDDT Set QFirstPDDT=$ZD(QFirstPDDT,3)
 If QMetDiagDT Set QMetDiagDT=$ZD(QMetDiagDT,3)
 If QDateFirstAdmit Set QDateFirstAdmit=$ZD(QDateFirstAdmit,3)
 Quit
]]></Implementation>
</Method>

<Method name="VCONPART1Fetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)

 Quit $$$OK
]]></Implementation>
</Method>

<Query name="VCONPART1">
<Description>
GHA List reports Stored Procedure
It expects 2 parameter of type date and will return a list of records:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time</Description>
<Type>%Library.Query</Type>
<FormalSpec>DateFrom:%Date,DateTo:%Date,Hospital:%Integer</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="PAPMIName:%String(MAXLEN=255),PAPMIName2:%String(MAXLEN=255),PAPMIName3:%String(MAXLEN=255),PAPERStName:%String(MAXLEN=255),PAPERForeignAddress:%String(MAXLEN=255),CTCITDesc:%String(MAXLEN=255),CTZIPCode:%String(MAXLEN=255),PAPERSexDR:%Integer,PAPMIDOB:%String(MAXLEN=255),PAPMIMedicare:%String(MAXLEN=255),PAPMINo:%String(MAXLEN=255),CTCOUCode:%String(MAXLEN=255),INDSTCode:%String(MAXLEN=255),QHospital:%Integer,QTumRefNo:%String(MAXLEN=255),QDateFirstAdmit:%String(MAXLEN=255),QFirstPDDT:%String(MAXLEN=255),QSiteFirstPLabel:%String(MAXLEN=255),QMetDiagDT:%String(MAXLEN=255),QSiteMetDiagString:%String(MAXLEN=255),QNoMetSites:%String(MAXLEN=255),QTumMorphLabel:%String(MAXLEN=255),QHistGrade:%String(MAXLEN=255),QLaterPrimary:%String(MAXLEN=255),QMVBasDiag:%String(MAXLEN=255),QPerfStatusScore:%String(MAXLEN=255),QStagBasis:%String(MAXLEN=255),QStagSchemeSource:%String(MAXLEN=255),QStagSchSEdNo:%String(MAXLEN=255),QTCode:%String(MAXLEN=255),QNCode:%String(MAXLEN=255),QMCode:%String(MAXLEN=255),QStageCode:%String(MAXLEN=255),QTumourSize:%String(MAXLEN=255),QRegLymphNodes:%String(MAXLEN=255),QRegLymphNodesPos:%String(MAXLEN=255),QHER2Status:%String(MAXLEN=255),QOestAStatus:%String(MAXLEN=255),QProgestAStatus:%String(MAXLEN=255)"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>

<Query name="LookUpHospital">
<Description>
Lookup on Hospital returning all active services</Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>Hospital:%String</FormalSpec>
<SqlQuery><![CDATA[SELECT HOSP_Desc, HOSP_RowId, HOSP_Code
FROM SQLUser.CT_Hospital
WHERE ((%ALPHAUP HOSP_Desc %STARTSWITH %ALPHAUP :Hospital) OR (%ALPHAUP HOSP_Code %STARTSWITH %ALPHAUP :Hospital))
AND (HOSP_DateFrom <= CURRENT_DATE)
AND ((HOSP_DateTo IS NULL) OR (HOSP_DateTo >= CURRENT_DATE))
ORDER BY HOSP_Desc]]></SqlQuery>
<Parameter name="CONTAINID" value="2"/>
<Parameter name="ROWSPEC" value="Description:%String,HIDDEN:%String,Code:%String"/>
</Query>

<Method name="LookUpBrokerHospital">
<ClassMethod>1</ClassMethod>
<FormalSpec>itmjs:%Library.String="",itmjsex:%Library.String="",Hospital:%Library.String=""</FormalSpec>
<Implementation><![CDATA[
 n id,code,desc,activedate

 s (id,code,desc)=""

 ; Try and find a matching code
 &sql(SELECT	HOSP_Desc, HOSP_RowId, HOSP_Code
 INTO	:desc, :id, :code
 FROM	SQLUser.CT_Hospital
 WHERE	((%ALPHAUP HOSP_Desc = %ALPHAUP :Hospital) OR (%ALPHAUP HOSP_Code = %ALPHAUP :Hospital))
 AND (HOSP_DateFrom <= CURRENT_DATE)
 AND ((HOSP_DateTo IS NULL) OR (HOSP_DateTo >= CURRENT_DATE))
 )
 ;
 i SQLCODE s desc=Hospital q 0
 s retval=itmjs_"('"_$ZCVT(desc,"O","JS")_"');"
 i itmjsex'="""" s retval=retval_itmjsex_"('"_$ZCVT(desc,"O","JS")_"^"_id_"^"_$ZCVT(code,"O","JS")_"');"
 &javascript<#(retval)#>
 q 1
]]></Implementation>
</Method>

<Query name="LookUpAlert">
<Description>
Lookup on Alerts </Description>
<Type>%Library.SQLQuery</Type>
<FormalSpec>Alert:%String</FormalSpec>
<SqlQuery>SELECT Alert_Desc, Alert_RowId, Alert_Code 
FROM SQLUser.PAC_PatientAlert
WHERE ((%ALPHAUP Alert_Desc %STARTSWITH %ALPHAUP :Alert) OR (%ALPHAUP Alert_Code %STARTSWITH %ALPHAUP :Alert))
ORDER BY Alert_Desc</SqlQuery>
<Parameter name="CONTAINID" value="2"/>
<Parameter name="ROWSPEC" value="Description:%String,HIDDEN:%String,Code:%String"/>
</Query>

<Method name="LookUpBrokerAlert">
<ClassMethod>1</ClassMethod>
<FormalSpec>itmjs:%Library.String="",itmjsex:%Library.String="",Alert:%Library.String=""</FormalSpec>
<Implementation><![CDATA[
 n id,code,desc

 s (id,code,desc)=""

 ; Try and find a matching code
 &sql(SELECT	 Alert_Desc, Alert_Code, Alert_RowId
 INTO	:desc, :code, :id
 FROM	SQLUser.PAC_PatientAlert
 WHERE	((%ALPHAUP Alert_Desc = %ALPHAUP :Alert) OR (%ALPHAUP Alert_Code = %ALPHAUP :Alert))
 )
 ;
 i SQLCODE s desc=Alert q 0
 s retval=itmjs_"('"_$ZCVT(desc,"O","JS")_"');"
 i itmjsex'="""" s retval=retval_itmjsex_"('"_$ZCVT(desc,"O","JS")_"^"_id_"^"_$ZCVT(code,"O","JS")_"');"
 &javascript<#(retval)#>
 q 1
]]></Implementation>
</Method>
</Class>
</Export>
