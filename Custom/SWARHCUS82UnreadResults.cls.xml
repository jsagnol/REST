<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Custom.SWARHCUS82UnreadResults">
<Description><![CDATA[
<pre>
**************************************************************************************************************************************
* Report Code: SWARH.MTED.082
* Report Description: Unread Pathology Results
* Menu Caption: Unread Results
* Initial release: Unknown
* Developer: Unknown
* Modified: 10/10/2013 Bradly Sharpe - Added the Ward, CareProvider and SortBy Parameters. Changed the query to filter on Ward and CareProvider. 
*										The Sort By is not used at the moment, looking to use this when converted to Reporting Services.
* 
**************************************************************************************************************************************
</pre>
Unread Pathology Results]]></Description>
<ClassType/>
<ProcedureBlock>0</ProcedureBlock>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>61579,40584</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id: //custom_ccrs/au/AUSW/T2016/BASE/cls/Custom/SWARHCUS82UnreadResults.xml#1 $</Default>
</Parameter>

<Method name="UnreadResultsClose">
<Description>
This is the Close component of the %Library.Query.
This is standard code and should never have to change.
This is where all the cleanup is performed, i.e. the purging of the temporary storage global ^CacheTemp.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>QHandle:%Library.Binary</FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // Clean up by purging the temporary node in ^CacheTemp global
 New repid
 Set repid=$li(QHandle,2)
 Kill ^CacheTemp(repid)
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UnreadResultsExecute">
<Description>
This is the Execute section for the %Library.Query. 
All of the logic will be performed here.
A new node for the ^CacheTemp global will be created and each subscript of this global will contain
a row for the report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,DateFrom:%Library.Date,DateTo:%Library.Date,Hospital:%Library.Integer,Ward:%Library.String,CareProvider:%Library.String,SortBy:%Library.String]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
	
 //SORTBY PARAMETER NOT USED AT THE MOMENT FOR CRYSTAL, ADDED FOR WHEN CONVERTED TO REPORTING SERVICES
	
 k ^zbernard	
 // Get reportid i.e. use $INCREMENT to add another node to ^CacheTemp global. 
 // We use ^CacheTemp global because it will always use memory before disk
 New repid,ind

 // Use $Increment to get the next node
 Set repid=$I(^CacheTemp)
 s ^zBernard("1")=(1)

 // Build data into ^CacheTemp(ReportID)
 // e.g. Set ^CacheTemp(ReportID,Index)=$LB(f1,f2,f3)
 New Number,String,Date,Time,c,n
 n WARDCode, CTPCPDesc, PAPMIName, PAPMIName2, PAPMINo, PAADMADMNo, PAADMAdmDate, PAADMDischgDate, ARCIMDesc, OEORISttDat, OEORISttTim, TRDateVerified, HOSPDesc, TRUserReadDR, WARDDesc, CTPCPCode, HOSPRowId, OEORIResultFlag, TRResStatDR, TRTimeVerified
 s (TRUserReadDR, HOSPRowID, TRResStatDR)=0
 s (WARDCode, CTPCPDesc, PAPMIName, PAPMIName2, PAPMINo, PAADMADMNo, PAADMAdmDate, PAADMDischgDate, ARCIMDesc, OEORISttDat, OEORISttTim, TRDateVerified, HOSPDesc, WARDDesc, CTPCPCode, OEORIResultFlag, TRTimeVerified)=""
 
  
 s ind=1

 //Convert ODBC dates to cache format
 s DateFrom=$$intdate^SSUTIL4(DateFrom)
 s DateTo=$$intdate^SSUTIL4(DateTo)
 s Ward=$zstrip(Ward,"*CW")
 s CareProvider=$zstrip(CareProvider,"*CW")
 s SortBy=$zstrip(SortBy,"*CW")
 s Hospital=$zstrip(Hospital,"*CW")

 //s ^bernard("2")=(2)
 
 &sql(declare UnreadResults cursor for
 
 SELECT
 	PAC_Ward.WARD_Code,
 	CT_CareProv.CTPCP_Desc,
 	PA_PatMas.PAPMI_Name,
 	PA_PatMas.PAPMI_Name2,
 	PA_PatMas.PAPMI_No,
 	PA_Adm.PAADM_ADMNo,
 	PA_Adm.PAADM_AdmDate,
 	PA_Adm.PAADM_DischgDate,
 	ARC_ItmMast.ARCIM_Desc,
 	OE_OrdItem.OEORI_SttDat,
 	OE_OrdItem.OEORI_SttTim,
 	OE_TextResult.TR_DateVerified,
 	CT_Hospital.HOSP_Desc,
 	OE_TextResult.TR_UserRead_DR,
 	PAC_Ward.WARD_Desc,
 	CT_CareProv.CTPCP_Code,
 	CT_Hospital.HOSP_RowId,
 	OE_OrdItem.OEORI_ResultFlag,
 	OE_TextResult.TR_ResStat_DR,
 	OE_TextResult.TR_TimeVerified
 	
 FROM
 	SQLUser.OE_OrdItem OE_OrdItem,
 	SQLUser.OE_Order OE_Order,
 	SQLUser.OE_OrdTextResult OE_OrdTextResult,
 	SQLUser.ARC_ItmMast ARC_ItmMast,
 	SQLUser.OE_TextResult OE_TextResult,
 	SQLUser.PA_Adm PA_Adm,
 	SQLUser.PA_PatMas PA_PatMas,
 	SQLUser.CT_Hospital CT_Hospital,
 	SQLUser.PAC_Ward PAC_Ward,
 	SQLUser.CT_CareProv CT_CareProv
 	
 WHERE
 		(OE_OrdItem.OEORI_OEORD_ParRef=OE_Order.OEORD_RowId)
 	AND (OE_OrdItem.OEORI_RowId=OE_OrdTextResult.TRES_ParRef)
 	AND (OE_OrdItem.OEORI_ItmMast_DR=ARC_ItmMast.ARCIM_RowId)
 	AND (OE_OrdTextResult.TRES_OETR_DR=OE_TextResult.TR_RowId)
 	AND (OE_Order.OEORD_Adm_DR=PA_Adm.PAADM_RowID)
 	AND (PA_Adm.PAADM_PAPMI_DR=PA_PatMas.PAPMI_RowId)
 	AND (PA_Adm.PAADM_Hospital_DR=CT_Hospital.HOSP_RowId)
 	AND (PA_Adm.PAADM_CurrentWard_DR=PAC_Ward.WARD_RowID)
 	AND (PA_Adm.PAADM_AdmDocCodeDR=CT_CareProv.CTPCP_RowId)
 	AND OE_OrdItem.OEORI_SttDat between :DateFrom AND :DateTo
 	AND CT_Hospital.HOSP_RowId=:Hospital
 	AND ((PAC_Ward.WARD_RowID = :Ward) OR (:Ward IS NULL))
 	AND ((CT_CareProv.CTPCP_RowId = :CareProvider) OR (:CareProvider IS NULL))
 	 		
       		
)
 &sql(open UnreadResults)

  //fetch first row 
 &sql(fetch UnreadResults into :WARDCode, :CTPCPDesc, :PAPMIName, :PAPMIName2, :PAPMINo, :PAADMADMNo, :PAADMAdmDate, :PAADMDischgDate, :ARCIMDesc, :OEORISttDat, :OEORISttTim, :TRDateVerified, :HOSPDesc, :TRUserReadDR, :WARDDesc, :CTPCPCode, :HOSPRowId, :OEORIResultFlag, :TRResStatDR, :TRTimeVerified
 )

 while 'SQLCODE{
 
 d FormatDates
 d FormatTimes

 // build the row
 Set ^CacheTemp(repid,ind)=$LB(WARDCode, CTPCPDesc, PAPMIName, PAPMIName2, PAPMINo, PAADMADMNo, PAADMAdmDate, PAADMDischgDate, ARCIMDesc, OEORISttDat, OEORISttTim, TRDateVerified, HOSPDesc, TRUserReadDR, WARDDesc, CTPCPCode, HOSPRowId, OEORIResultFlag, TRResStatDR, TRTimeVerified)
 s ind=ind+1
 //fetch rows
 &sql(fetch UnreadResults into :WARDCode, :CTPCPDesc, :PAPMIName, :PAPMIName2, :PAPMINo, :PAADMADMNo, :PAADMAdmDate, :PAADMDischgDate, :ARCIMDesc, :OEORISttDat, :OEORISttTim, :TRDateVerified, :HOSPDesc, :TRUserReadDR, :WARDDesc, :CTPCPCode, :HOSPRowId, :OEORIResultFlag, :TRResStatDR, :TRTimeVerified)
 }

 //s ^zBernard("3")=(3)
 &sql(close UnreadResults)

 // Build QHandle (AtEnd,ReportID,Index)
 Set QHandle=$lb(0,repid,0)

 //s ^zBernard("4")=(4)

 Quit $$$OK


FormatDates
 // Convert the dates to ODBC date format
 If OEORISttDat Set OEORISttDat=$ZD(OEORISttDat,3)
 If PAADMAdmDate Set PAADMAdmDate=$ZD(PAADMAdmDate,3)
 If PAADMDischgDate Set PAADMDischgDate=$ZD(PAADMDischgDate,3)
 If TRDateVerified Set TRDateVerified=$ZD(TRDateVerified,3)
 Quit

FormatTimes
 // Convert the times to ODBC time format
 If OEORISttTim Set OEORISttTim=$ZT(OEORISttTim,1)
 If TRTimeVerified Set TRTimeVerified=$ZT(TRTimeVerified,1)
 Quit
]]></Implementation>
</Method>

<Method name="UnreadResultsFetch">
<Description>
This is the Fetch component of the %Library.Query. 
This should never have to change. It is designed to fetch the row for each subscript of the ^CacheTemp
global and return this row to the Crystal Report.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&QHandle:%Library.Binary,&Row:%Library.List,&AtEnd:%Library.Integer=0]]></FormalSpec>
<ReturnType>%Library.Status</ReturnType>
<Implementation><![CDATA[
 // This fetch method should never have to change. 

 // repid - Report ID
 // ind   - sequence index which represents each row

 New repid,ind

 // Restore QHandle
 Set AtEnd=$li(QHandle,1)
 Set repid=$li(QHandle,2)
 Set ind=$li(QHandle,3)

 Set ind=$o(^CacheTemp(repid,ind))
 If ind="" {	// if there are no more rows, finish fetching
 Set AtEnd=1
 Set Row=""
 }
 Else      {	// fetch row
 Set Row=^CacheTemp(repid,ind)
 }

 // Save QHandle
 s QHandle=$lb(AtEnd,repid,ind)

 Quit $$$OK
]]></Implementation>
</Method>

<Query name="UnreadResults">
<Description>
GHA List reports Stored Procedure
It expects 2 parameter of type date and will return a list of records:
Field1 - Integer
Field2 - String(MAXLEN=255)
Field3 - Date
Field4 - Time</Description>
<Type>%Library.Query</Type>
<FormalSpec>DateFrom:%Library.Date,DateTo:%Library.Date,Hospital:%Library.Integer,Ward:%Library.String,CareProvider:%Library.String,SortBy:%Library.String</FormalSpec>
<SqlProc>1</SqlProc>
<Parameter name="CONTAINID" value="0"/>
<Parameter name="ROWSPEC" value="WARDCode:%String(MAXLEN=255), CTPCPDesc:%String(MAXLEN=255), PAPMIName:%String(MAXLEN=255), PAPMIName2:%String(MAXLEN=255), PAPMINo:%String(MAXLEN=255), PAADMADMNo:%String(MAXLEN=255), PAADMAdmDate:%Date, PAADMDischgDate:%Date, ARCIMDesc:%String(MAXLEN=255), OEORISttDat:%Date, OEORISttTim:%String(MAXLEN=255), TRDateVerified:%Date, HOSPDesc:%String(MAXLEN=255), TRUserReadDR:%Integer, WARDDesc:%String(MAXLEN=255), CTPCPCode:%String(MAXLEN=255), HOSPRowId:%Integer, OEORIResultFlag:%String(MAXLEN=255), TRResStatDR:%Integer, TRTimeVerified:%String(MAXLEN=255)"/>
<Parameter name="SELECTMODE" value="ODBC"/>
</Query>
</Class>
</Export>
